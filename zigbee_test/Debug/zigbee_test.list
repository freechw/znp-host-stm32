
zigbee_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c5c  0800cb7c  0800cb7c  0001cb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d8  0800e7d8  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d8  0800e7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7e0  0800e7e0  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7e0  0800e7e0  0001e7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7e4  0800e7e4  0001e7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800e7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003034  20000144  0800e92c  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003178  0800e92c  00023178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027eb1  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049a7  00000000  00000000  00048025  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b30  00000000  00000000  0004c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001908  00000000  00000000  0004e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f854  00000000  00000000  0004fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001697b  00000000  00000000  0007f65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001114ec  00000000  00000000  00095fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a74c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a2c  00000000  00000000  001a7540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000144 	.word	0x20000144
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb64 	.word	0x0800cb64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000148 	.word	0x20000148
 80001ec:	0800cb64 	.word	0x0800cb64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000160 	.word	0x20000160
 80005d0:	200001b4 	.word	0x200001b4

080005d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_GPIO_Init+0x5c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a14      	ldr	r2, [pc, #80]	; (8000640 <MX_GPIO_Init+0x5c>)
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_GPIO_Init+0x5c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_GPIO_Init+0x5c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <MX_GPIO_Init+0x5c>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_GPIO_Init+0x5c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800061a:	f006 f889 	bl	8006730 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_GPIO_Init+0x5c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <MX_GPIO_Init+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MX_GPIO_Init+0x5c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <log_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static SemaphoreHandle_t dbg_sem;

void log_print(const char *fmt, ...) {
 8000644:	b40f      	push	{r0, r1, r2, r3}
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
	// small local working buffer
	static char working_buffer[256];

	// take semaphore
	if (xSemaphoreTake(dbg_sem, 1000) == pdFALSE)
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <log_print+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000654:	4618      	mov	r0, r3
 8000656:	f008 ff9b 	bl	8009590 <xQueueSemaphoreTake>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d01b      	beq.n	8000698 <log_print+0x54>
		return;

	// Create vaarg list
	va_list args;
	va_start(args, fmt);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	607b      	str	r3, [r7, #4]

	// Write string to buffer
	vsnprintf(working_buffer, 256, fmt, args);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <log_print+0x68>)
 8000670:	f00b fa0a 	bl	800ba88 <vsniprintf>

	// Close vaarg list
	va_end(args);

	// send data
	HAL_UART_Transmit(&huart2, (char*) working_buffer, strlen(working_buffer), 100);
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <log_print+0x68>)
 8000676:	f7ff fdbb 	bl	80001f0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	490a      	ldr	r1, [pc, #40]	; (80006ac <log_print+0x68>)
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <log_print+0x6c>)
 8000684:	f007 fe30 	bl	80082e8 <HAL_UART_Transmit>

	// Give semaphore back
	xSemaphoreGive(dbg_sem);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <log_print+0x64>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	f008 fd13 	bl	80090bc <xQueueGenericSend>
 8000696:	e000      	b.n	800069a <log_print+0x56>
		return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a2:	b004      	add	sp, #16
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	200003b4 	.word	0x200003b4
 80006ac:	200003b8 	.word	0x200003b8
 80006b0:	20002fec 	.word	0x20002fec

080006b4 <mtSysResetIndCb>:

/********************************************************************
 * START OF SYS CALL BACK FUNCTIONS
 */
static uint8_t mtSysResetIndCb(ResetIndFormat_t *msg) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	log_print("ZNP Version: %d.%d.%d\n", msg->MajorRel, msg->MinorRel, msg->HwRev);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	78db      	ldrb	r3, [r3, #3]
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <mtSysResetIndCb+0x28>)
 80006ce:	f7ff ffb9 	bl	8000644 <log_print>
	return 0;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	0800cb7c 	.word	0x0800cb7c

080006e0 <mtVersionIndCb>:

static uint8_t mtVersionIndCb(VersionSrspFormat_t *msg) {
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
	log_print("Version: %d %d %d %d %d %d", msg->MaintRel, msg->MajorRel, msg->MinorRel, msg->Product, msg->TransportRev);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	4619      	mov	r1, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	4618      	mov	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	461c      	mov	r4, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	4623      	mov	r3, r4
 800070a:	4602      	mov	r2, r0
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <mtVersionIndCb+0x3c>)
 800070e:	f7ff ff99 	bl	8000644 <log_print>
	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	0800cb94 	.word	0x0800cb94

08000720 <mtZdoStateChangeIndCb>:
 *
 * @param  uint8 zdoState
 *
 * @return SUCCESS or FAILURE
 */
static uint8_t mtZdoStateChangeIndCb(uint8_t newDevState) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	switch (newDevState) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b0a      	cmp	r3, #10
 800072e:	d86b      	bhi.n	8000808 <mtZdoStateChangeIndCb+0xe8>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <mtZdoStateChangeIndCb+0x18>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000765 	.word	0x08000765
 800073c:	0800076f 	.word	0x0800076f
 8000740:	08000779 	.word	0x08000779
 8000744:	08000789 	.word	0x08000789
 8000748:	08000799 	.word	0x08000799
 800074c:	080007a9 	.word	0x080007a9
 8000750:	080007b9 	.word	0x080007b9
 8000754:	080007c9 	.word	0x080007c9
 8000758:	080007d9 	.word	0x080007d9
 800075c:	080007e9 	.word	0x080007e9
 8000760:	080007f9 	.word	0x080007f9
		case DEV_HOLD:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not started automatically\n");
 8000764:	492d      	ldr	r1, [pc, #180]	; (800081c <mtZdoStateChangeIndCb+0xfc>)
 8000766:	2002      	movs	r0, #2
 8000768:	f005 f836 	bl	80057d8 <dbg_print>
			break;
 800076c:	e051      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_INIT:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not connected to anything\n");
 800076e:	492c      	ldr	r1, [pc, #176]	; (8000820 <mtZdoStateChangeIndCb+0x100>)
 8000770:	2002      	movs	r0, #2
 8000772:	f005 f831 	bl	80057d8 <dbg_print>
			break;
 8000776:	e04c      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_DISC:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Discovering PAN's to join\n");
 8000778:	492a      	ldr	r1, [pc, #168]	; (8000824 <mtZdoStateChangeIndCb+0x104>)
 800077a:	2002      	movs	r0, #2
 800077c:	f005 f82c 	bl	80057d8 <dbg_print>
			log_print("Network Discovering\n");
 8000780:	4829      	ldr	r0, [pc, #164]	; (8000828 <mtZdoStateChangeIndCb+0x108>)
 8000782:	f7ff ff5f 	bl	8000644 <log_print>
			break;
 8000786:	e044      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_JOINING:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joining a PAN\n");
 8000788:	4928      	ldr	r1, [pc, #160]	; (800082c <mtZdoStateChangeIndCb+0x10c>)
 800078a:	2002      	movs	r0, #2
 800078c:	f005 f824 	bl	80057d8 <dbg_print>
			log_print("Network Joining\n");
 8000790:	4827      	ldr	r0, [pc, #156]	; (8000830 <mtZdoStateChangeIndCb+0x110>)
 8000792:	f7ff ff57 	bl	8000644 <log_print>
			break;
 8000796:	e03c      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_REJOIN:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: ReJoining a PAN, only for end devices\n");
 8000798:	4926      	ldr	r1, [pc, #152]	; (8000834 <mtZdoStateChangeIndCb+0x114>)
 800079a:	2002      	movs	r0, #2
 800079c:	f005 f81c 	bl	80057d8 <dbg_print>
			log_print("Network Rejoining\n");
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <mtZdoStateChangeIndCb+0x118>)
 80007a2:	f7ff ff4f 	bl	8000644 <log_print>
			break;
 80007a6:	e034      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE_UNAUTH:
			log_print("Network Authenticating\n");
 80007a8:	4824      	ldr	r0, [pc, #144]	; (800083c <mtZdoStateChangeIndCb+0x11c>)
 80007aa:	f7ff ff4b 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joined but not yet authenticated by trust center\n");
 80007ae:	4924      	ldr	r1, [pc, #144]	; (8000840 <mtZdoStateChangeIndCb+0x120>)
 80007b0:	2002      	movs	r0, #2
 80007b2:	f005 f811 	bl	80057d8 <dbg_print>
			break;
 80007b6:	e02c      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE:
			log_print("Network Joined\n");
 80007b8:	4822      	ldr	r0, [pc, #136]	; (8000844 <mtZdoStateChangeIndCb+0x124>)
 80007ba:	f7ff ff43 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as device after authentication\n");
 80007be:	4922      	ldr	r1, [pc, #136]	; (8000848 <mtZdoStateChangeIndCb+0x128>)
 80007c0:	2002      	movs	r0, #2
 80007c2:	f005 f809 	bl	80057d8 <dbg_print>
			break;
 80007c6:	e024      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ROUTER:
			log_print("Network Joined\n");
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <mtZdoStateChangeIndCb+0x124>)
 80007ca:	f7ff ff3b 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device joined, authenticated and is a router\n");
 80007ce:	491f      	ldr	r1, [pc, #124]	; (800084c <mtZdoStateChangeIndCb+0x12c>)
 80007d0:	2002      	movs	r0, #2
 80007d2:	f005 f801 	bl	80057d8 <dbg_print>
			break;
 80007d6:	e01c      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_COORD_STARTING:
			log_print("Network Starting\n");
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <mtZdoStateChangeIndCb+0x130>)
 80007da:	f7ff ff33 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 80007de:	491d      	ldr	r1, [pc, #116]	; (8000854 <mtZdoStateChangeIndCb+0x134>)
 80007e0:	2002      	movs	r0, #2
 80007e2:	f004 fff9 	bl	80057d8 <dbg_print>
			break;
 80007e6:	e014      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ZB_COORD:
			log_print("Network Started\n");
 80007e8:	481b      	ldr	r0, [pc, #108]	; (8000858 <mtZdoStateChangeIndCb+0x138>)
 80007ea:	f7ff ff2b 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 80007ee:	4919      	ldr	r1, [pc, #100]	; (8000854 <mtZdoStateChangeIndCb+0x134>)
 80007f0:	2002      	movs	r0, #2
 80007f2:	f004 fff1 	bl	80057d8 <dbg_print>
			break;
 80007f6:	e00c      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_ORPHAN:
			log_print("Network Orphaned\n");
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <mtZdoStateChangeIndCb+0x13c>)
 80007fa:	f7ff ff23 	bl	8000644 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device has lost information about its parent\n");
 80007fe:	4918      	ldr	r1, [pc, #96]	; (8000860 <mtZdoStateChangeIndCb+0x140>)
 8000800:	2002      	movs	r0, #2
 8000802:	f004 ffe9 	bl	80057d8 <dbg_print>
			break;
 8000806:	e004      	b.n	8000812 <mtZdoStateChangeIndCb+0xf2>
		default:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: unknown state");
 8000808:	4916      	ldr	r1, [pc, #88]	; (8000864 <mtZdoStateChangeIndCb+0x144>)
 800080a:	2002      	movs	r0, #2
 800080c:	f004 ffe4 	bl	80057d8 <dbg_print>
			break;
 8000810:	bf00      	nop
	}

	//devState = (devStates_t) newDevState;

	return SUCCESS;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	0800cbb0 	.word	0x0800cbb0
 8000820:	0800cbf0 	.word	0x0800cbf0
 8000824:	0800cc30 	.word	0x0800cc30
 8000828:	0800cc64 	.word	0x0800cc64
 800082c:	0800cc7c 	.word	0x0800cc7c
 8000830:	0800cca4 	.word	0x0800cca4
 8000834:	0800ccb8 	.word	0x0800ccb8
 8000838:	0800ccf8 	.word	0x0800ccf8
 800083c:	0800cd0c 	.word	0x0800cd0c
 8000840:	0800cd24 	.word	0x0800cd24
 8000844:	0800cd70 	.word	0x0800cd70
 8000848:	0800cd80 	.word	0x0800cd80
 800084c:	0800cdc0 	.word	0x0800cdc0
 8000850:	0800ce08 	.word	0x0800ce08
 8000854:	0800ce1c 	.word	0x0800ce1c
 8000858:	0800ce54 	.word	0x0800ce54
 800085c:	0800ce68 	.word	0x0800ce68
 8000860:	0800ce7c 	.word	0x0800ce7c
 8000864:	0800cec4 	.word	0x0800cec4

08000868 <mtZdoSimpleDescRspCb>:

static uint8_t mtZdoSimpleDescRspCb(SimpleDescRspFormat_t *msg) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d156      	bne.n	8000926 <mtZdoSimpleDescRspCb+0xbe>
		log_print("\tEndpoint: 0x%02X\n", msg->Endpoint);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	79db      	ldrb	r3, [r3, #7]
 800087c:	4619      	mov	r1, r3
 800087e:	4830      	ldr	r0, [pc, #192]	; (8000940 <mtZdoSimpleDescRspCb+0xd8>)
 8000880:	f7ff fee0 	bl	8000644 <log_print>
		log_print("\tProfileID: 0x%04X\n", msg->ProfileID);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	891b      	ldrh	r3, [r3, #8]
 8000888:	4619      	mov	r1, r3
 800088a:	482e      	ldr	r0, [pc, #184]	; (8000944 <mtZdoSimpleDescRspCb+0xdc>)
 800088c:	f7ff feda 	bl	8000644 <log_print>
		log_print("\tDeviceID: 0x%04X\n", msg->DeviceID);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	895b      	ldrh	r3, [r3, #10]
 8000894:	4619      	mov	r1, r3
 8000896:	482c      	ldr	r0, [pc, #176]	; (8000948 <mtZdoSimpleDescRspCb+0xe0>)
 8000898:	f7ff fed4 	bl	8000644 <log_print>
		log_print("\tDeviceVersion: 0x%02X\n", msg->DeviceVersion);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7b1b      	ldrb	r3, [r3, #12]
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <mtZdoSimpleDescRspCb+0xe4>)
 80008a4:	f7ff fece 	bl	8000644 <log_print>
		log_print("\tNumInClusters: %d\n", msg->NumInClusters);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b5b      	ldrb	r3, [r3, #13]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4828      	ldr	r0, [pc, #160]	; (8000950 <mtZdoSimpleDescRspCb+0xe8>)
 80008b0:	f7ff fec8 	bl	8000644 <log_print>
		uint32_t i;
		for (i = 0; i < msg->NumInClusters; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e00d      	b.n	80008d6 <mtZdoSimpleDescRspCb+0x6e>
			log_print("\t\tInClusterList[%d]: 0x%04X\n", i, msg->InClusterList[i]);
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3304      	adds	r3, #4
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	88db      	ldrh	r3, [r3, #6]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	4822      	ldr	r0, [pc, #136]	; (8000954 <mtZdoSimpleDescRspCb+0xec>)
 80008cc:	f7ff feba 	bl	8000644 <log_print>
		for (i = 0; i < msg->NumInClusters; i++) {
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7b5b      	ldrb	r3, [r3, #13]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4293      	cmp	r3, r2
 80008e0:	d3eb      	bcc.n	80008ba <mtZdoSimpleDescRspCb+0x52>
		}
		log_print("\tNumOutClusters: %d\n", msg->NumOutClusters);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <mtZdoSimpleDescRspCb+0xf0>)
 80008ec:	f7ff feaa 	bl	8000644 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e00c      	b.n	8000910 <mtZdoSimpleDescRspCb+0xa8>
			log_print("\t\tOutClusterList[%d]: 0x%04X\n", i, msg->OutClusterList[i]);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	3218      	adds	r2, #24
 80008fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000900:	461a      	mov	r2, r3
 8000902:	68f9      	ldr	r1, [r7, #12]
 8000904:	4815      	ldr	r0, [pc, #84]	; (800095c <mtZdoSimpleDescRspCb+0xf4>)
 8000906:	f7ff fe9d 	bl	8000644 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3301      	adds	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4293      	cmp	r3, r2
 800091c:	d3eb      	bcc.n	80008f6 <mtZdoSimpleDescRspCb+0x8e>
		}
		log_print("\n");
 800091e:	4810      	ldr	r0, [pc, #64]	; (8000960 <mtZdoSimpleDescRspCb+0xf8>)
 8000920:	f7ff fe90 	bl	8000644 <log_print>
 8000924:	e005      	b.n	8000932 <mtZdoSimpleDescRspCb+0xca>
	}
	else {
		log_print("SimpleDescRsp Status: FAIL 0x%02X\n", msg->Status);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	4619      	mov	r1, r3
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <mtZdoSimpleDescRspCb+0xfc>)
 800092e:	f7ff fe89 	bl	8000644 <log_print>
	}

	return msg->Status;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	789b      	ldrb	r3, [r3, #2]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800ceec 	.word	0x0800ceec
 8000944:	0800cf00 	.word	0x0800cf00
 8000948:	0800cf14 	.word	0x0800cf14
 800094c:	0800cf28 	.word	0x0800cf28
 8000950:	0800cf40 	.word	0x0800cf40
 8000954:	0800cf54 	.word	0x0800cf54
 8000958:	0800cf74 	.word	0x0800cf74
 800095c:	0800cf8c 	.word	0x0800cf8c
 8000960:	0800cfac 	.word	0x0800cfac
 8000964:	0800cfb0 	.word	0x0800cfb0

08000968 <mtZdoMgmtLqiRspCb>:

static uint8_t mtZdoMgmtLqiRspCb(MgmtLqiRspFormat_t *msg) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	else {
		log_print("MgmtLqiRsp Status: FAIL 0x%02X\n", msg->Status);
	}

	return msg->Status;*/
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <mtZdoActiveEpRspCb>:

static uint8_t mtZdoActiveEpRspCb(ActiveEpRspFormat_t *msg) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	//SimpleDescReqFormat_t simReq;
	log_print("NwkAddr: 0x%04X\n", msg->NwkAddr);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	889b      	ldrh	r3, [r3, #4]
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <mtZdoActiveEpRspCb+0x74>)
 8000990:	f7ff fe58 	bl	8000644 <log_print>
	if (msg->Status == MT_RPC_SUCCESS) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d11e      	bne.n	80009da <mtZdoActiveEpRspCb+0x5a>
		log_print("Number of Endpoints: %d\nActive Endpoints: ", msg->ActiveEPCount);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	799b      	ldrb	r3, [r3, #6]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <mtZdoActiveEpRspCb+0x78>)
 80009a4:	f7ff fe4e 	bl	8000644 <log_print>
		uint32_t i;
		for (i = 0; i < msg->ActiveEPCount; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e00b      	b.n	80009c6 <mtZdoActiveEpRspCb+0x46>
			log_print("0x%02X\t", msg->ActiveEPList[i]);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	3307      	adds	r3, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <mtZdoActiveEpRspCb+0x7c>)
 80009bc:	f7ff fe42 	bl	8000644 <log_print>
		for (i = 0; i < msg->ActiveEPCount; i++) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	799b      	ldrb	r3, [r3, #6]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d3ed      	bcc.n	80009ae <mtZdoActiveEpRspCb+0x2e>

		}
		log_print("\n");
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <mtZdoActiveEpRspCb+0x80>)
 80009d4:	f7ff fe36 	bl	8000644 <log_print>
 80009d8:	e005      	b.n	80009e6 <mtZdoActiveEpRspCb+0x66>
	}
	else {
		log_print("ActiveEpRsp Status: FAIL 0x%02X\n", msg->Status);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	4619      	mov	r1, r3
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <mtZdoActiveEpRspCb+0x84>)
 80009e2:	f7ff fe2f 	bl	8000644 <log_print>
	}

	return msg->Status;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	789b      	ldrb	r3, [r3, #2]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	0800cfd4 	.word	0x0800cfd4
 80009f8:	0800cfe8 	.word	0x0800cfe8
 80009fc:	0800d014 	.word	0x0800d014
 8000a00:	0800cfac 	.word	0x0800cfac
 8000a04:	0800d01c 	.word	0x0800d01c

08000a08 <mtZdoEndDeviceAnnceIndCb>:

static uint8_t mtZdoEndDeviceAnnceIndCb(EndDeviceAnnceIndFormat_t *msg) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	ActiveEpReqFormat_t actReq;
	actReq.DstAddr = msg->NwkAddr;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	885b      	ldrh	r3, [r3, #2]
 8000a14:	81bb      	strh	r3, [r7, #12]
	actReq.NwkAddrOfInterest = msg->NwkAddr;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	885b      	ldrh	r3, [r3, #2]
 8000a1a:	81fb      	strh	r3, [r7, #14]

	log_print("\nNew device joined network.\n");
 8000a1c:	4806      	ldr	r0, [pc, #24]	; (8000a38 <mtZdoEndDeviceAnnceIndCb+0x30>)
 8000a1e:	f7ff fe11 	bl	8000644 <log_print>
	zdoActiveEpReq(&actReq);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 f814 	bl	8002a54 <zdoActiveEpReq>
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	0800d040 	.word	0x0800d040

08000a3c <mtAfDataConfirmCb>:

/********************************************************************
 * AF CALL BACK FUNCTIONS
 */

static uint8_t mtAfDataConfirmCb(DataConfirmFormat_t *msg) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d103      	bne.n	8000a54 <mtAfDataConfirmCb+0x18>
		log_print("Message transmited Succesfully!\n");
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <mtAfDataConfirmCb+0x2c>)
 8000a4e:	f7ff fdf9 	bl	8000644 <log_print>
 8000a52:	e002      	b.n	8000a5a <mtAfDataConfirmCb+0x1e>
	}
	else {
		log_print("Message failed to transmit\n");
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <mtAfDataConfirmCb+0x30>)
 8000a56:	f7ff fdf5 	bl	8000644 <log_print>
	}
	return msg->Status;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	0800d060 	.word	0x0800d060
 8000a6c:	0800d084 	.word	0x0800d084

08000a70 <mtAfIncomingMsgCb>:

static uint8_t mtAfIncomingMsgCb(IncomingMsgFormat_t *msg) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	log_print("\nIncoming Message from Endpoint 0x%02X and Address 0x%04X:\n", msg->SrcEndpoint, msg->SrcAddr);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	799b      	ldrb	r3, [r3, #6]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <mtAfIncomingMsgCb+0x44>)
 8000a86:	f7ff fddd 	bl	8000644 <log_print>
	msg->Data[msg->Len] = '\0';
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7c5b      	ldrb	r3, [r3, #17]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	749a      	strb	r2, [r3, #18]
	log_print("%s\n", (char*) msg->Data);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3312      	adds	r3, #18
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <mtAfIncomingMsgCb+0x48>)
 8000aa0:	f7ff fdd0 	bl	8000644 <log_print>
	log_print("\nEnter message to send or type CHANGE to change the destination \nor QUIT to exit:\n");
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <mtAfIncomingMsgCb+0x4c>)
 8000aa6:	f7ff fdcd 	bl	8000644 <log_print>

	return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800d0a0 	.word	0x0800d0a0
 8000ab8:	0800d0dc 	.word	0x0800d0dc
 8000abc:	0800d0e0 	.word	0x0800d0e0

08000ac0 <vAppTask>:
	//
	return 0;
}

/////////////////////////////////////////////////
void vAppTask(void *pvParameters) {
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac2:	b0a3      	sub	sp, #140	; 0x8c
 8000ac4:	af1e      	add	r7, sp, #120	; 0x78
 8000ac6:	6078      	str	r0, [r7, #4]
	log_print("System started\r\n");
 8000ac8:	4821      	ldr	r0, [pc, #132]	; (8000b50 <vAppTask+0x90>)
 8000aca:	f7ff fdbb 	bl	8000644 <log_print>

	//Register Callbacks MT system callbacks
	sysRegisterCallbacks(mtSysCb);
 8000ace:	4e21      	ldr	r6, [pc, #132]	; (8000b54 <vAppTask+0x94>)
 8000ad0:	466d      	mov	r5, sp
 8000ad2:	f106 0410 	add.w	r4, r6, #16
 8000ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ae2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ae6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000aea:	f001 fe53 	bl	8002794 <sysRegisterCallbacks>
	zdoRegisterCallbacks(mtZdoCb);
 8000aee:	4c1a      	ldr	r4, [pc, #104]	; (8000b58 <vAppTask+0x98>)
 8000af0:	4668      	mov	r0, sp
 8000af2:	f104 0310 	add.w	r3, r4, #16
 8000af6:	2274      	movs	r2, #116	; 0x74
 8000af8:	4619      	mov	r1, r3
 8000afa:	f00a fc31 	bl	800b360 <memcpy>
 8000afe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b02:	f004 fe0b 	bl	800571c <zdoRegisterCallbacks>
	afRegisterCallbacks(mtAfCb);
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <vAppTask+0x9c>)
 8000b08:	691a      	ldr	r2, [r3, #16]
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0e:	f000 fedb 	bl	80018c8 <afRegisterCallbacks>
		 else
		 log_print("Ping failed\r\n");*/

		uint8_t status;

		uint8_t payload[5] = {0};
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	711a      	strb	r2, [r3, #4]
		status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x08, payload, 5);
 8000b1c:	f107 0208 	add.w	r2, r7, #8
 8000b20:	2305      	movs	r3, #5
 8000b22:	2108      	movs	r1, #8
 8000b24:	202f      	movs	r0, #47	; 0x2f
 8000b26:	f005 f90d 	bl	8005d44 <rpcSendFrame>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]

		if (status == MT_RPC_SUCCESS) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <vAppTask+0x7a>
			rpcWaitMqClientMsg(50);
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f004 ff79 	bl	8005a2c <rpcWaitMqClientMsg>
		}

		log_print("State %d\r\n", status);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <vAppTask+0xa0>)
 8000b40:	f7ff fd80 	bl	8000644 <log_print>

		vTaskDelay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b48:	f009 f95e 	bl	8009e08 <vTaskDelay>
	while (1) {
 8000b4c:	e7e1      	b.n	8000b12 <vAppTask+0x52>
 8000b4e:	bf00      	nop
 8000b50:	0800d134 	.word	0x0800d134
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000038 	.word	0x20000038
 8000b5c:	200000bc 	.word	0x200000bc
 8000b60:	0800d148 	.word	0x0800d148

08000b64 <vComTask>:
	}
}

void vComTask(void *pvParameters) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	rpcInitMq();
 8000b6c:	f004 ff54 	bl	8005a18 <rpcInitMq>
	rpcOpen("nee", 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <vComTask+0x20>)
 8000b74:	f004 ff24 	bl	80059c0 <rpcOpen>
	while (1) {
		rpcProcess();
 8000b78:	f004 ffb0 	bl	8005adc <rpcProcess>
		vTaskDelay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f009 f943 	bl	8009e08 <vTaskDelay>
		rpcProcess();
 8000b82:	e7f9      	b.n	8000b78 <vComTask+0x14>
 8000b84:	0800d154 	.word	0x0800d154

08000b88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b8e:	f005 fac1 	bl	8006114 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b92:	f000 f83b 	bl	8000c0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b96:	f7ff fd25 	bl	80005e4 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000b9a:	f000 fa41 	bl	8001020 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8000b9e:	f000 fa73 	bl	8001088 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	dbg_sem = xSemaphoreCreateBinary();
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f008 fa2a 	bl	8009000 <xQueueGenericCreate>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <main+0x70>)
 8000bb0:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(dbg_sem);
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <main+0x70>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f008 fa7e 	bl	80090bc <xQueueGenericSend>

	xTaskCreate(vAppTask, "APP", 256, NULL, tskIDLE_PRIORITY, NULL);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bce:	490b      	ldr	r1, [pc, #44]	; (8000bfc <main+0x74>)
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <main+0x78>)
 8000bd2:	f008 ffe4 	bl	8009b9e <xTaskCreate>
	xTaskCreate(vComTask, "COM", 256, NULL, tskIDLE_PRIORITY, NULL);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <main+0x7c>)
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <main+0x80>)
 8000be8:	f008 ffd9 	bl	8009b9e <xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000bec:	f7ff fcf2 	bl	80005d4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000bf0:	f008 f8e2 	bl	8008db8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x6c>
 8000bf6:	bf00      	nop
 8000bf8:	200003b4 	.word	0x200003b4
 8000bfc:	0800d158 	.word	0x0800d158
 8000c00:	08000ac1 	.word	0x08000ac1
 8000c04:	0800d15c 	.word	0x0800d15c
 8000c08:	08000b65 	.word	0x08000b65

08000c0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ba      	sub	sp, #232	; 0xe8
 8000c10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c16:	2244      	movs	r2, #68	; 0x44
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f00a fbab 	bl	800b376 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	228c      	movs	r2, #140	; 0x8c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a fb9d 	bl	800b376 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000c62:	2314      	movs	r3, #20
 8000c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000c74:	2304      	movs	r3, #4
 8000c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 fd66 	bl	8006750 <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x82>
		Error_Handler();
 8000c8a:	f000 f849 	bl	8000d20 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c8e:	230f      	movs	r3, #15
 8000c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000cac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f006 f972 	bl	8006f9c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xb6>
		Error_Handler();
 8000cbe:	f000 f82f 	bl	8000d20 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1;
 8000cc2:	2322      	movs	r3, #34	; 0x22
 8000cc4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fb99 	bl	8007408 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xd4>
		Error_Handler();
 8000cdc:	f000 f820 	bl	8000d20 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000ce0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce4:	f005 fcce 	bl	8006684 <HAL_PWREx_ControlVoltageScaling>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xe6>
		Error_Handler();
 8000cee:	f000 f817 	bl	8000d20 <Error_Handler>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	37e8      	adds	r7, #232	; 0xe8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d0e:	f005 fa19 	bl	8006144 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40012c00 	.word	0x40012c00

08000d20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	; 0x60
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f06f 0001 	mvn.w	r0, #1
 8000d6e:	f005 fabf 	bl	80062f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	2019      	movs	r0, #25
 8000d96:	f005 faab 	bl	80062f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000d9a:	2019      	movs	r0, #25
 8000d9c:	f005 fac4 	bl	8006328 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <HAL_InitTick+0x9c>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <HAL_InitTick+0x9c>)
 8000da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000daa:	6613      	str	r3, [r2, #96]	; 0x60
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_InitTick+0x9c>)
 8000dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db8:	f107 0210 	add.w	r2, r7, #16
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fa8e 	bl	80072e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc8:	f006 fa76 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 8000dcc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_InitTick+0xa0>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	0c9b      	lsrs	r3, r3, #18
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_InitTick+0xa4>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_InitTick+0xa8>)
 8000de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_InitTick+0xa4>)
 8000de4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_InitTick+0xa4>)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_InitTick+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_InitTick+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_InitTick+0xa4>)
 8000dfe:	f006 ffc5 	bl	8007d8c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d104      	bne.n	8000e12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <HAL_InitTick+0xa4>)
 8000e0a:	f006 fff5 	bl	8007df8 <HAL_TIM_Base_Start_IT>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	20002f2c 	.word	0x20002f2c
 8000e28:	40012c00 	.word	0x40012c00

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e66:	f006 fff1 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20002f2c 	.word	0x20002f2c

08000e74 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
#endif
  rpcTransportISR();
 8000e78:	f004 fcf0 	bl	800585c <rpcTransportISR>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
	}

return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e009      	b.n	8000ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf1      	blt.n	8000ecc <_write+0x12>
	}
	return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:

int _close(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_isatty>:

int _isatty(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x50>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x16>
		heap_end = &end;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <_sbrk+0x50>)
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <_sbrk+0x54>)
 8000f70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <_sbrk+0x50>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <_sbrk+0x50>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	466a      	mov	r2, sp
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d907      	bls.n	8000f96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f86:	f00a f9b1 	bl	800b2ec <__errno>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e006      	b.n	8000fa4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <_sbrk+0x50>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a03      	ldr	r2, [pc, #12]	; (8000fac <_sbrk+0x50>)
 8000fa0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200004b8 	.word	0x200004b8
 8000fb0:	20003178 	.word	0x20003178

08000fb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <SystemInit+0x64>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <SystemInit+0x64>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <SystemInit+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <SystemInit+0x68>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <SystemInit+0x68>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <SystemInit+0x68>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <SystemInit+0x68>)
 8000fe0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fe4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fe8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <SystemInit+0x68>)
 8000fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <SystemInit+0x68>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <SystemInit+0x68>)
 8000ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <SystemInit+0x68>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0x64>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	40021000 	.word	0x40021000

08001020 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <MX_LPUART1_UART_Init+0x64>)
 8001028:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001058:	2230      	movs	r2, #48	; 0x30
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 800105e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 8001066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_LPUART1_UART_Init+0x60>)
 800106e:	f007 f8ed 	bl	800824c <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001078:	f7ff fe52 	bl	8000d20 <Error_Handler>
  }

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20002f6c 	.word	0x20002f6c
 8001084:	40008000 	.word	0x40008000

08001088 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <MX_USART2_UART_Init+0x6c>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART2_UART_Init+0x68>)
 80010dc:	f007 f8b6 	bl	800824c <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80010e6:	f7ff fe1b 	bl	8000d20 <Error_Handler>
  }

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20002fec 	.word	0x20002fec
 80010f4:	40004400 	.word	0x40004400

080010f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a42      	ldr	r2, [pc, #264]	; (8001220 <HAL_UART_MspInit+0x128>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d133      	bne.n	8001182 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_UART_MspInit+0x12c>)
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	4a41      	ldr	r2, [pc, #260]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800114a:	f005 faf1 	bl	8006730 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800114e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001160:	2308      	movs	r3, #8
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	482f      	ldr	r0, [pc, #188]	; (8001228 <HAL_UART_MspInit+0x130>)
 800116c:	f005 f8ea 	bl	8006344 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2105      	movs	r1, #5
 8001174:	2046      	movs	r0, #70	; 0x46
 8001176:	f005 f8bb 	bl	80062f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800117a:	2046      	movs	r0, #70	; 0x46
 800117c:	f005 f8d4 	bl	8006328 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001180:	e049      	b.n	8001216 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <HAL_UART_MspInit+0x134>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d144      	bne.n	8001216 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_UART_MspInit+0x12c>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a24      	ldr	r2, [pc, #144]	; (8001224 <HAL_UART_MspInit+0x12c>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_UART_MspInit+0x12c>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_UART_MspInit+0x12c>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e4:	2307      	movs	r3, #7
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <HAL_UART_MspInit+0x138>)
 80011f0:	f005 f8a8 	bl	8006344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f4:	2304      	movs	r3, #4
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001204:	2307      	movs	r3, #7
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f005 f897 	bl	8006344 <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40008000 	.word	0x40008000
 8001224:	40021000 	.word	0x40021000
 8001228:	48001800 	.word	0x48001800
 800122c:	40004400 	.word	0x40004400
 8001230:	48000c00 	.word	0x48000c00

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001238:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800123a:	e003      	b.n	8001244 <LoopCopyDataInit>

0800123c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800123e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001240:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001242:	3104      	adds	r1, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001248:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800124a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800124c:	d3f6      	bcc.n	800123c <CopyDataInit>
	ldr	r2, =_sbss
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001250:	e002      	b.n	8001258 <LoopFillZerobss>

08001252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001252:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001254:	f842 3b04 	str.w	r3, [r2], #4

08001258 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <LoopForever+0x16>)
	cmp	r2, r3
 800125a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800125c:	d3f9      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125e:	f7ff fea9 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f00a f849 	bl	800b2f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff fc8f 	bl	8000b88 <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001270:	0800e7e8 	.word	0x0800e7e8
	ldr	r0, =_sdata
 8001274:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001278:	20000144 	.word	0x20000144
	ldr	r2, =_sbss
 800127c:	20000144 	.word	0x20000144
	ldr	r3, = _ebss
 8001280:	20003178 	.word	0x20003178

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <processDataConfirm>:
		return 1;
	}
}

static void processDataConfirm(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataConfirm)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <processDataConfirm+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d025      	beq.n	80012e8 <processDataConfirm+0x60>
	{
		uint8_t msgIdx = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	73fb      	strb	r3, [r7, #15]
		DataConfirmFormat_t rsp;
		if (rpcLen < 3)
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d802      	bhi.n	80012ac <processDataConfirm+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <processDataConfirm+0x6c>)
 80012a8:	f00a f9b8 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	73fa      	strb	r2, [r7, #15]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	733b      	strb	r3, [r7, #12]
		rsp.Endpoint = rpcBuff[msgIdx++];
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	73fa      	strb	r2, [r7, #15]
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	737b      	strb	r3, [r7, #13]
		rsp.TransId = rpcBuff[msgIdx++];
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	73fa      	strb	r2, [r7, #15]
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	73bb      	strb	r3, [r7, #14]

		mtAfCbs.pfnAfDataConfirm(&rsp);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <processDataConfirm+0x68>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	4610      	mov	r0, r2
 80012e6:	4798      	blx	r3
	}
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200004bc 	.word	0x200004bc
 80012f4:	0800d184 	.word	0x0800d184

080012f8 <processIncomingMsg>:

static void processIncomingMsg(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a2      	sub	sp, #136	; 0x88
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsg)
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <processIncomingMsg+0x1d8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80dc 	beq.w	80014c6 <processIncomingMsg+0x1ce>
	{
		uint8_t msgIdx = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		IncomingMsgFormat_t rsp;
		if (rpcLen < 17)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d802      	bhi.n	8001320 <processIncomingMsg+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800131a:	486e      	ldr	r0, [pc, #440]	; (80014d4 <processIncomingMsg+0x1dc>)
 800131c:	f00a f97e 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001320:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001330:	3301      	adds	r3, #1
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	440b      	add	r3, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b29b      	uxth	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001344:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001348:	3302      	adds	r3, #2
 800134a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800134e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800135e:	3301      	adds	r3, #1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	440b      	add	r3, r1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b29b      	uxth	r3, r3
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001372:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001376:	3302      	adds	r3, #2
 8001378:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800137c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b29a      	uxth	r2, r3
 8001388:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800138c:	3301      	adds	r3, #1
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	440b      	add	r3, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80013a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013a4:	3302      	adds	r3, #2
 80013a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 80013aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	73bb      	strb	r3, [r7, #14]
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 80013be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	73fb      	strb	r3, [r7, #15]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 80013d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	743b      	strb	r3, [r7, #16]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 80013e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	747b      	strb	r3, [r7, #17]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 80013fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	74bb      	strb	r3, [r7, #18]
		rsp.TimeStamp = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001418:	e015      	b.n	8001446 <processIncomingMsg+0x14e>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 800141a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	409a      	lsls	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 4; i++)
 800143c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001440:	3301      	adds	r3, #1
 8001442:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001446:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9e5      	bls.n	800141a <processIncomingMsg+0x122>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 800144e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	763b      	strb	r3, [r7, #24]
		rsp.Len = rpcBuff[msgIdx++];
 8001462:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	767b      	strb	r3, [r7, #25]
		if (rpcLen > 17)
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2b11      	cmp	r3, #17
 800147a:	d91e      	bls.n	80014ba <processIncomingMsg+0x1c2>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001482:	e014      	b.n	80014ae <processIncomingMsg+0x1b6>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 8001484:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	f107 021a 	add.w	r2, r7, #26
 800149a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 80014a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014ae:	7e7b      	ldrb	r3, [r7, #25]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d3e4      	bcc.n	8001484 <processIncomingMsg+0x18c>
			}
		}
		mtAfCbs.pfnAfIncomingMsg(&rsp);
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <processIncomingMsg+0x1d8>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	4610      	mov	r0, r2
 80014c4:	4798      	blx	r3
	}
}
 80014c6:	bf00      	nop
 80014c8:	3788      	adds	r7, #136	; 0x88
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004bc 	.word	0x200004bc
 80014d4:	0800d184 	.word	0x0800d184

080014d8 <processIncomingMsgExt>:

static void processIncomingMsgExt(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80014d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014dc:	b0a7      	sub	sp, #156	; 0x9c
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsgExt)
 80014e6:	4b99      	ldr	r3, [pc, #612]	; (800174c <processIncomingMsgExt+0x274>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8129 	beq.w	8001742 <processIncomingMsgExt+0x26a>
	{
		uint8_t msgIdx = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		IncomingMsgExtFormat_t rsp;
		if (rpcLen < 27)
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b1a      	cmp	r3, #26
 80014fa:	d802      	bhi.n	8001502 <processIncomingMsgExt+0x2a>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80014fc:	4894      	ldr	r0, [pc, #592]	; (8001750 <processIncomingMsgExt+0x278>)
 80014fe:	f00a f88d 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001502:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b29a      	uxth	r2, r3
 800150e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001512:	3301      	adds	r3, #1
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	440b      	add	r3, r1
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001526:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800152a:	3302      	adds	r3, #2
 800152c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001530:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001540:	3301      	adds	r3, #1
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001554:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001558:	3302      	adds	r3, #2
 800155a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.SrcAddrMode = rpcBuff[msgIdx++];
 800155e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	733b      	strb	r3, [r7, #12]
		rsp.SrcAddr = 0;
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001584:	e034      	b.n	80015f0 <processIncomingMsgExt+0x118>
		{
			if ((rsp.SrcAddrMode == 2 && i < 2) || rsp.SrcAddrMode == 3)
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d103      	bne.n	8001594 <processIncomingMsgExt+0xbc>
 800158c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001590:	2b01      	cmp	r3, #1
 8001592:	d902      	bls.n	800159a <processIncomingMsgExt+0xc2>
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d120      	bne.n	80015dc <processIncomingMsgExt+0x104>
			{
				rsp.SrcAddr |= ((uint64_t) rpcBuff[msgIdx]) << (i * 8);
 800159a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800159e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 80015b2:	00c9      	lsls	r1, r1, #3
 80015b4:	f1a1 0620 	sub.w	r6, r1, #32
 80015b8:	f1c1 0020 	rsb	r0, r1, #32
 80015bc:	fa03 f501 	lsl.w	r5, r3, r1
 80015c0:	fa02 f606 	lsl.w	r6, r2, r6
 80015c4:	4335      	orrs	r5, r6
 80015c6:	fa22 f000 	lsr.w	r0, r2, r0
 80015ca:	4305      	orrs	r5, r0
 80015cc:	fa02 f401 	lsl.w	r4, r2, r1
 80015d0:	ea48 0204 	orr.w	r2, r8, r4
 80015d4:	ea49 0305 	orr.w	r3, r9, r5
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
			}
			msgIdx++;
 80015dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80015e0:	3301      	adds	r3, #1
 80015e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		for (i = 0; i < 8; i++)
 80015e6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015ea:	3301      	adds	r3, #1
 80015ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80015f0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015f4:	2b07      	cmp	r3, #7
 80015f6:	d9c6      	bls.n	8001586 <processIncomingMsgExt+0xae>
		}

		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 80015f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	763b      	strb	r3, [r7, #24]
		rsp.SrcPanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800160c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b29a      	uxth	r2, r3
 8001618:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800161c:	3301      	adds	r3, #1
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 8001630:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001634:	3302      	adds	r3, #2
 8001636:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 800163a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	773b      	strb	r3, [r7, #28]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 800164e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	777b      	strb	r3, [r7, #29]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 8001662:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	77bb      	strb	r3, [r7, #30]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8001676:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	77fb      	strb	r3, [r7, #31]
		rsp.TimeStamp = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001694:	e015      	b.n	80016c2 <processIncomingMsgExt+0x1ea>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8001696:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80016a0:	461a      	mov	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	409a      	lsls	r2, r3
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 80016b8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80016bc:	3301      	adds	r3, #1
 80016be:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80016c2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d9e5      	bls.n	8001696 <processIncomingMsgExt+0x1be>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 80016ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rsp.Len = rpcBuff[msgIdx++];
 80016e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t ind;
		for (ind = 0; ind < rsp.Len; ind++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016fc:	e014      	b.n	8001728 <processIncomingMsgExt+0x250>
		{
			rsp.Data[ind] = rpcBuff[msgIdx++];
 80016fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	7819      	ldrb	r1, [r3, #0]
 8001710:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001718:	4413      	add	r3, r2
 800171a:	460a      	mov	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
		for (ind = 0; ind < rsp.Len; ind++)
 800171e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001722:	3301      	adds	r3, #1
 8001724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001728:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800172c:	461a      	mov	r2, r3
 800172e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001732:	4293      	cmp	r3, r2
 8001734:	d3e3      	bcc.n	80016fe <processIncomingMsgExt+0x226>
		}

		mtAfCbs.pfnAfIncomingMsgExt(&rsp);
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <processIncomingMsgExt+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f107 0208 	add.w	r2, r7, #8
 800173e:	4610      	mov	r0, r2
 8001740:	4798      	blx	r3
	}
}
 8001742:	bf00      	nop
 8001744:	379c      	adds	r7, #156	; 0x9c
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800174c:	200004bc 	.word	0x200004bc
 8001750:	0800d184 	.word	0x0800d184

08001754 <processDataRetrieveSrsp>:
		return 1;
	}
}

static void processDataRetrieveSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0c4      	sub	sp, #272	; 0x110
 8001758:	af00      	add	r7, sp, #0
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	6018      	str	r0, [r3, #0]
 800175e:	460a      	mov	r2, r1
 8001760:	1cfb      	adds	r3, r7, #3
 8001762:	701a      	strb	r2, [r3, #0]
	if (mtAfCbs.pfnAfDataRetrieveSrsp)
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <processDataRetrieveSrsp+0xc4>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d050      	beq.n	800180e <processDataRetrieveSrsp+0xba>
	{
		uint8_t msgIdx = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		DataRetrieveSrspFormat_t rsp;
		if (rpcLen < 2)
 8001772:	1cfb      	adds	r3, r7, #3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d802      	bhi.n	8001780 <processDataRetrieveSrsp+0x2c>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <processDataRetrieveSrsp+0xc8>)
 800177c:	f009 ff4e 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001780:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800178a:	461a      	mov	r2, r3
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4413      	add	r3, r2
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	701a      	strb	r2, [r3, #0]
		rsp.Length = rpcBuff[msgIdx++];
 800179a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80017a4:	461a      	mov	r2, r3
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2)
 80017b4:	1cfb      	adds	r3, r7, #3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d922      	bls.n	8001802 <processDataRetrieveSrsp+0xae>
		{
			uint32_t i;
			for (i = 0; i < rsp.Length; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017c2:	e016      	b.n	80017f2 <processDataRetrieveSrsp+0x9e>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 80017c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80017ce:	461a      	mov	r2, r3
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	7819      	ldrb	r1, [r3, #0]
 80017d8:	f107 020c 	add.w	r2, r7, #12
 80017dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017e0:	4413      	add	r3, r2
 80017e2:	3302      	adds	r3, #2
 80017e4:	460a      	mov	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Length; i++)
 80017e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017fe:	4293      	cmp	r3, r2
 8001800:	d3e0      	bcc.n	80017c4 <processDataRetrieveSrsp+0x70>
			}
		}
		mtAfCbs.pfnAfDataRetrieveSrsp(&rsp);
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <processDataRetrieveSrsp+0xc4>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f107 020c 	add.w	r2, r7, #12
 800180a:	4610      	mov	r0, r2
 800180c:	4798      	blx	r3
	}
}
 800180e:	bf00      	nop
 8001810:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200004bc 	.word	0x200004bc
 800181c:	0800d184 	.word	0x0800d184

08001820 <processReflectError>:
		return 1;
	}
}

static void processReflectError(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfReflectError)
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <processReflectError+0xa0>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d040      	beq.n	80018b6 <processReflectError+0x96>
	{
		uint8_t msgIdx = 2;
 8001834:	2302      	movs	r3, #2
 8001836:	73fb      	strb	r3, [r7, #15]
		ReflectErrorFormat_t rsp;
		if (rpcLen < 6)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d802      	bhi.n	8001844 <processReflectError+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800183e:	4821      	ldr	r0, [pc, #132]	; (80018c4 <processReflectError+0xa4>)
 8001840:	f009 feec 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	73fa      	strb	r2, [r7, #15]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	723b      	strb	r3, [r7, #8]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	73fa      	strb	r2, [r7, #15]
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	727b      	strb	r3, [r7, #9]
		rsp.TransId = rpcBuff[msgIdx++];
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	73fa      	strb	r2, [r7, #15]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	72bb      	strb	r3, [r7, #10]
		rsp.DstAddrMode = rpcBuff[msgIdx++];
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	73fa      	strb	r2, [r7, #15]
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	72fb      	strb	r3, [r7, #11]
		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	3301      	adds	r3, #1
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	440b      	add	r3, r1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3302      	adds	r3, #2
 80018a8:	73fb      	strb	r3, [r7, #15]

		mtAfCbs.pfnAfReflectError(&rsp);
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <processReflectError+0xa0>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	4610      	mov	r0, r2
 80018b4:	4798      	blx	r3
	}
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200004bc 	.word	0x200004bc
 80018c4:	0800d184 	.word	0x0800d184

080018c8 <afRegisterCallbacks>:
 * @param
 *
 * @return
 */
void afRegisterCallbacks(mtAfCb_t cbs)
{
 80018c8:	b084      	sub	sp, #16
 80018ca:	b4b0      	push	{r4, r5, r7}
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	f107 040c 	add.w	r4, r7, #12
 80018d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtAfCbs, &cbs, sizeof(mtAfCb_t));
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <afRegisterCallbacks+0x28>)
 80018d8:	461c      	mov	r4, r3
 80018da:	f107 050c 	add.w	r5, r7, #12
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	6023      	str	r3, [r4, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bcb0      	pop	{r4, r5, r7}
 80018ec:	b004      	add	sp, #16
 80018ee:	4770      	bx	lr
 80018f0:	200004bc 	.word	0x200004bc

080018f4 <afProcess>:
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *
 * @return
 *************************************************************************************************/
void afProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
 8001904:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
 800190c:	492c      	ldr	r1, [pc, #176]	; (80019c0 <afProcess+0xcc>)
 800190e:	2004      	movs	r0, #4
 8001910:	f003 ff62 	bl	80057d8 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800191c:	2b60      	cmp	r3, #96	; 0x60
 800191e:	d105      	bne.n	800192c <afProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f857 	bl	80019d8 <processSrsp>
			        "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 800192a:	e044      	b.n	80019b6 <afProcess+0xc2>
		switch (rpcBuff[1])
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3b80      	subs	r3, #128	; 0x80
 8001934:	2b03      	cmp	r3, #3
 8001936:	d833      	bhi.n	80019a0 <afProcess+0xac>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <afProcess+0x4c>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001951 	.word	0x08001951
 8001944:	08001965 	.word	0x08001965
 8001948:	08001979 	.word	0x08001979
 800194c:	0800198d 	.word	0x0800198d
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_CONFIRM\n");
 8001950:	491c      	ldr	r1, [pc, #112]	; (80019c4 <afProcess+0xd0>)
 8001952:	2004      	movs	r0, #4
 8001954:	f003 ff40 	bl	80057d8 <dbg_print>
			processDataConfirm(rpcBuff, rpcLen);
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fc93 	bl	8001288 <processDataConfirm>
			break;
 8001962:	e028      	b.n	80019b6 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_INCOMING_MSG\n");
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <afProcess+0xd4>)
 8001966:	2004      	movs	r0, #4
 8001968:	f003 ff36 	bl	80057d8 <dbg_print>
			processIncomingMsg(rpcBuff, rpcLen);
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fcc1 	bl	80012f8 <processIncomingMsg>
			break;
 8001976:	e01e      	b.n	80019b6 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8001978:	4914      	ldr	r1, [pc, #80]	; (80019cc <afProcess+0xd8>)
 800197a:	2004      	movs	r0, #4
 800197c:	f003 ff2c 	bl	80057d8 <dbg_print>
			processIncomingMsgExt(rpcBuff, rpcLen);
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fda7 	bl	80014d8 <processIncomingMsgExt>
			break;
 800198a:	e014      	b.n	80019b6 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_REFLECT_ERROR\n");
 800198c:	4910      	ldr	r1, [pc, #64]	; (80019d0 <afProcess+0xdc>)
 800198e:	2004      	movs	r0, #4
 8001990:	f003 ff22 	bl	80057d8 <dbg_print>
			processReflectError(rpcBuff, rpcLen);
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	4619      	mov	r1, r3
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff41 	bl	8001820 <processReflectError>
			break;
 800199e:	e00a      	b.n	80019b6 <afProcess+0xc2>
			        "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 80019a4:	461a      	mov	r2, r3
			        rpcBuff[1]);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 80019ac:	4909      	ldr	r1, [pc, #36]	; (80019d4 <afProcess+0xe0>)
 80019ae:	2001      	movs	r0, #1
 80019b0:	f003 ff12 	bl	80057d8 <dbg_print>
			break;
 80019b4:	bf00      	nop
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	0800d198 	.word	0x0800d198
 80019c4:	0800d1c0 	.word	0x0800d1c0
 80019c8:	0800d1e0 	.word	0x0800d1e0
 80019cc:	0800d200 	.word	0x0800d200
 80019d0:	0800d224 	.word	0x0800d224
 80019d4:	0800d244 	.word	0x0800d244

080019d8 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	461a      	mov	r2, r3
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <processSrsp+0x54>)
 80019ec:	f009 fcb8 	bl	800b360 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d109      	bne.n	8001a0e <processSrsp+0x36>
	{
	case MT_AF_DATA_RETRIEVE:
		dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_RETRIEVE\n");
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <processSrsp+0x58>)
 80019fc:	2004      	movs	r0, #4
 80019fe:	f003 feeb 	bl	80057d8 <dbg_print>
		processDataRetrieveSrsp(rpcBuff, rpcLen);
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fea4 	bl	8001754 <processDataRetrieveSrsp>
		break;
 8001a0c:	e00a      	b.n	8001a24 <processSrsp+0x4c>
	default:
		dbg_print(PRINT_LEVEL_INFO,
		        "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0],
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001a12:	461a      	mov	r2, r3
		        rpcBuff[1]);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001a1a:	4906      	ldr	r1, [pc, #24]	; (8001a34 <processSrsp+0x5c>)
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f003 fedb 	bl	80057d8 <dbg_print>
		break;
 8001a22:	bf00      	nop
	}

}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20003070 	.word	0x20003070
 8001a30:	0800d274 	.word	0x0800d274
 8001a34:	0800d294 	.word	0x0800d294

08001a38 <processReadConfigurationSrsp>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReadConfigurationSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0a6      	sub	sp, #152	; 0x98
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReadConfigurationSrsp)
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <processReadConfigurationSrsp+0xbc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04e      	beq.n	8001aea <processReadConfigurationSrsp+0xb2>
	{
		uint8_t msgIdx = 2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReadConfigurationSrspFormat_t rsp;
		if (rpcLen < 3)
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d802      	bhi.n	8001a5e <processReadConfigurationSrsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001a58:	4827      	ldr	r0, [pc, #156]	; (8001af8 <processReadConfigurationSrsp+0xc0>)
 8001a5a:	f009 fddf 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001a5e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	733b      	strb	r3, [r7, #12]
		rsp.ConfigId = rpcBuff[msgIdx++];
 8001a72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	737b      	strb	r3, [r7, #13]
		rsp.Len = rpcBuff[msgIdx++];
 8001a86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 3)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d91e      	bls.n	8001ade <processReadConfigurationSrsp+0xa6>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001aa6:	e014      	b.n	8001ad2 <processReadConfigurationSrsp+0x9a>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 8001aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	7819      	ldrb	r1, [r3, #0]
 8001aba:	f107 020f 	add.w	r2, r7, #15
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac2:	4413      	add	r3, r2
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8001ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d3e4      	bcc.n	8001aa8 <processReadConfigurationSrsp+0x70>
			}
		}
		mtSapiCbs.pfnSapiReadConfigurationSrsp(&rsp);
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <processReadConfigurationSrsp+0xbc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f107 020c 	add.w	r2, r7, #12
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4798      	blx	r3
	}
}
 8001aea:	bf00      	nop
 8001aec:	3798      	adds	r7, #152	; 0x98
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004d0 	.word	0x200004d0
 8001af8:	0800d2e4 	.word	0x0800d2e4

08001afc <processGetDeviceInfoSrsp>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processGetDeviceInfoSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiGetDeviceInfoSrsp)
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <processGetDeviceInfoSrsp+0x74>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02b      	beq.n	8001b68 <processGetDeviceInfoSrsp+0x6c>
	{
		uint8_t msgIdx = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	75fb      	strb	r3, [r7, #23]
		GetDeviceInfoSrspFormat_t rsp;
		if (rpcLen < 9)
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d802      	bhi.n	8001b20 <processGetDeviceInfoSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001b1a:	4816      	ldr	r0, [pc, #88]	; (8001b74 <processGetDeviceInfoSrsp+0x78>)
 8001b1c:	f009 fd7e 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Param = rpcBuff[msgIdx++];
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	75fa      	strb	r2, [r7, #23]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	733b      	strb	r3, [r7, #12]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	75bb      	strb	r3, [r7, #22]
 8001b34:	e00f      	b.n	8001b56 <processGetDeviceInfoSrsp+0x5a>
		{
			rsp.Value[i] = rpcBuff[msgIdx++];
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	75fa      	strb	r2, [r7, #23]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	441a      	add	r2, r3
 8001b42:	7dbb      	ldrb	r3, [r7, #22]
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	f107 0118 	add.w	r1, r7, #24
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f803 2c0b 	strb.w	r2, [r3, #-11]
		for (i = 0; i < 8; i++)
 8001b50:	7dbb      	ldrb	r3, [r7, #22]
 8001b52:	3301      	adds	r3, #1
 8001b54:	75bb      	strb	r3, [r7, #22]
 8001b56:	7dbb      	ldrb	r3, [r7, #22]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	d9ec      	bls.n	8001b36 <processGetDeviceInfoSrsp+0x3a>
		}

		mtSapiCbs.pfnSapiGetDeviceInfoSrsp(&rsp);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <processGetDeviceInfoSrsp+0x74>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	4610      	mov	r0, r2
 8001b66:	4798      	blx	r3
	}
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200004d0 	.word	0x200004d0
 8001b74:	0800d2e4 	.word	0x0800d2e4

08001b78 <processFindDeviceCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processFindDeviceCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiFindDeviceCnf)
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <processFindDeviceCnf+0xc0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d051      	beq.n	8001c30 <processFindDeviceCnf+0xb8>
	{
		uint8_t msgIdx = 2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	77fb      	strb	r3, [r7, #31]
		FindDeviceCnfFormat_t rsp;
		if (rpcLen < 11)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d802      	bhi.n	8001b9c <processFindDeviceCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <processFindDeviceCnf+0xc4>)
 8001b98:	f009 fd40 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SearchKey = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	440b      	add	r3, r1
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	77fb      	strb	r3, [r7, #31]
		rsp.Result = 0;
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	77bb      	strb	r3, [r7, #30]
 8001bd2:	e024      	b.n	8001c1e <processFindDeviceCnf+0xa6>
			rsp.Result |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	77fa      	strb	r2, [r7, #31]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	7fb9      	ldrb	r1, [r7, #30]
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	f1a1 0620 	sub.w	r6, r1, #32
 8001bf0:	f1c1 0020 	rsb	r0, r1, #32
 8001bf4:	fa03 f501 	lsl.w	r5, r3, r1
 8001bf8:	fa02 f606 	lsl.w	r6, r2, r6
 8001bfc:	4335      	orrs	r5, r6
 8001bfe:	fa22 f000 	lsr.w	r0, r2, r0
 8001c02:	4305      	orrs	r5, r0
 8001c04:	fa02 f401 	lsl.w	r4, r2, r1
 8001c08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c0c:	ea40 0204 	orr.w	r2, r0, r4
 8001c10:	ea41 0305 	orr.w	r3, r1, r5
 8001c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8001c18:	7fbb      	ldrb	r3, [r7, #30]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	77bb      	strb	r3, [r7, #30]
 8001c1e:	7fbb      	ldrb	r3, [r7, #30]
 8001c20:	2b07      	cmp	r3, #7
 8001c22:	d9d7      	bls.n	8001bd4 <processFindDeviceCnf+0x5c>

		mtSapiCbs.pfnSapiFindDeviceCnf(&rsp);
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <processFindDeviceCnf+0xc0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4798      	blx	r3
	}
}
 8001c30:	bf00      	nop
 8001c32:	3724      	adds	r7, #36	; 0x24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	200004d0 	.word	0x200004d0
 8001c3c:	0800d2e4 	.word	0x0800d2e4

08001c40 <processSendDataCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processSendDataCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiSendDataCnf)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <processSendDataCnf+0x58>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01d      	beq.n	8001c90 <processSendDataCnf+0x50>
	{
		uint8_t msgIdx = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	73fb      	strb	r3, [r7, #15]
		SendDataCnfFormat_t rsp;
		if (rpcLen < 2)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d802      	bhi.n	8001c64 <processSendDataCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <processSendDataCnf+0x5c>)
 8001c60:	f009 fcdc 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Handle = rpcBuff[msgIdx++];
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	73fa      	strb	r2, [r7, #15]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	733b      	strb	r3, [r7, #12]
		rsp.Status = rpcBuff[msgIdx++];
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	73fa      	strb	r2, [r7, #15]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	737b      	strb	r3, [r7, #13]

		mtSapiCbs.pfnSapiSendDataCnf(&rsp);
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <processSendDataCnf+0x58>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f107 020c 	add.w	r2, r7, #12
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4798      	blx	r3
	}
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200004d0 	.word	0x200004d0
 8001c9c:	0800d2e4 	.word	0x0800d2e4

08001ca0 <processReceiveDataInd>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReceiveDataInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09c      	sub	sp, #112	; 0x70
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReceiveDataInd)
 8001cac:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <processReceiveDataInd+0x100>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d070      	beq.n	8001d96 <processReceiveDataInd+0xf6>
	{
		uint8_t msgIdx = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ReceiveDataIndFormat_t rsp;
		if (rpcLen < 6)
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d802      	bhi.n	8001cc6 <processReceiveDataInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001cc0:	4838      	ldr	r0, [pc, #224]	; (8001da4 <processReceiveDataInd+0x104>)
 8001cc2:	f009 fcab 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001cc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	440b      	add	r3, r1
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8001cea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Command = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001cf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d04:	3301      	adds	r3, #1
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	440b      	add	r3, r1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	81fb      	strh	r3, [r7, #14]
		msgIdx += 2;
 8001d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Len = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d32:	3301      	adds	r3, #1
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	440b      	add	r3, r1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8001d46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (rpcLen > 6)
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d919      	bls.n	8001d8a <processReceiveDataInd+0xea>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d5a:	e011      	b.n	8001d80 <processReceiveDataInd+0xe0>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 8001d5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	7819      	ldrb	r1, [r3, #0]
 8001d6e:	f107 0212 	add.w	r2, r7, #18
 8001d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d74:	4413      	add	r3, r2
 8001d76:	460a      	mov	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8001d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d80:	8a3b      	ldrh	r3, [r7, #16]
 8001d82:	461a      	mov	r2, r3
 8001d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d3e8      	bcc.n	8001d5c <processReceiveDataInd+0xbc>
			}
		}
		mtSapiCbs.pfnSapiReceiveDataInd(&rsp);
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <processReceiveDataInd+0x100>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f107 020c 	add.w	r2, r7, #12
 8001d92:	4610      	mov	r0, r2
 8001d94:	4798      	blx	r3
	}
}
 8001d96:	bf00      	nop
 8001d98:	3770      	adds	r7, #112	; 0x70
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200004d0 	.word	0x200004d0
 8001da4:	0800d2e4 	.word	0x0800d2e4

08001da8 <processAllowBindCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processAllowBindCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiAllowBindCnf)
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <processAllowBindCnf+0x60>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <processAllowBindCnf+0x56>
	{
		uint8_t msgIdx = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	73fb      	strb	r3, [r7, #15]
		AllowBindCnfFormat_t rsp;
		if (rpcLen < 2)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d802      	bhi.n	8001dcc <processAllowBindCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001dc6:	4811      	ldr	r0, [pc, #68]	; (8001e0c <processAllowBindCnf+0x64>)
 8001dc8:	f009 fc28 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	440b      	add	r3, r1
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3302      	adds	r3, #2
 8001df0:	73fb      	strb	r3, [r7, #15]

		mtSapiCbs.pfnSapiAllowBindCnf(&rsp);
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <processAllowBindCnf+0x60>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f107 020c 	add.w	r2, r7, #12
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4798      	blx	r3
	}
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200004d0 	.word	0x200004d0
 8001e0c:	0800d2e4 	.word	0x0800d2e4

08001e10 <processBindCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processBindCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiBindCnf)
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <processBindCnf+0x70>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d028      	beq.n	8001e76 <processBindCnf+0x66>
	{
		uint8_t msgIdx = 2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	73fb      	strb	r3, [r7, #15]
		BindCnfFormat_t rsp;
		if (rpcLen < 3)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d802      	bhi.n	8001e34 <processBindCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <processBindCnf+0x74>)
 8001e30:	f009 fbf4 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.CommandId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3301      	adds	r3, #1
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	440b      	add	r3, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3302      	adds	r3, #2
 8001e58:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	73fa      	strb	r2, [r7, #15]
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	72bb      	strb	r3, [r7, #10]

		mtSapiCbs.pfnSapiBindCnf(&rsp);
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <processBindCnf+0x70>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f107 0208 	add.w	r2, r7, #8
 8001e72:	4610      	mov	r0, r2
 8001e74:	4798      	blx	r3
	}
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200004d0 	.word	0x200004d0
 8001e84:	0800d2e4 	.word	0x0800d2e4

08001e88 <processStartCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processStartCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiStartCnf)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <processStartCnf+0x48>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <processStartCnf+0x40>
	{
		uint8_t msgIdx = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	73fb      	strb	r3, [r7, #15]
		StartCnfFormat_t rsp;
		if (rpcLen < 1)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <processStartCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001ea6:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <processStartCnf+0x4c>)
 8001ea8:	f009 fbb8 	bl	800b61c <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	73fa      	strb	r2, [r7, #15]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	733b      	strb	r3, [r7, #12]

		mtSapiCbs.pfnSapiStartCnf(&rsp);
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <processStartCnf+0x48>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4798      	blx	r3
	}
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200004d0 	.word	0x200004d0
 8001ed4:	0800d2e4 	.word	0x0800d2e4

08001ed8 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4817      	ldr	r0, [pc, #92]	; (8001f48 <processSrsp+0x70>)
 8001eec:	f009 fa38 	bl	800b360 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d002      	beq.n	8001f00 <processSrsp+0x28>
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d00a      	beq.n	8001f14 <processSrsp+0x3c>
 8001efe:	e013      	b.n	8001f28 <processSrsp+0x50>
	{
	case MT_SAPI_READ_CONFIGURATION:
		dbg_print(PRINT_LEVEL_VERBOSE,
 8001f00:	4912      	ldr	r1, [pc, #72]	; (8001f4c <processSrsp+0x74>)
 8001f02:	2004      	movs	r0, #4
 8001f04:	f003 fc68 	bl	80057d8 <dbg_print>
		        "sapiProcess: MT_SAPI_READ_CONFIGURATION\n");
		processReadConfigurationSrsp(rpcBuff, rpcLen);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fd93 	bl	8001a38 <processReadConfigurationSrsp>
		break;
 8001f12:	e014      	b.n	8001f3e <processSrsp+0x66>
	case MT_SAPI_GET_DEVICE_INFO:
		dbg_print(PRINT_LEVEL_VERBOSE,
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <processSrsp+0x78>)
 8001f16:	2004      	movs	r0, #4
 8001f18:	f003 fc5e 	bl	80057d8 <dbg_print>
		        "sapiProcess: MT_SAPI_GET_DEVICE_INFO\n");
		processGetDeviceInfoSrsp(rpcBuff, rpcLen);
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fdeb 	bl	8001afc <processGetDeviceInfoSrsp>
		break;
 8001f26:	e00a      	b.n	8001f3e <processSrsp+0x66>
	default:
		dbg_print(PRINT_LEVEL_INFO,
		        "processSrsp: unsupported message  [%x:%x]\n", rpcBuff[0],
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001f2c:	461a      	mov	r2, r3
		        rpcBuff[1]);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3301      	adds	r3, #1
 8001f32:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <processSrsp+0x7c>)
 8001f36:	2002      	movs	r0, #2
 8001f38:	f003 fc4e 	bl	80057d8 <dbg_print>
		break;
 8001f3c:	bf00      	nop
	}

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20003070 	.word	0x20003070
 8001f4c:	0800d2f8 	.word	0x0800d2f8
 8001f50:	0800d324 	.word	0x0800d324
 8001f54:	0800d34c 	.word	0x0800d34c

08001f58 <sapiProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void sapiProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
 8001f68:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
 8001f70:	493a      	ldr	r1, [pc, #232]	; (800205c <sapiProcess+0x104>)
 8001f72:	2004      	movs	r0, #4
 8001f74:	f003 fc30 	bl	80057d8 <dbg_print>

//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001f80:	2b60      	cmp	r3, #96	; 0x60
 8001f82:	d105      	bne.n	8001f90 <sapiProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ffa5 	bl	8001ed8 <processSrsp>
			        "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 8001f8e:	e060      	b.n	8002052 <sapiProcess+0xfa>
		switch (rpcBuff[1])
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3b80      	subs	r3, #128	; 0x80
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	d84f      	bhi.n	800203c <sapiProcess+0xe4>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <sapiProcess+0x4c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08002029 	.word	0x08002029
 8001fa8:	08002015 	.word	0x08002015
 8001fac:	08002001 	.word	0x08002001
 8001fb0:	08001fd9 	.word	0x08001fd9
 8001fb4:	0800203d 	.word	0x0800203d
 8001fb8:	08001fc5 	.word	0x08001fc5
 8001fbc:	0800203d 	.word	0x0800203d
 8001fc0:	08001fed 	.word	0x08001fed
			dbg_print(PRINT_LEVEL_VERBOSE,
 8001fc4:	4926      	ldr	r1, [pc, #152]	; (8002060 <sapiProcess+0x108>)
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	f003 fc06 	bl	80057d8 <dbg_print>
			processFindDeviceCnf(rpcBuff, rpcLen);
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fdd1 	bl	8001b78 <processFindDeviceCnf>
			break;
 8001fd6:	e03c      	b.n	8002052 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8001fd8:	4922      	ldr	r1, [pc, #136]	; (8002064 <sapiProcess+0x10c>)
 8001fda:	2004      	movs	r0, #4
 8001fdc:	f003 fbfc 	bl	80057d8 <dbg_print>
			processSendDataCnf(rpcBuff, rpcLen);
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe2b 	bl	8001c40 <processSendDataCnf>
			break;
 8001fea:	e032      	b.n	8002052 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8001fec:	491e      	ldr	r1, [pc, #120]	; (8002068 <sapiProcess+0x110>)
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f003 fbf2 	bl	80057d8 <dbg_print>
			processReceiveDataInd(rpcBuff, rpcLen);
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fe51 	bl	8001ca0 <processReceiveDataInd>
			break;
 8001ffe:	e028      	b.n	8002052 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8002000:	491a      	ldr	r1, [pc, #104]	; (800206c <sapiProcess+0x114>)
 8002002:	2004      	movs	r0, #4
 8002004:	f003 fbe8 	bl	80057d8 <dbg_print>
			processAllowBindCnf(rpcBuff, rpcLen);
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fecb 	bl	8001da8 <processAllowBindCnf>
			break;
 8002012:	e01e      	b.n	8002052 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_BIND_CNF\n");
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <sapiProcess+0x118>)
 8002016:	2004      	movs	r0, #4
 8002018:	f003 fbde 	bl	80057d8 <dbg_print>
			processBindCnf(rpcBuff, rpcLen);
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fef5 	bl	8001e10 <processBindCnf>
			break;
 8002026:	e014      	b.n	8002052 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_START_CNF\n");
 8002028:	4912      	ldr	r1, [pc, #72]	; (8002074 <sapiProcess+0x11c>)
 800202a:	2004      	movs	r0, #4
 800202c:	f003 fbd4 	bl	80057d8 <dbg_print>
			processStartCnf(rpcBuff, rpcLen);
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff27 	bl	8001e88 <processStartCnf>
			break;
 800203a:	e00a      	b.n	8002052 <sapiProcess+0xfa>
			        "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_INFO,
 8002040:	461a      	mov	r2, r3
			        rpcBuff[1]);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3301      	adds	r3, #1
 8002046:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_INFO,
 8002048:	490b      	ldr	r1, [pc, #44]	; (8002078 <sapiProcess+0x120>)
 800204a:	2002      	movs	r0, #2
 800204c:	f003 fbc4 	bl	80057d8 <dbg_print>
			break;
 8002050:	bf00      	nop
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800d378 	.word	0x0800d378
 8002060:	0800d3a4 	.word	0x0800d3a4
 8002064:	0800d3cc 	.word	0x0800d3cc
 8002068:	0800d3f0 	.word	0x0800d3f0
 800206c:	0800d418 	.word	0x0800d418
 8002070:	0800d440 	.word	0x0800d440
 8002074:	0800d460 	.word	0x0800d460
 8002078:	0800d480 	.word	0x0800d480

0800207c <processPingSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 */
static void processPingSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysPingSrsp)
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <processPingSrsp+0x60>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <processPingSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002090:	2302      	movs	r3, #2
 8002092:	73fb      	strb	r3, [r7, #15]
		PingSrspFormat_t rsp;
		if (rpcLen < 2)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d802      	bhi.n	80020a0 <processPingSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800209a:	4811      	ldr	r0, [pc, #68]	; (80020e0 <processPingSrsp+0x64>)
 800209c:	f009 fabe 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Capabilities = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3301      	adds	r3, #1
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	440b      	add	r3, r1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3302      	adds	r3, #2
 80020c4:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysPingSrsp(&rsp);
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <processPingSrsp+0x60>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	4610      	mov	r0, r2
 80020d0:	4798      	blx	r3
	}
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200004f0 	.word	0x200004f0
 80020e0:	0800d4ac 	.word	0x0800d4ac

080020e4 <processGetExtAddrSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetExtAddrSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetExtAddrSrsp)
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <processGetExtAddrSrsp+0x9c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03e      	beq.n	8002176 <processGetExtAddrSrsp+0x92>
	{
		uint8_t msgIdx = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75fb      	strb	r3, [r7, #23]
		GetExtAddrSrspFormat_t rsp;
		if (rpcLen < 8)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d802      	bhi.n	8002108 <processGetExtAddrSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002102:	4820      	ldr	r0, [pc, #128]	; (8002184 <processGetExtAddrSrsp+0xa0>)
 8002104:	f009 fa8a 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ExtAddr = 0;
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8002114:	2300      	movs	r3, #0
 8002116:	75bb      	strb	r3, [r7, #22]
 8002118:	e024      	b.n	8002164 <processGetExtAddrSrsp+0x80>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	75fa      	strb	r2, [r7, #23]
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	7db9      	ldrb	r1, [r7, #22]
 8002130:	00c9      	lsls	r1, r1, #3
 8002132:	f1a1 0620 	sub.w	r6, r1, #32
 8002136:	f1c1 0020 	rsb	r0, r1, #32
 800213a:	fa03 f501 	lsl.w	r5, r3, r1
 800213e:	fa02 f606 	lsl.w	r6, r2, r6
 8002142:	4335      	orrs	r5, r6
 8002144:	fa22 f000 	lsr.w	r0, r2, r0
 8002148:	4305      	orrs	r5, r0
 800214a:	fa02 f401 	lsl.w	r4, r2, r1
 800214e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002152:	ea40 0204 	orr.w	r2, r0, r4
 8002156:	ea41 0305 	orr.w	r3, r1, r5
 800215a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for (i = 0; i < 8; i++)
 800215e:	7dbb      	ldrb	r3, [r7, #22]
 8002160:	3301      	adds	r3, #1
 8002162:	75bb      	strb	r3, [r7, #22]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	2b07      	cmp	r3, #7
 8002168:	d9d7      	bls.n	800211a <processGetExtAddrSrsp+0x36>

		mtSysCbs.pfnSysGetExtAddrSrsp(&rsp);
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <processGetExtAddrSrsp+0x9c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f107 0208 	add.w	r2, r7, #8
 8002172:	4610      	mov	r0, r2
 8002174:	4798      	blx	r3
	}
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217e:	bf00      	nop
 8002180:	200004f0 	.word	0x200004f0
 8002184:	0800d4ac 	.word	0x0800d4ac

08002188 <processRamReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRamReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a6      	sub	sp, #152	; 0x98
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRamReadSrsp)
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <processRamReadSrsp+0xa8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d044      	beq.n	8002226 <processRamReadSrsp+0x9e>
	{
		uint8_t msgIdx = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		RamReadSrspFormat_t rsp;
		if (rpcLen < 2)
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d802      	bhi.n	80021ae <processRamReadSrsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80021a8:	4822      	ldr	r0, [pc, #136]	; (8002234 <processRamReadSrsp+0xac>)
 80021aa:	f009 fa37 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80021ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	733b      	strb	r3, [r7, #12]
		rsp.Len = rpcBuff[msgIdx++];
 80021c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	737b      	strb	r3, [r7, #13]
		if (rpcLen > 2)
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d91e      	bls.n	800221a <processRamReadSrsp+0x92>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021e2:	e014      	b.n	800220e <processRamReadSrsp+0x86>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 80021e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80021ee:	461a      	mov	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	7819      	ldrb	r1, [r3, #0]
 80021f6:	f107 020e 	add.w	r2, r7, #14
 80021fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fe:	4413      	add	r3, r2
 8002200:	460a      	mov	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8002204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002208:	3301      	adds	r3, #1
 800220a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800220e:	7b7b      	ldrb	r3, [r7, #13]
 8002210:	461a      	mov	r2, r3
 8002212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002216:	4293      	cmp	r3, r2
 8002218:	d3e4      	bcc.n	80021e4 <processRamReadSrsp+0x5c>
			}
		}
		mtSysCbs.pfnSysRamReadSrsp(&rsp);
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <processRamReadSrsp+0xa8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f107 020c 	add.w	r2, r7, #12
 8002222:	4610      	mov	r0, r2
 8002224:	4798      	blx	r3
	}
}
 8002226:	bf00      	nop
 8002228:	3798      	adds	r7, #152	; 0x98
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200004f0 	.word	0x200004f0
 8002234:	0800d4ac 	.word	0x0800d4ac

08002238 <processResetInd>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processResetInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysResetInd)
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <processResetInd+0x98>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03d      	beq.n	80022c8 <processResetInd+0x90>
	{
		uint8_t msgIdx = 2;
 800224c:	2302      	movs	r3, #2
 800224e:	73fb      	strb	r3, [r7, #15]
		ResetIndFormat_t rsp;
		if (rpcLen < 6)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d802      	bhi.n	800225c <processResetInd+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002256:	481f      	ldr	r0, [pc, #124]	; (80022d4 <processResetInd+0x9c>)
 8002258:	f009 f9e0 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Reason = rpcBuff[msgIdx++];
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	73fa      	strb	r2, [r7, #15]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	723b      	strb	r3, [r7, #8]
		rsp.TransportRev = rpcBuff[msgIdx++];
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	73fa      	strb	r2, [r7, #15]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	727b      	strb	r3, [r7, #9]
		rsp.ProductId = rpcBuff[msgIdx++];
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	73fa      	strb	r2, [r7, #15]
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	72bb      	strb	r3, [r7, #10]
		rsp.MajorRel = rpcBuff[msgIdx++];
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	73fa      	strb	r2, [r7, #15]
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	72fb      	strb	r3, [r7, #11]
		rsp.MinorRel = rpcBuff[msgIdx++];
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	73fa      	strb	r2, [r7, #15]
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	733b      	strb	r3, [r7, #12]
		rsp.HwRev = rpcBuff[msgIdx++];
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	73fa      	strb	r2, [r7, #15]
 80022b2:	461a      	mov	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	737b      	strb	r3, [r7, #13]

		mtSysCbs.pfnSysResetInd(&rsp);
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <processResetInd+0x98>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f107 0208 	add.w	r2, r7, #8
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
	}
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200004f0 	.word	0x200004f0
 80022d4:	0800d4ac 	.word	0x0800d4ac

080022d8 <processVersionSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processVersionSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysVersionSrsp)
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <processVersionSrsp+0x88>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d035      	beq.n	8002358 <processVersionSrsp+0x80>
	{
		uint8_t msgIdx = 2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	73fb      	strb	r3, [r7, #15]
		VersionSrspFormat_t rsp;
		if (rpcLen < 5)
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d802      	bhi.n	80022fc <processVersionSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80022f6:	481b      	ldr	r0, [pc, #108]	; (8002364 <processVersionSrsp+0x8c>)
 80022f8:	f009 f990 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TransportRev = rpcBuff[msgIdx++];
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	73fa      	strb	r2, [r7, #15]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	723b      	strb	r3, [r7, #8]
		rsp.Product = rpcBuff[msgIdx++];
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	73fa      	strb	r2, [r7, #15]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	727b      	strb	r3, [r7, #9]
		rsp.MajorRel = rpcBuff[msgIdx++];
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	73fa      	strb	r2, [r7, #15]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	72bb      	strb	r3, [r7, #10]
		rsp.MinorRel = rpcBuff[msgIdx++];
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	73fa      	strb	r2, [r7, #15]
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	72fb      	strb	r3, [r7, #11]
		rsp.MaintRel = rpcBuff[msgIdx++];
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	73fa      	strb	r2, [r7, #15]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysVersionSrsp(&rsp);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <processVersionSrsp+0x88>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	4610      	mov	r0, r2
 8002356:	4798      	blx	r3
	}
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200004f0 	.word	0x200004f0
 8002364:	0800d4ac 	.word	0x0800d4ac

08002368 <processOsalNvReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0c4      	sub	sp, #272	; 0x110
 800236c:	af00      	add	r7, sp, #0
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	6018      	str	r0, [r3, #0]
 8002372:	460a      	mov	r2, r1
 8002374:	1cfb      	adds	r3, r7, #3
 8002376:	701a      	strb	r2, [r3, #0]
	if (mtSysCbs.pfnSysOsalNvReadSrsp)
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <processOsalNvReadSrsp+0xc4>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d050      	beq.n	8002422 <processOsalNvReadSrsp+0xba>
	{
		uint8_t msgIdx = 2;
 8002380:	2302      	movs	r3, #2
 8002382:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		OsalNvReadSrspFormat_t rsp;
		if (rpcLen < 2)
 8002386:	1cfb      	adds	r3, r7, #3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d802      	bhi.n	8002394 <processOsalNvReadSrsp+0x2c>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800238e:	4828      	ldr	r0, [pc, #160]	; (8002430 <processOsalNvReadSrsp+0xc8>)
 8002390:	f009 f944 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002394:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800239e:	461a      	mov	r2, r3
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	701a      	strb	r2, [r3, #0]
		rsp.Len = rpcBuff[msgIdx++];
 80023ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80023b8:	461a      	mov	r2, r3
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2)
 80023c8:	1cfb      	adds	r3, r7, #3
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d922      	bls.n	8002416 <processOsalNvReadSrsp+0xae>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80023d6:	e016      	b.n	8002406 <processOsalNvReadSrsp+0x9e>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 80023d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80023e2:	461a      	mov	r2, r3
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	7819      	ldrb	r1, [r3, #0]
 80023ec:	f107 020c 	add.w	r2, r7, #12
 80023f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023f4:	4413      	add	r3, r2
 80023f6:	3302      	adds	r3, #2
 80023f8:	460a      	mov	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 80023fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002400:	3301      	adds	r3, #1
 8002402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	785b      	ldrb	r3, [r3, #1]
 800240c:	461a      	mov	r2, r3
 800240e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002412:	4293      	cmp	r3, r2
 8002414:	d3e0      	bcc.n	80023d8 <processOsalNvReadSrsp+0x70>
			}
		}
		mtSysCbs.pfnSysOsalNvReadSrsp(&rsp);
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <processOsalNvReadSrsp+0xc4>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f107 020c 	add.w	r2, r7, #12
 800241e:	4610      	mov	r0, r2
 8002420:	4798      	blx	r3
	}
}
 8002422:	bf00      	nop
 8002424:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200004f0 	.word	0x200004f0
 8002430:	0800d4ac 	.word	0x0800d4ac

08002434 <processOsalNvLengthSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvLengthSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalNvLengthSrsp)
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <processOsalNvLengthSrsp+0x60>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <processOsalNvLengthSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002448:	2302      	movs	r3, #2
 800244a:	73fb      	strb	r3, [r7, #15]
		OsalNvLengthSrspFormat_t rsp;
		if (rpcLen < 2)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d802      	bhi.n	8002458 <processOsalNvLengthSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002452:	4811      	ldr	r0, [pc, #68]	; (8002498 <processOsalNvLengthSrsp+0x64>)
 8002454:	f009 f8e2 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ItemLen = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b29a      	uxth	r2, r3
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	3301      	adds	r3, #1
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b29b      	uxth	r3, r3
 8002472:	4413      	add	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3302      	adds	r3, #2
 800247c:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysOsalNvLengthSrsp(&rsp);
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <processOsalNvLengthSrsp+0x60>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f107 020c 	add.w	r2, r7, #12
 8002486:	4610      	mov	r0, r2
 8002488:	4798      	blx	r3
	}
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200004f0 	.word	0x200004f0
 8002498:	0800d4ac 	.word	0x0800d4ac

0800249c <processOsalTimerExpired>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalTimerExpired(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalTimerExpired)
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <processOsalTimerExpired+0x48>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <processOsalTimerExpired+0x40>
	{
		uint8_t msgIdx = 2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	73fb      	strb	r3, [r7, #15]
		OsalTimerExpiredFormat_t rsp;
		if (rpcLen < 1)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <processOsalTimerExpired+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80024ba:	480b      	ldr	r0, [pc, #44]	; (80024e8 <processOsalTimerExpired+0x4c>)
 80024bc:	f009 f8ae 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Id = rpcBuff[msgIdx++];
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	73fa      	strb	r2, [r7, #15]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysOsalTimerExpired(&rsp);
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <processOsalTimerExpired+0x48>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f107 020c 	add.w	r2, r7, #12
 80024d8:	4610      	mov	r0, r2
 80024da:	4798      	blx	r3
	}
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200004f0 	.word	0x200004f0
 80024e8:	0800d4ac 	.word	0x0800d4ac

080024ec <processStackTuneSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processStackTuneSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysStackTuneSrsp)
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <processStackTuneSrsp+0x48>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <processStackTuneSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 8002500:	2302      	movs	r3, #2
 8002502:	73fb      	strb	r3, [r7, #15]
		StackTuneSrspFormat_t rsp;
		if (rpcLen < 1)
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <processStackTuneSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800250a:	480b      	ldr	r0, [pc, #44]	; (8002538 <processStackTuneSrsp+0x4c>)
 800250c:	f009 f886 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	73fa      	strb	r2, [r7, #15]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysStackTuneSrsp(&rsp);
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <processStackTuneSrsp+0x48>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f107 020c 	add.w	r2, r7, #12
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
	}
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200004f0 	.word	0x200004f0
 8002538:	0800d4ac 	.word	0x0800d4ac

0800253c <processAdcReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processAdcReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysAdcReadSrsp)
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <processAdcReadSrsp+0x60>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <processAdcReadSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002550:	2302      	movs	r3, #2
 8002552:	73fb      	strb	r3, [r7, #15]
		AdcReadSrspFormat_t rsp;
		if (rpcLen < 2)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d802      	bhi.n	8002560 <processAdcReadSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <processAdcReadSrsp+0x64>)
 800255c:	f009 f85e 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	3301      	adds	r3, #1
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	440b      	add	r3, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	4413      	add	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3302      	adds	r3, #2
 8002584:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysAdcReadSrsp(&rsp);
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <processAdcReadSrsp+0x60>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f107 020c 	add.w	r2, r7, #12
 800258e:	4610      	mov	r0, r2
 8002590:	4798      	blx	r3
	}
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200004f0 	.word	0x200004f0
 80025a0:	0800d4ac 	.word	0x0800d4ac

080025a4 <processGpioSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGpioSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGpioSrsp)
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <processGpioSrsp+0x48>)
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d015      	beq.n	80025e4 <processGpioSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	73fb      	strb	r3, [r7, #15]
		GpioSrspFormat_t rsp;
		if (rpcLen < 1)
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <processGpioSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80025c2:	480b      	ldr	r0, [pc, #44]	; (80025f0 <processGpioSrsp+0x4c>)
 80025c4:	f009 f82a 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	73fa      	strb	r2, [r7, #15]
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysGpioSrsp(&rsp);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <processGpioSrsp+0x48>)
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	4610      	mov	r0, r2
 80025e2:	4798      	blx	r3
	}
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200004f0 	.word	0x200004f0
 80025f0:	0800d4ac 	.word	0x0800d4ac

080025f4 <processRandomSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRandomSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRandomSrsp)
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <processRandomSrsp+0x60>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <processRandomSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002608:	2302      	movs	r3, #2
 800260a:	73fb      	strb	r3, [r7, #15]
		RandomSrspFormat_t rsp;
		if (rpcLen < 2)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d802      	bhi.n	8002618 <processRandomSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002612:	4811      	ldr	r0, [pc, #68]	; (8002658 <processRandomSrsp+0x64>)
 8002614:	f009 f802 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b29a      	uxth	r2, r3
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	3301      	adds	r3, #1
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	440b      	add	r3, r1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b29b      	uxth	r3, r3
 8002632:	4413      	add	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3302      	adds	r3, #2
 800263c:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysRandomSrsp(&rsp);
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <processRandomSrsp+0x60>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f107 020c 	add.w	r2, r7, #12
 8002646:	4610      	mov	r0, r2
 8002648:	4798      	blx	r3
	}
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200004f0 	.word	0x200004f0
 8002658:	0800d4ac 	.word	0x0800d4ac

0800265c <processGetTimeSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetTimeSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetTimeSrsp)
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <processGetTimeSrsp+0xe0>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d061      	beq.n	8002734 <processGetTimeSrsp+0xd8>
	{
		uint8_t msgIdx = 2;
 8002670:	2302      	movs	r3, #2
 8002672:	75fb      	strb	r3, [r7, #23]
		GetTimeSrspFormat_t rsp;
		if (rpcLen < 11)
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d802      	bhi.n	8002680 <processGetTimeSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800267a:	4831      	ldr	r0, [pc, #196]	; (8002740 <processGetTimeSrsp+0xe4>)
 800267c:	f008 ffce 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.UTCTime = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	75bb      	strb	r3, [r7, #22]
 8002688:	e010      	b.n	80026ac <processGetTimeSrsp+0x50>
			rsp.UTCTime |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	75fa      	strb	r2, [r7, #23]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	409a      	lsls	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 4; i++)
 80026a6:	7dbb      	ldrb	r3, [r7, #22]
 80026a8:	3301      	adds	r3, #1
 80026aa:	75bb      	strb	r3, [r7, #22]
 80026ac:	7dbb      	ldrb	r3, [r7, #22]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d9eb      	bls.n	800268a <processGetTimeSrsp+0x2e>
		rsp.Hour = rpcBuff[msgIdx++];
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	75fa      	strb	r2, [r7, #23]
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	733b      	strb	r3, [r7, #12]
		rsp.Minute = rpcBuff[msgIdx++];
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	75fa      	strb	r2, [r7, #23]
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	737b      	strb	r3, [r7, #13]
		rsp.Second = rpcBuff[msgIdx++];
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	75fa      	strb	r2, [r7, #23]
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	73bb      	strb	r3, [r7, #14]
		rsp.Month = rpcBuff[msgIdx++];
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	75fa      	strb	r2, [r7, #23]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	73fb      	strb	r3, [r7, #15]
		rsp.Day = rpcBuff[msgIdx++];
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	75fa      	strb	r2, [r7, #23]
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	743b      	strb	r3, [r7, #16]
		rsp.Year = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b29a      	uxth	r2, r3
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	3301      	adds	r3, #1
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	440b      	add	r3, r1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b29b      	uxth	r3, r3
 800271c:	4413      	add	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	3302      	adds	r3, #2
 8002726:	75fb      	strb	r3, [r7, #23]

		mtSysCbs.pfnSysGetTimeSrsp(&rsp);
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <processGetTimeSrsp+0xe0>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f107 0208 	add.w	r2, r7, #8
 8002730:	4610      	mov	r0, r2
 8002732:	4798      	blx	r3
	}
}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200004f0 	.word	0x200004f0
 8002740:	0800d4ac 	.word	0x0800d4ac

08002744 <processSetTxPowerSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processSetTxPowerSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysSetTxPowerSrsp)
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <processSetTxPowerSrsp+0x48>)
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d015      	beq.n	8002784 <processSetTxPowerSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 8002758:	2302      	movs	r3, #2
 800275a:	73fb      	strb	r3, [r7, #15]
		SetTxPowerSrspFormat_t rsp;
		if (rpcLen < 1)
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <processSetTxPowerSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002762:	480b      	ldr	r0, [pc, #44]	; (8002790 <processSetTxPowerSrsp+0x4c>)
 8002764:	f008 ff5a 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TxPower = rpcBuff[msgIdx++];
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	73fa      	strb	r2, [r7, #15]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysSetTxPowerSrsp(&rsp);
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <processSetTxPowerSrsp+0x48>)
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	4610      	mov	r0, r2
 8002782:	4798      	blx	r3
	}
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200004f0 	.word	0x200004f0
 8002790:	0800d4ac 	.word	0x0800d4ac

08002794 <sysRegisterCallbacks>:
 *
 * @param
 *
 */
void sysRegisterCallbacks(mtSysCb_t cbs)
{
 8002794:	b084      	sub	sp, #16
 8002796:	b4b0      	push	{r4, r5, r7}
 8002798:	af00      	add	r7, sp, #0
 800279a:	f107 040c 	add.w	r4, r7, #12
 800279e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtSysCbs, &cbs, sizeof(mtSysCb_t));
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <sysRegisterCallbacks+0x34>)
 80027a4:	461c      	mov	r4, r3
 80027a6:	f107 050c 	add.w	r5, r7, #12
 80027aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027ba:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bcb0      	pop	{r4, r5, r7}
 80027c4:	b004      	add	sp, #16
 80027c6:	4770      	bx	lr
 80027c8:	200004f0 	.word	0x200004f0

080027cc <processSrsp>:
 * @param
 *

 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	461a      	mov	r2, r3
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	485b      	ldr	r0, [pc, #364]	; (800294c <processSrsp+0x180>)
 80027e0:	f008 fdbe 	bl	800b360 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3301      	adds	r3, #1
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	2b13      	cmp	r3, #19
 80027ee:	f200 80a3 	bhi.w	8002938 <processSrsp+0x16c>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <processSrsp+0x2c>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002849 	.word	0x08002849
 80027fc:	08002885 	.word	0x08002885
 8002800:	08002939 	.word	0x08002939
 8002804:	0800285d 	.word	0x0800285d
 8002808:	08002871 	.word	0x08002871
 800280c:	08002939 	.word	0x08002939
 8002810:	08002939 	.word	0x08002939
 8002814:	08002899 	.word	0x08002899
 8002818:	08002939 	.word	0x08002939
 800281c:	08002939 	.word	0x08002939
 8002820:	08002939 	.word	0x08002939
 8002824:	080028fd 	.word	0x080028fd
 8002828:	080028d5 	.word	0x080028d5
 800282c:	080028e9 	.word	0x080028e9
 8002830:	080028c1 	.word	0x080028c1
 8002834:	08002939 	.word	0x08002939
 8002838:	08002911 	.word	0x08002911
 800283c:	08002939 	.word	0x08002939
 8002840:	080028ad 	.word	0x080028ad
 8002844:	08002925 	.word	0x08002925
	{
	case MT_SYS_PING:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_PING\n");
 8002848:	4941      	ldr	r1, [pc, #260]	; (8002950 <processSrsp+0x184>)
 800284a:	2004      	movs	r0, #4
 800284c:	f002 ffc4 	bl	80057d8 <dbg_print>
		processPingSrsp(rpcBuff, rpcLen);
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fc11 	bl	800207c <processPingSrsp>
		break;
 800285a:	e072      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_GET_EXTADDR:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_EXTADDR\n");
 800285c:	493d      	ldr	r1, [pc, #244]	; (8002954 <processSrsp+0x188>)
 800285e:	2004      	movs	r0, #4
 8002860:	f002 ffba 	bl	80057d8 <dbg_print>
		processGetExtAddrSrsp(rpcBuff, rpcLen);
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fc3b 	bl	80020e4 <processGetExtAddrSrsp>
		break;
 800286e:	e068      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_RAM_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RAM_READ\n");
 8002870:	4939      	ldr	r1, [pc, #228]	; (8002958 <processSrsp+0x18c>)
 8002872:	2004      	movs	r0, #4
 8002874:	f002 ffb0 	bl	80057d8 <dbg_print>
		processRamReadSrsp(rpcBuff, rpcLen);
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fc83 	bl	8002188 <processRamReadSrsp>
		break;
 8002882:	e05e      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_VERSION:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_VERSION\n");
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <processSrsp+0x190>)
 8002886:	2004      	movs	r0, #4
 8002888:	f002 ffa6 	bl	80057d8 <dbg_print>
		processVersionSrsp(rpcBuff, rpcLen);
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fd21 	bl	80022d8 <processVersionSrsp>
		break;
 8002896:	e054      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_OSAL_NV_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_READ\n");
 8002898:	4931      	ldr	r1, [pc, #196]	; (8002960 <processSrsp+0x194>)
 800289a:	2004      	movs	r0, #4
 800289c:	f002 ff9c 	bl	80057d8 <dbg_print>
		processOsalNvReadSrsp(rpcBuff, rpcLen);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd5f 	bl	8002368 <processOsalNvReadSrsp>
		break;
 80028aa:	e04a      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_OSAL_NV_LENGTH:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_LENGTH\n");
 80028ac:	492d      	ldr	r1, [pc, #180]	; (8002964 <processSrsp+0x198>)
 80028ae:	2004      	movs	r0, #4
 80028b0:	f002 ff92 	bl	80057d8 <dbg_print>
		processOsalNvLengthSrsp(rpcBuff, rpcLen);
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fdbb 	bl	8002434 <processOsalNvLengthSrsp>
		break;
 80028be:	e040      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_STACK_TUNE:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_STACK_TUNE\n");
 80028c0:	4929      	ldr	r1, [pc, #164]	; (8002968 <processSrsp+0x19c>)
 80028c2:	2004      	movs	r0, #4
 80028c4:	f002 ff88 	bl	80057d8 <dbg_print>
		processStackTuneSrsp(rpcBuff, rpcLen);
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fe0d 	bl	80024ec <processStackTuneSrsp>
		break;
 80028d2:	e036      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_ADC_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_ADC_READ\n");
 80028d4:	4925      	ldr	r1, [pc, #148]	; (800296c <processSrsp+0x1a0>)
 80028d6:	2004      	movs	r0, #4
 80028d8:	f002 ff7e 	bl	80057d8 <dbg_print>
		processAdcReadSrsp(rpcBuff, rpcLen);
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fe2b 	bl	800253c <processAdcReadSrsp>
		break;
 80028e6:	e02c      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_GPIO:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GPIO\n");
 80028e8:	4921      	ldr	r1, [pc, #132]	; (8002970 <processSrsp+0x1a4>)
 80028ea:	2004      	movs	r0, #4
 80028ec:	f002 ff74 	bl	80057d8 <dbg_print>
		processGpioSrsp(rpcBuff, rpcLen);
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fe55 	bl	80025a4 <processGpioSrsp>
		break;
 80028fa:	e022      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_RANDOM:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RANDOM\n");
 80028fc:	491d      	ldr	r1, [pc, #116]	; (8002974 <processSrsp+0x1a8>)
 80028fe:	2004      	movs	r0, #4
 8002900:	f002 ff6a 	bl	80057d8 <dbg_print>
		processRandomSrsp(rpcBuff, rpcLen);
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe73 	bl	80025f4 <processRandomSrsp>
		break;
 800290e:	e018      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_GET_TIME:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_TIME\n");
 8002910:	4919      	ldr	r1, [pc, #100]	; (8002978 <processSrsp+0x1ac>)
 8002912:	2004      	movs	r0, #4
 8002914:	f002 ff60 	bl	80057d8 <dbg_print>
		processGetTimeSrsp(rpcBuff, rpcLen);
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fe9d 	bl	800265c <processGetTimeSrsp>
		break;
 8002922:	e00e      	b.n	8002942 <processSrsp+0x176>
	case MT_SYS_SET_TX_POWER:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_SET_TX_POWER\n");
 8002924:	4915      	ldr	r1, [pc, #84]	; (800297c <processSrsp+0x1b0>)
 8002926:	2004      	movs	r0, #4
 8002928:	f002 ff56 	bl	80057d8 <dbg_print>
		processSetTxPowerSrsp(rpcBuff, rpcLen);
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff07 	bl	8002744 <processSetTxPowerSrsp>
		break;
 8002936:	e004      	b.n	8002942 <processSrsp+0x176>
	default:
		dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8002938:	4911      	ldr	r1, [pc, #68]	; (8002980 <processSrsp+0x1b4>)
 800293a:	2002      	movs	r0, #2
 800293c:	f002 ff4c 	bl	80057d8 <dbg_print>
		break;
 8002940:	bf00      	nop
	}

}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20003070 	.word	0x20003070
 8002950:	0800d4e4 	.word	0x0800d4e4
 8002954:	0800d500 	.word	0x0800d500
 8002958:	0800d520 	.word	0x0800d520
 800295c:	0800d540 	.word	0x0800d540
 8002960:	0800d55c 	.word	0x0800d55c
 8002964:	0800d580 	.word	0x0800d580
 8002968:	0800d5a4 	.word	0x0800d5a4
 800296c:	0800d5c4 	.word	0x0800d5c4
 8002970:	0800d5e4 	.word	0x0800d5e4
 8002974:	0800d600 	.word	0x0800d600
 8002978:	0800d61c 	.word	0x0800d61c
 800297c:	0800d63c 	.word	0x0800d63c
 8002980:	0800d660 	.word	0x0800d660

08002984 <sysProcess>:
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *

 *************************************************************************************************/
void sysProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
 8002994:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3301      	adds	r3, #1
 800299a:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
 800299c:	491d      	ldr	r1, [pc, #116]	; (8002a14 <sysProcess+0x90>)
 800299e:	2004      	movs	r0, #4
 80029a0:	f002 ff1a 	bl	80057d8 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d105      	bne.n	80029bc <sysProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff09 	bl	80027cc <processSrsp>
			        "processRpcSys: CMD0:%x, CMD1:%x, not handled\n",
			        rpcBuff[0], rpcBuff[1]);
			break;
		}
	}
}
 80029ba:	e026      	b.n	8002a0a <sysProcess+0x86>
		switch (rpcBuff[1])
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3301      	adds	r3, #1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d002      	beq.n	80029cc <sysProcess+0x48>
 80029c6:	2b81      	cmp	r3, #129	; 0x81
 80029c8:	d00a      	beq.n	80029e0 <sysProcess+0x5c>
 80029ca:	e013      	b.n	80029f4 <sysProcess+0x70>
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RESET_IND\n");
 80029cc:	4912      	ldr	r1, [pc, #72]	; (8002a18 <sysProcess+0x94>)
 80029ce:	2004      	movs	r0, #4
 80029d0:	f002 ff02 	bl	80057d8 <dbg_print>
			processResetInd(rpcBuff, rpcLen);
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fc2d 	bl	8002238 <processResetInd>
			break;
 80029de:	e014      	b.n	8002a0a <sysProcess+0x86>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <sysProcess+0x98>)
 80029e2:	2004      	movs	r0, #4
 80029e4:	f002 fef8 	bl	80057d8 <dbg_print>
			processOsalTimerExpired(rpcBuff, rpcLen);
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fd55 	bl	800249c <processOsalTimerExpired>
			break;
 80029f2:	e00a      	b.n	8002a0a <sysProcess+0x86>
			        rpcBuff[0], rpcBuff[1]);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 80029f8:	461a      	mov	r2, r3
			        rpcBuff[0], rpcBuff[1]);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3301      	adds	r3, #1
 80029fe:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <sysProcess+0x9c>)
 8002a02:	2001      	movs	r0, #1
 8002a04:	f002 fee8 	bl	80057d8 <dbg_print>
			break;
 8002a08:	bf00      	nop
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	0800d684 	.word	0x0800d684
 8002a18:	0800d6b0 	.word	0x0800d6b0
 8002a1c:	0800d6d0 	.word	0x0800d6d0
 8002a20:	0800d6f8 	.word	0x0800d6f8

08002a24 <processStateChange>:
 * @param   uint8_t *rpcBuff
 *
 * @return  none
 */
static void processStateChange(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]

	uint8_t zdoState = rpcBuff[2];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	73fb      	strb	r3, [r7, #15]
	//passes the state to the callback function
	if (mtZdoCbs.pfnmtZdoStateChangeInd)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <processStateChange+0x2c>)
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <processStateChange+0x24>
	{
		mtZdoCbs.pfnmtZdoStateChangeInd(zdoState);
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <processStateChange+0x2c>)
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	4610      	mov	r0, r2
 8002a46:	4798      	blx	r3
	}
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000528 	.word	0x20000528

08002a54 <zdoActiveEpReq>:
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoActiveEpReq(ActiveEpReqFormat_t *req)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t cmInd = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 4;
 8002a60:	2304      	movs	r3, #4
 8002a62:	613b      	str	r3, [r7, #16]
	uint8_t *cmd = malloc(cmdLen);
 8002a64:	6938      	ldr	r0, [r7, #16]
 8002a66:	f008 fc6b 	bl	800b340 <malloc>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60fb      	str	r3, [r7, #12]

	if (cmd)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d042      	beq.n	8002afa <zdoActiveEpReq+0xa6>
	{

		cmd[cmInd++] = (uint8_t)(req->DstAddr & 0xFF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	7dbb      	ldrb	r3, [r7, #22]
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	75b9      	strb	r1, [r7, #22]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	440b      	add	r3, r1
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)((req->DstAddr >> 8) & 0xFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	7dbb      	ldrb	r3, [r7, #22]
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	75b9      	strb	r1, [r7, #22]
 8002a96:	4619      	mov	r1, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	440b      	add	r3, r1
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)(req->NwkAddrOfInterest & 0xFF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	885a      	ldrh	r2, [r3, #2]
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	1c59      	adds	r1, r3, #1
 8002aa8:	75b9      	strb	r1, [r7, #22]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	440b      	add	r3, r1
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)((req->NwkAddrOfInterest >> 8) & 0xFF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	885b      	ldrh	r3, [r3, #2]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	7dbb      	ldrb	r3, [r7, #22]
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	75b9      	strb	r1, [r7, #22]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

		status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO),
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2025      	movs	r0, #37	; 0x25
 8002ad6:	f003 f935 	bl	8005d44 <rpcSendFrame>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
		MT_ZDO_ACTIVE_EP_REQ, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <zdoActiveEpReq+0x9c>
		{
			rpcWaitMqClientMsg(50);
 8002ae4:	2032      	movs	r0, #50	; 0x32
 8002ae6:	f002 ffa1 	bl	8005a2c <rpcWaitMqClientMsg>
			status = srspRpcBuff[2];
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <zdoActiveEpReq+0xb8>)
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	75fb      	strb	r3, [r7, #23]
		}

		free(cmd);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f008 fc2d 	bl	800b350 <free>
		return status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	e004      	b.n	8002b04 <zdoActiveEpReq+0xb0>
	}
	else
	{
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
 8002afa:	4905      	ldr	r1, [pc, #20]	; (8002b10 <zdoActiveEpReq+0xbc>)
 8002afc:	2001      	movs	r0, #1
 8002afe:	f002 fe6b 	bl	80057d8 <dbg_print>
		return 1;
 8002b02:	2301      	movs	r3, #1
	}
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20003070 	.word	0x20003070
 8002b10:	0800d728 	.word	0x0800d728

08002b14 <processGetLinkKey>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processGetLinkKey(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b08d      	sub	sp, #52	; 0x34
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoGetLinkKey)
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <processGetLinkKey+0xe4>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d061      	beq.n	8002bee <processGetLinkKey+0xda>
	{
		uint8_t msgIdx = 2;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		GetLinkKeySrspFormat_t rsp;
		if (rpcLen < 25)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b18      	cmp	r3, #24
 8002b34:	d802      	bhi.n	8002b3c <processGetLinkKey+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002b36:	4831      	ldr	r0, [pc, #196]	; (8002bfc <processGetLinkKey+0xe8>)
 8002b38:	f008 fd70 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002b62:	e029      	b.n	8002bb8 <processGetLinkKey+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8002b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002b80:	00c9      	lsls	r1, r1, #3
 8002b82:	f1a1 0620 	sub.w	r6, r1, #32
 8002b86:	f1c1 0020 	rsb	r0, r1, #32
 8002b8a:	fa03 f501 	lsl.w	r5, r3, r1
 8002b8e:	fa02 f606 	lsl.w	r6, r2, r6
 8002b92:	4335      	orrs	r5, r6
 8002b94:	fa22 f000 	lsr.w	r0, r2, r0
 8002b98:	4305      	orrs	r5, r0
 8002b9a:	fa02 f401 	lsl.w	r4, r2, r1
 8002b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ba2:	ea40 0204 	orr.w	r2, r0, r4
 8002ba6:	ea41 0305 	orr.w	r3, r1, r5
 8002baa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8002bae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002bb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d9d1      	bls.n	8002b64 <processGetLinkKey+0x50>
		memcpy(rsp.LinkKeyData, &rpcBuff[msgIdx], 16);
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f107 0418 	add.w	r4, r7, #24
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		msgIdx += 16;
 8002bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bda:	3310      	adds	r3, #16
 8002bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		mtZdoCbs.pfnZdoGetLinkKey(&rsp);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <processGetLinkKey+0xe4>)
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be6:	f107 0208 	add.w	r2, r7, #8
 8002bea:	4610      	mov	r0, r2
 8002bec:	4798      	blx	r3
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3734      	adds	r7, #52	; 0x34
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000528 	.word	0x20000528
 8002bfc:	0800d74c 	.word	0x0800d74c

08002c00 <processNwkAddrRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	b0ad      	sub	sp, #180	; 0xb4
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkAddrRsp)
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <processNwkAddrRsp+0x178>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ad 	beq.w	8002d70 <processNwkAddrRsp+0x170>
	{
		uint8_t msgIdx = 2;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		NwkAddrRspFormat_t rsp;
		if (rpcLen < 13)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d802      	bhi.n	8002c28 <processNwkAddrRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002c22:	4856      	ldr	r0, [pc, #344]	; (8002d7c <processNwkAddrRsp+0x17c>)
 8002c24:	f008 fcfa 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002c28:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8002c4e:	e029      	b.n	8002ca4 <processNwkAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8002c50:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8002c6c:	00c9      	lsls	r1, r1, #3
 8002c6e:	f1a1 0620 	sub.w	r6, r1, #32
 8002c72:	f1c1 0020 	rsb	r0, r1, #32
 8002c76:	fa03 f501 	lsl.w	r5, r3, r1
 8002c7a:	fa02 f606 	lsl.w	r6, r2, r6
 8002c7e:	4335      	orrs	r5, r6
 8002c80:	fa22 f000 	lsr.w	r0, r2, r0
 8002c84:	4305      	orrs	r5, r0
 8002c86:	fa02 f401 	lsl.w	r4, r2, r1
 8002c8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c8e:	ea40 0204 	orr.w	r2, r0, r4
 8002c92:	ea41 0305 	orr.w	r3, r1, r5
 8002c96:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8002c9a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8002ca4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	d9d1      	bls.n	8002c50 <processNwkAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002cac:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	440b      	add	r3, r1
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8002cd0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8002cda:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8002cee:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	76fb      	strb	r3, [r7, #27]
		if (rpcLen > 13)
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	2b0d      	cmp	r3, #13
 8002d06:	d92d      	bls.n	8002d64 <processNwkAddrRsp+0x164>
		{
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d0e:	e023      	b.n	8002d58 <processNwkAddrRsp+0x158>
			{
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8002d10:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002d20:	3301      	adds	r3, #1
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	440b      	add	r3, r1
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d36:	3308      	adds	r3, #8
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002d3e:	440b      	add	r3, r1
 8002d40:	f823 2ca4 	strh.w	r2, [r3, #-164]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8002d44:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++)
 8002d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d52:	3301      	adds	r3, #1
 8002d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d58:	7efb      	ldrb	r3, [r7, #27]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d3d5      	bcc.n	8002d10 <processNwkAddrRsp+0x110>
			}
		}
		mtZdoCbs.pfnZdoNwkAddrRsp(&rsp);
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <processNwkAddrRsp+0x178>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4798      	blx	r3
	}
}
 8002d70:	bf00      	nop
 8002d72:	37b4      	adds	r7, #180	; 0xb4
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d78:	20000528 	.word	0x20000528
 8002d7c:	0800d74c 	.word	0x0800d74c

08002d80 <processIeeeAddrRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processIeeeAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	b0ad      	sub	sp, #180	; 0xb4
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoIeeeAddrRsp)
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <processIeeeAddrRsp+0x188>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80b4 	beq.w	8002efe <processIeeeAddrRsp+0x17e>
	{
		uint8_t msgIdx = 2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		IeeeAddrRspFormat_t rsp;
		if (rpcLen < 13)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d802      	bhi.n	8002da8 <processIeeeAddrRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002da2:	485a      	ldr	r0, [pc, #360]	; (8002f0c <processIeeeAddrRsp+0x18c>)
 8002da4:	f008 fc3a 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002da8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8002dce:	e029      	b.n	8002e24 <processIeeeAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8002dd0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8002dec:	00c9      	lsls	r1, r1, #3
 8002dee:	f1a1 0620 	sub.w	r6, r1, #32
 8002df2:	f1c1 0020 	rsb	r0, r1, #32
 8002df6:	fa03 f501 	lsl.w	r5, r3, r1
 8002dfa:	fa02 f606 	lsl.w	r6, r2, r6
 8002dfe:	4335      	orrs	r5, r6
 8002e00:	fa22 f000 	lsr.w	r0, r2, r0
 8002e04:	4305      	orrs	r5, r0
 8002e06:	fa02 f401 	lsl.w	r4, r2, r1
 8002e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e0e:	ea40 0204 	orr.w	r2, r0, r4
 8002e12:	ea41 0305 	orr.w	r3, r1, r5
 8002e16:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8002e1a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8002e24:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	d9d1      	bls.n	8002dd0 <processIeeeAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002e2c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	440b      	add	r3, r1
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8002e50:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e54:	3302      	adds	r3, #2
 8002e56:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8002e5a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8002e6e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	76fb      	strb	r3, [r7, #27]
		rsp.StartIndex = (rsp.NumAssocDev == 0 ? 0 : rsp.StartIndex);
 8002e82:	7efb      	ldrb	r3, [r7, #27]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <processIeeeAddrRsp+0x10c>
 8002e88:	7ebb      	ldrb	r3, [r7, #26]
 8002e8a:	e000      	b.n	8002e8e <processIeeeAddrRsp+0x10e>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	76bb      	strb	r3, [r7, #26]
		if (rpcLen > 13)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	2b0d      	cmp	r3, #13
 8002e94:	d92d      	bls.n	8002ef2 <processIeeeAddrRsp+0x172>
		{
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e9c:	e023      	b.n	8002ee6 <processIeeeAddrRsp+0x166>
			{
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8002e9e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002eae:	3301      	adds	r3, #1
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	440b      	add	r3, r1
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002ecc:	440b      	add	r3, r1
 8002ece:	f823 2ca4 	strh.w	r2, [r3, #-164]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8002ed2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++)
 8002edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ee6:	7efb      	ldrb	r3, [r7, #27]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3d5      	bcc.n	8002e9e <processIeeeAddrRsp+0x11e>
			}
		}
		mtZdoCbs.pfnZdoIeeeAddrRsp(&rsp);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <processIeeeAddrRsp+0x188>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	4610      	mov	r0, r2
 8002efc:	4798      	blx	r3
	}
}
 8002efe:	bf00      	nop
 8002f00:	37b4      	adds	r7, #180	; 0xb4
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000528 	.word	0x20000528
 8002f0c:	0800d74c 	.word	0x0800d74c

08002f10 <processNodeDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNodeDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNodeDescRsp)
 8002f1c:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <processNodeDescRsp+0x180>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b0 	beq.w	8003086 <processNodeDescRsp+0x176>
	{
		uint8_t msgIdx = 2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
		NodeDescRspFormat_t rsp;
		if (rpcLen < 18)
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	2b11      	cmp	r3, #17
 8002f2e:	d802      	bhi.n	8002f36 <processNodeDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002f30:	4858      	ldr	r0, [pc, #352]	; (8003094 <processNodeDescRsp+0x184>)
 8002f32:	f008 fb73 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	3301      	adds	r3, #1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	440b      	add	r3, r1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	77fb      	strb	r3, [r7, #31]
		rsp.Status = rpcBuff[msgIdx++];
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	77fa      	strb	r2, [r7, #31]
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002f6c:	7ffb      	ldrb	r3, [r7, #31]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	440b      	add	r3, r1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
 8002f8e:	3302      	adds	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
		rsp.LoTy_ComDescAv_UsrDesAv = rpcBuff[msgIdx++];
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	77fa      	strb	r2, [r7, #31]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	73bb      	strb	r3, [r7, #14]
		rsp.APSFlg_FrqBnd = rpcBuff[msgIdx++];
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	77fa      	strb	r2, [r7, #31]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	73fb      	strb	r3, [r7, #15]
		rsp.MACCapFlg = rpcBuff[msgIdx++];
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	77fa      	strb	r2, [r7, #31]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	743b      	strb	r3, [r7, #16]
		rsp.ManufacturerCode = BUILD_UINT16(rpcBuff[msgIdx],
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	827b      	strh	r3, [r7, #18]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	77fb      	strb	r3, [r7, #31]
		rsp.MaxBufferSize = rpcBuff[msgIdx++];
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	77fa      	strb	r2, [r7, #31]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	753b      	strb	r3, [r7, #20]
		rsp.MaxTransferSize = BUILD_UINT16(rpcBuff[msgIdx],
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b29a      	uxth	r2, r3
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	3301      	adds	r3, #1
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	440b      	add	r3, r1
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	4413      	add	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	82fb      	strh	r3, [r7, #22]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 8003018:	7ffb      	ldrb	r3, [r7, #31]
 800301a:	3302      	adds	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	3301      	adds	r3, #1
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	440b      	add	r3, r1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b29b      	uxth	r3, r3
 8003038:	4413      	add	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800303e:	7ffb      	ldrb	r3, [r7, #31]
 8003040:	3302      	adds	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
		rsp.MaxOutTransferSize = BUILD_UINT16(rpcBuff[msgIdx],
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	3301      	adds	r3, #1
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	440b      	add	r3, r1
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	4413      	add	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	837b      	strh	r3, [r7, #26]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	3302      	adds	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
		rsp.DescriptorCapabilities = rpcBuff[msgIdx++];
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	77fa      	strb	r2, [r7, #31]
 8003070:	461a      	mov	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	773b      	strb	r3, [r7, #28]

		mtZdoCbs.pfnZdoNodeDescRsp(&rsp);
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <processNodeDescRsp+0x180>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f107 0208 	add.w	r2, r7, #8
 8003082:	4610      	mov	r0, r2
 8003084:	4798      	blx	r3
	}
}
 8003086:	bf00      	nop
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000528 	.word	0x20000528
 8003094:	0800d74c 	.word	0x0800d74c

08003098 <processPowerDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processPowerDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoPowerDescRsp)
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <processPowerDescRsp+0xb4>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04b      	beq.n	8003144 <processPowerDescRsp+0xac>
	{
		uint8_t msgIdx = 2;
 80030ac:	2302      	movs	r3, #2
 80030ae:	75fb      	strb	r3, [r7, #23]
		PowerDescRspFormat_t rsp;
		if (rpcLen < 7)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d802      	bhi.n	80030bc <processPowerDescRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80030b6:	4826      	ldr	r0, [pc, #152]	; (8003150 <processPowerDescRsp+0xb8>)
 80030b8:	f008 fab0 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	3301      	adds	r3, #1
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	440b      	add	r3, r1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	3302      	adds	r3, #2
 80030e0:	75fb      	strb	r3, [r7, #23]
		rsp.Status = rpcBuff[msgIdx++];
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	75fa      	strb	r2, [r7, #23]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	3301      	adds	r3, #1
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	440b      	add	r3, r1
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	b29b      	uxth	r3, r3
 800310c:	4413      	add	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	3302      	adds	r3, #2
 8003116:	75fb      	strb	r3, [r7, #23]
		rsp.CurrntPwrMode_AvalPwrSrcs = rpcBuff[msgIdx++];
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	75fa      	strb	r2, [r7, #23]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	74bb      	strb	r3, [r7, #18]
		rsp.CurrntPwrSrc_CurrntPwrSrcLvl = rpcBuff[msgIdx++];
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	75fa      	strb	r2, [r7, #23]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	74fb      	strb	r3, [r7, #19]

		mtZdoCbs.pfnZdoPowerDescRsp(&rsp);
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <processPowerDescRsp+0xb4>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f107 020c 	add.w	r2, r7, #12
 8003140:	4610      	mov	r0, r2
 8003142:	4798      	blx	r3
	}
}
 8003144:	bf00      	nop
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000528 	.word	0x20000528
 8003150:	0800d74c 	.word	0x0800d74c

08003154 <processSimpleDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSimpleDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b098      	sub	sp, #96	; 0x60
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoSimpleDescRsp)
 8003160:	4b83      	ldr	r3, [pc, #524]	; (8003370 <processSimpleDescRsp+0x21c>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80ff 	beq.w	8003368 <processSimpleDescRsp+0x214>
	{
		uint8_t msgIdx = 2;
 800316a:	2302      	movs	r3, #2
 800316c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		SimpleDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d802      	bhi.n	800317c <processSimpleDescRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003176:	487f      	ldr	r0, [pc, #508]	; (8003374 <processSimpleDescRsp+0x220>)
 8003178:	f008 fa50 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800317c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b29a      	uxth	r2, r3
 8003188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800318c:	3301      	adds	r3, #1
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	440b      	add	r3, r1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	4413      	add	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80031a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031a4:	3302      	adds	r3, #2
 80031a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Status = rpcBuff[msgIdx++];
 80031aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80031be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031ce:	3301      	adds	r3, #1
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	440b      	add	r3, r1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4413      	add	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80031e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031e6:	3302      	adds	r3, #2
 80031e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Len = rpcBuff[msgIdx++];
 80031ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 6)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b06      	cmp	r3, #6
 8003204:	f240 80aa 	bls.w	800335c <processSimpleDescRsp+0x208>
		{
			rsp.Endpoint = rpcBuff[msgIdx++];
 8003208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	73fb      	strb	r3, [r7, #15]
			rsp.ProfileID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800321c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b29a      	uxth	r2, r3
 8003228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800322c:	3301      	adds	r3, #1
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	440b      	add	r3, r1
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	4413      	add	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	823b      	strh	r3, [r7, #16]
			msgIdx += 2;
 8003240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003244:	3302      	adds	r3, #2
 8003246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800324a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b29a      	uxth	r2, r3
 8003256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800325a:	3301      	adds	r3, #1
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	440b      	add	r3, r1
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	4413      	add	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	827b      	strh	r3, [r7, #18]
			msgIdx += 2;
 800326e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003272:	3302      	adds	r3, #2
 8003274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceVersion = rpcBuff[msgIdx++];
 8003278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	753b      	strb	r3, [r7, #20]
			rsp.NumInClusters = rpcBuff[msgIdx++];
 800328c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	757b      	strb	r3, [r7, #21]
			uint32_t i;
			for (i = 0; i < rsp.NumInClusters; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80032a4:	e020      	b.n	80032e8 <processSimpleDescRsp+0x194>
			{
				rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 80032a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032b6:	3301      	adds	r3, #1
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	440b      	add	r3, r1
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ca:	3304      	adds	r3, #4
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80032d2:	440b      	add	r3, r1
 80032d4:	f823 2c52 	strh.w	r2, [r3, #-82]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 80032d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032dc:	3302      	adds	r3, #2
 80032de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumInClusters; i++)
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	3301      	adds	r3, #1
 80032e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032e8:	7d7b      	ldrb	r3, [r7, #21]
 80032ea:	461a      	mov	r2, r3
 80032ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d3d9      	bcc.n	80032a6 <processSimpleDescRsp+0x152>
			}
			rsp.NumOutClusters = rpcBuff[msgIdx++];
 80032f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for (i = 0; i < rsp.NumOutClusters; i++)
 8003308:	2300      	movs	r3, #0
 800330a:	65bb      	str	r3, [r7, #88]	; 0x58
 800330c:	e020      	b.n	8003350 <processSimpleDescRsp+0x1fc>
			{
				rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 800330e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b29a      	uxth	r2, r3
 800331a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800331e:	3301      	adds	r3, #1
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	440b      	add	r3, r1
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	b29b      	uxth	r3, r3
 800332c:	4413      	add	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003332:	3318      	adds	r3, #24
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800333a:	440b      	add	r3, r1
 800333c:	f823 2c58 	strh.w	r2, [r3, #-88]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8003340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003344:	3302      	adds	r3, #2
 8003346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumOutClusters; i++)
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	3301      	adds	r3, #1
 800334e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003350:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003354:	461a      	mov	r2, r3
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	4293      	cmp	r3, r2
 800335a:	d3d8      	bcc.n	800330e <processSimpleDescRsp+0x1ba>
			}
		}
		mtZdoCbs.pfnZdoSimpleDescRsp(&rsp);
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <processSimpleDescRsp+0x21c>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f107 0208 	add.w	r2, r7, #8
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
	}
}
 8003368:	bf00      	nop
 800336a:	3760      	adds	r7, #96	; 0x60
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000528 	.word	0x20000528
 8003374:	0800d74c 	.word	0x0800d74c

08003378 <processActiveEpRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processActiveEpRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b09a      	sub	sp, #104	; 0x68
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoActiveEpRsp)
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <processActiveEpRsp+0xf8>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d06d      	beq.n	8003468 <processActiveEpRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 800338c:	2302      	movs	r3, #2
 800338e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ActiveEpRspFormat_t rsp;
		if (rpcLen < 6)
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d802      	bhi.n	800339e <processActiveEpRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003398:	4836      	ldr	r0, [pc, #216]	; (8003474 <processActiveEpRsp+0xfc>)
 800339a:	f008 f93f 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800339e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033ae:	3301      	adds	r3, #1
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	440b      	add	r3, r1
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4413      	add	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80033c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033c6:	3302      	adds	r3, #2
 80033c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 80033cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80033e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033f0:	3301      	adds	r3, #1
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	440b      	add	r3, r1
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	4413      	add	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003408:	3302      	adds	r3, #2
 800340a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ActiveEPCount = rpcBuff[msgIdx++];
 800340e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d919      	bls.n	800345c <processActiveEpRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.ActiveEPCount; i++)
 8003428:	2300      	movs	r3, #0
 800342a:	663b      	str	r3, [r7, #96]	; 0x60
 800342c:	e011      	b.n	8003452 <processActiveEpRsp+0xda>
			{
				rsp.ActiveEPList[i] = rpcBuff[msgIdx++];
 800342e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	7819      	ldrb	r1, [r3, #0]
 8003440:	f107 0213 	add.w	r2, r7, #19
 8003444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003446:	4413      	add	r3, r2
 8003448:	460a      	mov	r2, r1
 800344a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ActiveEPCount; i++)
 800344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344e:	3301      	adds	r3, #1
 8003450:	663b      	str	r3, [r7, #96]	; 0x60
 8003452:	7cbb      	ldrb	r3, [r7, #18]
 8003454:	461a      	mov	r2, r3
 8003456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003458:	4293      	cmp	r3, r2
 800345a:	d3e8      	bcc.n	800342e <processActiveEpRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoActiveEpRsp(&rsp);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <processActiveEpRsp+0xf8>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f107 020c 	add.w	r2, r7, #12
 8003464:	4610      	mov	r0, r2
 8003466:	4798      	blx	r3
	}
}
 8003468:	bf00      	nop
 800346a:	3768      	adds	r7, #104	; 0x68
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000528 	.word	0x20000528
 8003474:	0800d74c 	.word	0x0800d74c

08003478 <processMatchDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b09a      	sub	sp, #104	; 0x68
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRsp)
 8003484:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <processMatchDescRsp+0xf8>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d06d      	beq.n	8003568 <processMatchDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 800348c:	2302      	movs	r3, #2
 800348e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		MatchDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2b05      	cmp	r3, #5
 8003496:	d802      	bhi.n	800349e <processMatchDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003498:	4836      	ldr	r0, [pc, #216]	; (8003574 <processMatchDescRsp+0xfc>)
 800349a:	f008 f8bf 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800349e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034ae:	3301      	adds	r3, #1
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	440b      	add	r3, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4413      	add	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80034c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034c6:	3302      	adds	r3, #2
 80034c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 80034cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80034e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034f0:	3301      	adds	r3, #1
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	440b      	add	r3, r1
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4413      	add	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003508:	3302      	adds	r3, #2
 800350a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.MatchLength = rpcBuff[msgIdx++];
 800350e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003518:	461a      	mov	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d919      	bls.n	800355c <processMatchDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.MatchLength; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	663b      	str	r3, [r7, #96]	; 0x60
 800352c:	e011      	b.n	8003552 <processMatchDescRsp+0xda>
			{
				rsp.MatchList[i] = rpcBuff[msgIdx++];
 800352e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	7819      	ldrb	r1, [r3, #0]
 8003540:	f107 0213 	add.w	r2, r7, #19
 8003544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003546:	4413      	add	r3, r2
 8003548:	460a      	mov	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.MatchLength; i++)
 800354c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354e:	3301      	adds	r3, #1
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
 8003552:	7cbb      	ldrb	r3, [r7, #18]
 8003554:	461a      	mov	r2, r3
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	4293      	cmp	r3, r2
 800355a:	d3e8      	bcc.n	800352e <processMatchDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoMatchDescRsp(&rsp);
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <processMatchDescRsp+0xf8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f107 020c 	add.w	r2, r7, #12
 8003564:	4610      	mov	r0, r2
 8003566:	4798      	blx	r3
	}
}
 8003568:	bf00      	nop
 800356a:	3768      	adds	r7, #104	; 0x68
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000528 	.word	0x20000528
 8003574:	0800d74c 	.word	0x0800d74c

08003578 <processComplexDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processComplexDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b09a      	sub	sp, #104	; 0x68
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoComplexDescRsp)
 8003584:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <processComplexDescRsp+0xf8>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d06d      	beq.n	8003668 <processComplexDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 800358c:	2302      	movs	r3, #2
 800358e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ComplexDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d802      	bhi.n	800359e <processComplexDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003598:	4836      	ldr	r0, [pc, #216]	; (8003674 <processComplexDescRsp+0xfc>)
 800359a:	f008 f83f 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800359e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035ae:	3301      	adds	r3, #1
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	440b      	add	r3, r1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4413      	add	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80035c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035c6:	3302      	adds	r3, #2
 80035c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 80035cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80035e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035f0:	3301      	adds	r3, #1
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	440b      	add	r3, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4413      	add	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003608:	3302      	adds	r3, #2
 800360a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ComplexLength = rpcBuff[msgIdx++];
 800360e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d919      	bls.n	800365c <processComplexDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.ComplexLength; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	663b      	str	r3, [r7, #96]	; 0x60
 800362c:	e011      	b.n	8003652 <processComplexDescRsp+0xda>
			{
				rsp.ComplexList[i] = rpcBuff[msgIdx++];
 800362e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	7819      	ldrb	r1, [r3, #0]
 8003640:	f107 0213 	add.w	r2, r7, #19
 8003644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003646:	4413      	add	r3, r2
 8003648:	460a      	mov	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ComplexLength; i++)
 800364c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364e:	3301      	adds	r3, #1
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
 8003652:	7cbb      	ldrb	r3, [r7, #18]
 8003654:	461a      	mov	r2, r3
 8003656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003658:	4293      	cmp	r3, r2
 800365a:	d3e8      	bcc.n	800362e <processComplexDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoComplexDescRsp(&rsp);
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <processComplexDescRsp+0xf8>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f107 020c 	add.w	r2, r7, #12
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
	}
}
 8003668:	bf00      	nop
 800366a:	3768      	adds	r7, #104	; 0x68
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000528 	.word	0x20000528
 8003674:	0800d74c 	.word	0x0800d74c

08003678 <processUserDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b09a      	sub	sp, #104	; 0x68
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescRsp)
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <processUserDescRsp+0xf8>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d06d      	beq.n	8003768 <processUserDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 800368c:	2302      	movs	r3, #2
 800368e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		UserDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d802      	bhi.n	800369e <processUserDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003698:	4836      	ldr	r0, [pc, #216]	; (8003774 <processUserDescRsp+0xfc>)
 800369a:	f007 ffbf 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800369e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036ae:	3301      	adds	r3, #1
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	440b      	add	r3, r1
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80036c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036c6:	3302      	adds	r3, #2
 80036c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 80036cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80036e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036f0:	3301      	adds	r3, #1
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	440b      	add	r3, r1
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4413      	add	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003704:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003708:	3302      	adds	r3, #2
 800370a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Len = rpcBuff[msgIdx++];
 800370e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d919      	bls.n	800375c <processUserDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	663b      	str	r3, [r7, #96]	; 0x60
 800372c:	e011      	b.n	8003752 <processUserDescRsp+0xda>
			{
				rsp.CUserDescriptor[i] = rpcBuff[msgIdx++];
 800372e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	7819      	ldrb	r1, [r3, #0]
 8003740:	f107 0213 	add.w	r2, r7, #19
 8003744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003746:	4413      	add	r3, r2
 8003748:	460a      	mov	r2, r1
 800374a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 800374c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800374e:	3301      	adds	r3, #1
 8003750:	663b      	str	r3, [r7, #96]	; 0x60
 8003752:	7cbb      	ldrb	r3, [r7, #18]
 8003754:	461a      	mov	r2, r3
 8003756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003758:	4293      	cmp	r3, r2
 800375a:	d3e8      	bcc.n	800372e <processUserDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoUserDescRsp(&rsp);
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <processUserDescRsp+0xf8>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f107 020c 	add.w	r2, r7, #12
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
	}
}
 8003768:	bf00      	nop
 800376a:	3768      	adds	r7, #104	; 0x68
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000528 	.word	0x20000528
 8003774:	0800d74c 	.word	0x0800d74c

08003778 <processUserDescConf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescConf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescConf)
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <processUserDescConf+0x94>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03b      	beq.n	8003804 <processUserDescConf+0x8c>
	{
		uint8_t msgIdx = 2;
 800378c:	2302      	movs	r3, #2
 800378e:	73fb      	strb	r3, [r7, #15]
		UserDescConfFormat_t rsp;
		if (rpcLen < 5)
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d802      	bhi.n	800379c <processUserDescConf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003796:	481e      	ldr	r0, [pc, #120]	; (8003810 <processUserDescConf+0x98>)
 8003798:	f007 ff40 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	3301      	adds	r3, #1
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	440b      	add	r3, r1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3302      	adds	r3, #2
 80037c0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	73fa      	strb	r2, [r7, #15]
 80037c8:	461a      	mov	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	3301      	adds	r3, #1
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	440b      	add	r3, r1
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	3302      	adds	r3, #2
 80037f6:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoUserDescConf(&rsp);
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <processUserDescConf+0x94>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f107 0208 	add.w	r2, r7, #8
 8003800:	4610      	mov	r0, r2
 8003802:	4798      	blx	r3
	}
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000528 	.word	0x20000528
 8003810:	0800d74c 	.word	0x0800d74c

08003814 <processServerDiscRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processServerDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoServerDiscRsp)
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <processServerDiscRsp+0x94>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03b      	beq.n	80038a0 <processServerDiscRsp+0x8c>
	{
		uint8_t msgIdx = 2;
 8003828:	2302      	movs	r3, #2
 800382a:	73fb      	strb	r3, [r7, #15]
		ServerDiscRspFormat_t rsp;
		if (rpcLen < 5)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d802      	bhi.n	8003838 <processServerDiscRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003832:	481e      	ldr	r0, [pc, #120]	; (80038ac <processServerDiscRsp+0x98>)
 8003834:	f007 fef2 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	3301      	adds	r3, #1
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	440b      	add	r3, r1
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	b29b      	uxth	r3, r3
 8003852:	4413      	add	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	3302      	adds	r3, #2
 800385c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	73fa      	strb	r2, [r7, #15]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	72bb      	strb	r3, [r7, #10]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3301      	adds	r3, #1
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	440b      	add	r3, r1
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b29b      	uxth	r3, r3
 8003888:	4413      	add	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	3302      	adds	r3, #2
 8003892:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoServerDiscRsp(&rsp);
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <processServerDiscRsp+0x94>)
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	f107 0208 	add.w	r2, r7, #8
 800389c:	4610      	mov	r0, r2
 800389e:	4798      	blx	r3
	}
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000528 	.word	0x20000528
 80038ac:	0800d74c 	.word	0x0800d74c

080038b0 <processEndDeviceBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceBindRsp)
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <processEndDeviceBindRsp+0x70>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d028      	beq.n	8003916 <processEndDeviceBindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 80038c4:	2302      	movs	r3, #2
 80038c6:	73fb      	strb	r3, [r7, #15]
		EndDeviceBindRspFormat_t rsp;
		if (rpcLen < 3)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d802      	bhi.n	80038d4 <processEndDeviceBindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80038ce:	4815      	ldr	r0, [pc, #84]	; (8003924 <processEndDeviceBindRsp+0x74>)
 80038d0:	f007 fea4 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	440b      	add	r3, r1
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	3302      	adds	r3, #2
 80038f8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	73fa      	strb	r2, [r7, #15]
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoEndDeviceBindRsp(&rsp);
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <processEndDeviceBindRsp+0x70>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f107 0208 	add.w	r2, r7, #8
 8003912:	4610      	mov	r0, r2
 8003914:	4798      	blx	r3
	}
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000528 	.word	0x20000528
 8003924:	0800d74c 	.word	0x0800d74c

08003928 <processBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoBindRsp)
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <processBindRsp+0x70>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d028      	beq.n	800398e <processBindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 800393c:	2302      	movs	r3, #2
 800393e:	73fb      	strb	r3, [r7, #15]
		BindRspFormat_t rsp;
		if (rpcLen < 3)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d802      	bhi.n	800394c <processBindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003946:	4815      	ldr	r0, [pc, #84]	; (800399c <processBindRsp+0x74>)
 8003948:	f007 fe68 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b29a      	uxth	r2, r3
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3301      	adds	r3, #1
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	440b      	add	r3, r1
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	b29b      	uxth	r3, r3
 8003966:	4413      	add	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	3302      	adds	r3, #2
 8003970:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	73fa      	strb	r2, [r7, #15]
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoBindRsp(&rsp);
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <processBindRsp+0x70>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f107 0208 	add.w	r2, r7, #8
 800398a:	4610      	mov	r0, r2
 800398c:	4798      	blx	r3
	}
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000528 	.word	0x20000528
 800399c:	0800d74c 	.word	0x0800d74c

080039a0 <processUnbindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUnbindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUnbindRsp)
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <processUnbindRsp+0x70>)
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <processUnbindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 80039b4:	2302      	movs	r3, #2
 80039b6:	73fb      	strb	r3, [r7, #15]
		UnbindRspFormat_t rsp;
		if (rpcLen < 3)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d802      	bhi.n	80039c4 <processUnbindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80039be:	4815      	ldr	r0, [pc, #84]	; (8003a14 <processUnbindRsp+0x74>)
 80039c0:	f007 fe2c 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3301      	adds	r3, #1
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	440b      	add	r3, r1
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4413      	add	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	3302      	adds	r3, #2
 80039e8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	73fa      	strb	r2, [r7, #15]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoUnbindRsp(&rsp);
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <processUnbindRsp+0x70>)
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	f107 0208 	add.w	r2, r7, #8
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
	}
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000528 	.word	0x20000528
 8003a14:	0800d74c 	.word	0x0800d74c

08003a18 <processMgmtNwkDiscRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtNwkDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	6018      	str	r0, [r3, #0]
 8003a24:	460a      	mov	r2, r1
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtNwkDiscRsp)
 8003a2a:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <processMgmtNwkDiscRsp+0x250>)
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8114 	beq.w	8003c5c <processMgmtNwkDiscRsp+0x244>
	{
		uint8_t msgIdx = 2;
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		MgmtNwkDiscRspFormat_t rsp;
		if (rpcLen < 6)
 8003a3a:	1cfb      	adds	r3, r7, #3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d802      	bhi.n	8003a48 <processMgmtNwkDiscRsp+0x30>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003a42:	488a      	ldr	r0, [pc, #552]	; (8003c6c <processMgmtNwkDiscRsp+0x254>)
 8003a44:	f007 fdea 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003a48:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003a4c:	1d3a      	adds	r2, r7, #4
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	1d39      	adds	r1, r7, #4
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	440b      	add	r3, r1
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	f107 0308 	add.w	r3, r7, #8
 8003a72:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8003a74:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003a78:	3302      	adds	r3, #2
 8003a7a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		rsp.Status = rpcBuff[msgIdx++];
 8003a7e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003a88:	461a      	mov	r2, r3
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	709a      	strb	r2, [r3, #2]
		rsp.NetworkCount = rpcBuff[msgIdx++];
 8003a98:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	f107 0308 	add.w	r3, r7, #8
 8003ab0:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8003ab2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003abc:	461a      	mov	r2, r3
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	711a      	strb	r2, [r3, #4]
		rsp.NetworkListCount = rpcBuff[msgIdx++];
 8003acc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 8003ae6:	1cfb      	adds	r3, r7, #3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	f240 80b0 	bls.w	8003c50 <processMgmtNwkDiscRsp+0x238>
		{
			uint32_t i;
			for (i = 0; i < rsp.NetworkListCount; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8003af6:	e0a2      	b.n	8003c3e <processMgmtNwkDiscRsp+0x226>
			{
				rsp.NetworkList[i].PanID = 0;
 8003af8:	f107 0208 	add.w	r2, r7, #8
 8003afc:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4413      	add	r3, r2
 8003b04:	f103 0108 	add.w	r1, r3, #8
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003b1a:	e038      	b.n	8003b8e <processMgmtNwkDiscRsp+0x176>
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++])
 8003b1c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003b26:	461a      	mov	r2, r3
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	f04f 0300 	mov.w	r3, #0
					        << (ind * 8);
 8003b36:	f897 1497 	ldrb.w	r1, [r7, #1175]	; 0x497
 8003b3a:	00c9      	lsls	r1, r1, #3
 8003b3c:	f1a1 0620 	sub.w	r6, r1, #32
 8003b40:	f1c1 0020 	rsb	r0, r1, #32
 8003b44:	fa03 f501 	lsl.w	r5, r3, r1
 8003b48:	fa02 f606 	lsl.w	r6, r2, r6
 8003b4c:	4335      	orrs	r5, r6
 8003b4e:	fa22 f000 	lsr.w	r0, r2, r0
 8003b52:	4305      	orrs	r5, r0
 8003b54:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++])
 8003b58:	f107 0208 	add.w	r2, r7, #8
 8003b5c:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4413      	add	r3, r2
 8003b64:	3308      	adds	r3, #8
 8003b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b6a:	ea40 0204 	orr.w	r2, r0, r4
 8003b6e:	ea41 0305 	orr.w	r3, r1, r5
 8003b72:	f107 0008 	add.w	r0, r7, #8
 8003b76:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8003b7a:	0109      	lsls	r1, r1, #4
 8003b7c:	4401      	add	r1, r0
 8003b7e:	3108      	adds	r1, #8
 8003b80:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8003b84:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003b8e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	d9c2      	bls.n	8003b1c <processMgmtNwkDiscRsp+0x104>
				rsp.NetworkList[i].LogicalChannel = rpcBuff[msgIdx++];
 8003b96:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	7819      	ldrb	r1, [r3, #0]
 8003baa:	f107 0208 	add.w	r2, r7, #8
 8003bae:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	460a      	mov	r2, r1
 8003bba:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].StackProf_ZigVer = rpcBuff[msgIdx++];
 8003bbc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	7819      	ldrb	r1, [r3, #0]
 8003bd0:	f107 0208 	add.w	r2, r7, #8
 8003bd4:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003bd8:	3301      	adds	r3, #1
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	3301      	adds	r3, #1
 8003be0:	460a      	mov	r2, r1
 8003be2:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].BeacOrd_SupFramOrd = rpcBuff[msgIdx++];
 8003be4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003bee:	461a      	mov	r2, r3
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	f107 0208 	add.w	r2, r7, #8
 8003bfc:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003c00:	3301      	adds	r3, #1
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	3302      	adds	r3, #2
 8003c08:	460a      	mov	r2, r1
 8003c0a:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].PermitJoin = rpcBuff[msgIdx++];
 8003c0c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8003c16:	461a      	mov	r2, r3
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	7819      	ldrb	r1, [r3, #0]
 8003c20:	f107 0208 	add.w	r2, r7, #8
 8003c24:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003c28:	3301      	adds	r3, #1
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3303      	adds	r3, #3
 8003c30:	460a      	mov	r2, r1
 8003c32:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NetworkListCount; i++)
 8003c34:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	795b      	ldrb	r3, [r3, #5]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f4ff af54 	bcc.w	8003af8 <processMgmtNwkDiscRsp+0xe0>
			}
		}
		mtZdoCbs.pfnZdoMgmtNwkDiscRsp(&rsp);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <processMgmtNwkDiscRsp+0x250>)
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f107 0208 	add.w	r2, r7, #8
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4798      	blx	r3
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	f207 47a4 	addw	r7, r7, #1188	; 0x4a4
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000528 	.word	0x20000528
 8003c6c:	0800d74c 	.word	0x0800d74c

08003c70 <processMgmtLqiRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLqiRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c74:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	6018      	str	r0, [r3, #0]
 8003c7e:	460a      	mov	r2, r1
 8003c80:	1cfb      	adds	r3, r7, #3
 8003c82:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtLqiRsp)
 8003c84:	4b6b      	ldr	r3, [pc, #428]	; (8003e34 <processMgmtLqiRsp+0x1c4>)
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 81b3 	beq.w	8003ff4 <processMgmtLqiRsp+0x384>
	{
		uint8_t msgIdx = 2;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		MgmtLqiRspFormat_t rsp;
		if (rpcLen < 6)
 8003c94:	1cfb      	adds	r3, r7, #3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d802      	bhi.n	8003ca2 <processMgmtLqiRsp+0x32>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003c9c:	4866      	ldr	r0, [pc, #408]	; (8003e38 <processMgmtLqiRsp+0x1c8>)
 8003c9e:	f007 fcbd 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003ca2:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003ca6:	1d3a      	adds	r2, r7, #4
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	1d39      	adds	r1, r7, #4
 8003cb8:	6809      	ldr	r1, [r1, #0]
 8003cba:	440b      	add	r3, r1
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8003cce:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		rsp.Status = rpcBuff[msgIdx++];
 8003cd8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	709a      	strb	r2, [r3, #2]
		rsp.NeighborTableEntries = rpcBuff[msgIdx++];
 8003cf2:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8003d0c:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003d16:	461a      	mov	r2, r3
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	781a      	ldrb	r2, [r3, #0]
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	711a      	strb	r2, [r3, #4]
		rsp.NeighborLqiListCount = rpcBuff[msgIdx++];
 8003d26:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003d30:	461a      	mov	r2, r3
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 8003d40:	1cfb      	adds	r3, r7, #3
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	f240 814c 	bls.w	8003fe2 <processMgmtLqiRsp+0x372>
		{
			uint32_t i;
			for (i = 0; i < rsp.NeighborLqiListCount; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8003d50:	e13e      	b.n	8003fd0 <processMgmtLqiRsp+0x360>
			{

				rsp.NeighborLqiList[i].ExtendedPanID = 0;
 8003d52:	f107 0108 	add.w	r1, r7, #8
 8003d56:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	440b      	add	r3, r1
 8003d64:	f103 0108 	add.w	r1, r3, #8
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8003d7a:	e042      	b.n	8003e02 <processMgmtLqiRsp+0x192>
					rsp.NeighborLqiList[i].ExtendedPanID |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8003d7c:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003d86:	461a      	mov	r2, r3
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 8003d9a:	00c9      	lsls	r1, r1, #3
 8003d9c:	f1a1 0620 	sub.w	r6, r1, #32
 8003da0:	f1c1 0020 	rsb	r0, r1, #32
 8003da4:	fa03 f901 	lsl.w	r9, r3, r1
 8003da8:	fa02 f606 	lsl.w	r6, r2, r6
 8003dac:	ea49 0906 	orr.w	r9, r9, r6
 8003db0:	fa22 f000 	lsr.w	r0, r2, r0
 8003db4:	ea49 0900 	orr.w	r9, r9, r0
 8003db8:	fa02 f801 	lsl.w	r8, r2, r1
					rsp.NeighborLqiList[i].ExtendedPanID |=
 8003dbc:	f107 0108 	add.w	r1, r7, #8
 8003dc0:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	440b      	add	r3, r1
 8003dce:	3308      	adds	r3, #8
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	ea48 0002 	orr.w	r0, r8, r2
 8003dd8:	ea49 0103 	orr.w	r1, r9, r3
 8003ddc:	460a      	mov	r2, r1
 8003dde:	4601      	mov	r1, r0
 8003de0:	f107 0608 	add.w	r6, r7, #8
 8003de4:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8003de8:	4603      	mov	r3, r0
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4403      	add	r3, r0
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4433      	add	r3, r6
 8003df2:	3308      	adds	r3, #8
 8003df4:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8003df8:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8003e02:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8003e06:	2b07      	cmp	r3, #7
 8003e08:	d9b8      	bls.n	8003d7c <processMgmtLqiRsp+0x10c>
				rsp.NeighborLqiList[i].ExtendedAddress = 0;
 8003e0a:	f107 0108 	add.w	r1, r7, #8
 8003e0e:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f103 0110 	add.w	r1, r3, #16
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8003e32:	e044      	b.n	8003ebe <processMgmtLqiRsp+0x24e>
 8003e34:	20000528 	.word	0x20000528
 8003e38:	0800d74c 	.word	0x0800d74c
					rsp.NeighborLqiList[i].ExtendedAddress |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8003e3c:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003e46:	461a      	mov	r2, r3
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 8003e5a:	00c9      	lsls	r1, r1, #3
 8003e5c:	f1a1 0620 	sub.w	r6, r1, #32
 8003e60:	f1c1 0020 	rsb	r0, r1, #32
 8003e64:	fa03 f501 	lsl.w	r5, r3, r1
 8003e68:	fa02 f606 	lsl.w	r6, r2, r6
 8003e6c:	4335      	orrs	r5, r6
 8003e6e:	fa22 f000 	lsr.w	r0, r2, r0
 8003e72:	4305      	orrs	r5, r0
 8003e74:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.NeighborLqiList[i].ExtendedAddress |=
 8003e78:	f107 0108 	add.w	r1, r7, #8
 8003e7c:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3310      	adds	r3, #16
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	ea44 0002 	orr.w	r0, r4, r2
 8003e94:	ea45 0103 	orr.w	r1, r5, r3
 8003e98:	460a      	mov	r2, r1
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	f107 0608 	add.w	r6, r7, #8
 8003ea0:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4403      	add	r3, r0
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4433      	add	r3, r6
 8003eae:	3310      	adds	r3, #16
 8003eb0:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8003eb4:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8003ebe:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8003ec2:	2b07      	cmp	r3, #7
 8003ec4:	d9ba      	bls.n	8003e3c <processMgmtLqiRsp+0x1cc>
				rsp.NeighborLqiList[i].NetworkAddress = BUILD_UINT16(
 8003ec6:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003eca:	1d3a      	adds	r2, r7, #4
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003ed8:	3301      	adds	r3, #1
 8003eda:	1d39      	adds	r1, r7, #4
 8003edc:	6809      	ldr	r1, [r1, #0]
 8003ede:	440b      	add	r3, r1
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	b298      	uxth	r0, r3
 8003eec:	f107 0108 	add.w	r1, r7, #8
 8003ef0:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	4602      	mov	r2, r0
 8003f02:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8003f04:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat =
				        rpcBuff[msgIdx++];
 8003f0e:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003f18:	461a      	mov	r2, r3
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	7818      	ldrb	r0, [r3, #0]
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat =
 8003f22:	f107 0108 	add.w	r1, r7, #8
 8003f26:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3302      	adds	r3, #2
 8003f38:	4602      	mov	r2, r0
 8003f3a:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].PermitJoining = rpcBuff[msgIdx++];
 8003f3c:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003f46:	461a      	mov	r2, r3
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	7818      	ldrb	r0, [r3, #0]
 8003f50:	f107 0108 	add.w	r1, r7, #8
 8003f54:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	3303      	adds	r3, #3
 8003f66:	4602      	mov	r2, r0
 8003f68:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].Depth = rpcBuff[msgIdx++];
 8003f6a:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003f74:	461a      	mov	r2, r3
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	7818      	ldrb	r0, [r3, #0]
 8003f7e:	f107 0108 	add.w	r1, r7, #8
 8003f82:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	3304      	adds	r3, #4
 8003f94:	4602      	mov	r2, r0
 8003f96:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].LQI = rpcBuff[msgIdx++];
 8003f98:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	7818      	ldrb	r0, [r3, #0]
 8003fac:	f107 0108 	add.w	r1, r7, #8
 8003fb0:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3305      	adds	r3, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NeighborLqiListCount; i++)
 8003fc6:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8003fd0:	f107 0308 	add.w	r3, r7, #8
 8003fd4:	795b      	ldrb	r3, [r3, #5]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f4ff aeb8 	bcc.w	8003d52 <processMgmtLqiRsp+0xe2>

			}
		}
		MgmtLqiRspFormat_t *copyy = &rsp;
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
		mtZdoCbs.pfnZdoMgmtLqiRsp(copyy);
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <processMgmtLqiRsp+0x390>)
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
 8003ff2:	4798      	blx	r3
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	f207 6754 	addw	r7, r7, #1620	; 0x654
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004000:	20000528 	.word	0x20000528

08004004 <processMgmtRtgRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtRtgRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b0f6      	sub	sp, #472	; 0x1d8
 8004008:	af00      	add	r7, sp, #0
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	6018      	str	r0, [r3, #0]
 800400e:	460a      	mov	r2, r1
 8004010:	1cfb      	adds	r3, r7, #3
 8004012:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtRtgRsp)
 8004014:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <processMgmtRtgRsp+0x1c8>)
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80d2 	beq.w	80041c2 <processMgmtRtgRsp+0x1be>
	{
		uint8_t msgIdx = 2;
 800401e:	2302      	movs	r3, #2
 8004020:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		MgmtRtgRspFormat_t rsp;
		if (rpcLen < 6)
 8004024:	1cfb      	adds	r3, r7, #3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d802      	bhi.n	8004032 <processMgmtRtgRsp+0x2e>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800402c:	4868      	ldr	r0, [pc, #416]	; (80041d0 <processMgmtRtgRsp+0x1cc>)
 800402e:	f007 faf5 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004032:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004036:	1d3a      	adds	r2, r7, #4
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	4413      	add	r3, r2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b29a      	uxth	r2, r3
 8004040:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004044:	3301      	adds	r3, #1
 8004046:	1d39      	adds	r1, r7, #4
 8004048:	6809      	ldr	r1, [r1, #0]
 800404a:	440b      	add	r3, r1
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	b29a      	uxth	r2, r3
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 800405e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004062:	3302      	adds	r3, #2
 8004064:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		rsp.Status = rpcBuff[msgIdx++];
 8004068:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8004072:	461a      	mov	r2, r3
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4413      	add	r3, r2
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	f107 0308 	add.w	r3, r7, #8
 8004080:	709a      	strb	r2, [r3, #2]
		rsp.RoutingTableEntries = rpcBuff[msgIdx++];
 8004082:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800408c:	461a      	mov	r2, r3
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4413      	add	r3, r2
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 800409c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80040a6:	461a      	mov	r2, r3
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	711a      	strb	r2, [r3, #4]
		rsp.RoutingTableListCount = rpcBuff[msgIdx++];
 80040b6:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80040c0:	461a      	mov	r2, r3
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4413      	add	r3, r2
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 80040d0:	1cfb      	adds	r3, r7, #3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d96e      	bls.n	80041b6 <processMgmtRtgRsp+0x1b2>
		{
			uint32_t i;
			for (i = 0; i < rsp.RoutingTableListCount; i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80040de:	e062      	b.n	80041a6 <processMgmtRtgRsp+0x1a2>
			{
				rsp.RoutingTableList[i].DstAddr = BUILD_UINT16(rpcBuff[msgIdx],
 80040e0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80040e4:	1d3a      	adds	r2, r7, #4
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80040f2:	3301      	adds	r3, #1
 80040f4:	1d39      	adds	r1, r7, #4
 80040f6:	6809      	ldr	r1, [r1, #0]
 80040f8:	440b      	add	r3, r1
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	4413      	add	r3, r2
 8004104:	b298      	uxth	r0, r3
 8004106:	f107 0108 	add.w	r1, r7, #8
 800410a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	440b      	add	r3, r1
 8004118:	3306      	adds	r3, #6
 800411a:	4602      	mov	r2, r0
 800411c:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 800411e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004122:	3302      	adds	r3, #2
 8004124:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
				rsp.RoutingTableList[i].Status = rpcBuff[msgIdx++];
 8004128:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8004132:	461a      	mov	r2, r3
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4413      	add	r3, r2
 800413a:	7818      	ldrb	r0, [r3, #0]
 800413c:	f107 0108 	add.w	r1, r7, #8
 8004140:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	440b      	add	r3, r1
 800414e:	3308      	adds	r3, #8
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
				rsp.RoutingTableList[i].NextHop = BUILD_UINT16(rpcBuff[msgIdx],
 8004154:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004158:	1d3a      	adds	r2, r7, #4
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b29a      	uxth	r2, r3
 8004162:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004166:	3301      	adds	r3, #1
 8004168:	1d39      	adds	r1, r7, #4
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	440b      	add	r3, r1
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	b29b      	uxth	r3, r3
 8004176:	4413      	add	r3, r2
 8004178:	b298      	uxth	r0, r3
 800417a:	f107 0108 	add.w	r1, r7, #8
 800417e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	440b      	add	r3, r1
 800418c:	330a      	adds	r3, #10
 800418e:	4602      	mov	r2, r0
 8004190:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8004192:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004196:	3302      	adds	r3, #2
 8004198:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			for (i = 0; i < rsp.RoutingTableListCount; i++)
 800419c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80041a0:	3301      	adds	r3, #1
 80041a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	795b      	ldrb	r3, [r3, #5]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d394      	bcc.n	80040e0 <processMgmtRtgRsp+0xdc>
			}
		}
		mtZdoCbs.pfnZdoMgmtRtgRsp(&rsp);
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <processMgmtRtgRsp+0x1c8>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	4610      	mov	r0, r2
 80041c0:	4798      	blx	r3
	}
}
 80041c2:	bf00      	nop
 80041c4:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000528 	.word	0x20000528
 80041d0:	0800d74c 	.word	0x0800d74c

080041d4 <processMgmtBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80041d4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80041d8:	f5ad 6d18 	sub.w	sp, sp, #2432	; 0x980
 80041dc:	af00      	add	r7, sp, #0
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	460a      	mov	r2, r1
 80041e4:	1cfb      	adds	r3, r7, #3
 80041e6:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtBindRsp)
 80041e8:	4bb6      	ldr	r3, [pc, #728]	; (80044c4 <processMgmtBindRsp+0x2f0>)
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8162 	beq.w	80044b6 <processMgmtBindRsp+0x2e2>
	{
		uint8_t msgIdx = 2;
 80041f2:	2302      	movs	r3, #2
 80041f4:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		MgmtBindRspFormat_t rsp;
		if (rpcLen < 6)
 80041f8:	1cfb      	adds	r3, r7, #3
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d802      	bhi.n	8004206 <processMgmtBindRsp+0x32>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004200:	48b1      	ldr	r0, [pc, #708]	; (80044c8 <processMgmtBindRsp+0x2f4>)
 8004202:	f007 fa0b 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004206:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800420a:	1d3a      	adds	r2, r7, #4
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b29a      	uxth	r2, r3
 8004214:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004218:	3301      	adds	r3, #1
 800421a:	1d39      	adds	r1, r7, #4
 800421c:	6809      	ldr	r1, [r1, #0]
 800421e:	440b      	add	r3, r1
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	b29b      	uxth	r3, r3
 8004228:	4413      	add	r3, r2
 800422a:	b29a      	uxth	r2, r3
 800422c:	f107 0308 	add.w	r3, r7, #8
 8004230:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8004232:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004236:	3302      	adds	r3, #2
 8004238:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		rsp.Status = rpcBuff[msgIdx++];
 800423c:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004246:	461a      	mov	r2, r3
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4413      	add	r3, r2
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	709a      	strb	r2, [r3, #2]
		rsp.BindingTableEntries = rpcBuff[msgIdx++];
 8004256:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004260:	461a      	mov	r2, r3
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4413      	add	r3, r2
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8004270:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 800427a:	461a      	mov	r2, r3
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4413      	add	r3, r2
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	f107 0308 	add.w	r3, r7, #8
 8004288:	711a      	strb	r2, [r3, #4]
		rsp.BindingTableListCount = rpcBuff[msgIdx++];
 800428a:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004294:	461a      	mov	r2, r3
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4413      	add	r3, r2
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 80042a4:	1cfb      	adds	r3, r7, #3
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b06      	cmp	r3, #6
 80042aa:	f240 80fe 	bls.w	80044aa <processMgmtBindRsp+0x2d6>
		{
			uint32_t i;
			for (i = 0; i < rsp.BindingTableListCount; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 80042b4:	e0f0      	b.n	8004498 <processMgmtBindRsp+0x2c4>
			{
				rsp.BindingTableList[i].SrcIEEEAddr = 0;
 80042b6:	f107 0208 	add.w	r2, r7, #8
 80042ba:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	4413      	add	r3, r2
 80042c2:	f103 0108 	add.w	r1, r3, #8
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t i;
				for (i = 0; i < 8; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 80042d8:	e03a      	b.n	8004350 <processMgmtBindRsp+0x17c>
					rsp.BindingTableList[i].SrcIEEEAddr |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80042da:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80042e4:	461a      	mov	r2, r3
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 80042f8:	00c9      	lsls	r1, r1, #3
 80042fa:	f1a1 0620 	sub.w	r6, r1, #32
 80042fe:	f1c1 0020 	rsb	r0, r1, #32
 8004302:	fa03 f901 	lsl.w	r9, r3, r1
 8004306:	fa02 f606 	lsl.w	r6, r2, r6
 800430a:	ea49 0906 	orr.w	r9, r9, r6
 800430e:	fa22 f000 	lsr.w	r0, r2, r0
 8004312:	ea49 0900 	orr.w	r9, r9, r0
 8004316:	fa02 f801 	lsl.w	r8, r2, r1
					rsp.BindingTableList[i].SrcIEEEAddr |=
 800431a:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800431e:	f107 0208 	add.w	r2, r7, #8
 8004322:	015b      	lsls	r3, r3, #5
 8004324:	4413      	add	r3, r2
 8004326:	3308      	adds	r3, #8
 8004328:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800432c:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 8004330:	ea4b 0208 	orr.w	r2, fp, r8
 8004334:	ea4c 0309 	orr.w	r3, ip, r9
 8004338:	f107 0008 	add.w	r0, r7, #8
 800433c:	0149      	lsls	r1, r1, #5
 800433e:	4401      	add	r1, r0
 8004340:	3108      	adds	r1, #8
 8004342:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8004346:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800434a:	3301      	adds	r3, #1
 800434c:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8004350:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004354:	2b07      	cmp	r3, #7
 8004356:	d9c0      	bls.n	80042da <processMgmtBindRsp+0x106>
				rsp.BindingTableList[i].SrcEndpoint = rpcBuff[msgIdx++];
 8004358:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004362:	461a      	mov	r2, r3
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	441a      	add	r2, r3
 800436a:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800436e:	7811      	ldrb	r1, [r2, #0]
 8004370:	f107 0208 	add.w	r2, r7, #8
 8004374:	015b      	lsls	r3, r3, #5
 8004376:	4413      	add	r3, r2
 8004378:	3310      	adds	r3, #16
 800437a:	460a      	mov	r2, r1
 800437c:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].ClusterID = rpcBuff[msgIdx++];
 800437e:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004388:	461a      	mov	r2, r3
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	441a      	add	r2, r3
 8004390:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004394:	7811      	ldrb	r1, [r2, #0]
 8004396:	f107 0208 	add.w	r2, r7, #8
 800439a:	015b      	lsls	r3, r3, #5
 800439c:	4413      	add	r3, r2
 800439e:	3311      	adds	r3, #17
 80043a0:	460a      	mov	r2, r1
 80043a2:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstAddrMode = rpcBuff[msgIdx++];
 80043a4:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80043ae:	461a      	mov	r2, r3
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	441a      	add	r2, r3
 80043b6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80043ba:	7811      	ldrb	r1, [r2, #0]
 80043bc:	f107 0208 	add.w	r2, r7, #8
 80043c0:	015b      	lsls	r3, r3, #5
 80043c2:	4413      	add	r3, r2
 80043c4:	3312      	adds	r3, #18
 80043c6:	460a      	mov	r2, r1
 80043c8:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstIEEEAddr = 0;
 80043ca:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	015b      	lsls	r3, r3, #5
 80043d4:	4413      	add	r3, r2
 80043d6:	f103 0118 	add.w	r1, r3, #24
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 80043ec:	e038      	b.n	8004460 <processMgmtBindRsp+0x28c>
					rsp.BindingTableList[i].DstIEEEAddr |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80043ee:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80043f8:	461a      	mov	r2, r3
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 800440c:	00c9      	lsls	r1, r1, #3
 800440e:	f1a1 0620 	sub.w	r6, r1, #32
 8004412:	f1c1 0020 	rsb	r0, r1, #32
 8004416:	fa03 f501 	lsl.w	r5, r3, r1
 800441a:	fa02 f606 	lsl.w	r6, r2, r6
 800441e:	4335      	orrs	r5, r6
 8004420:	fa22 f000 	lsr.w	r0, r2, r0
 8004424:	4305      	orrs	r5, r0
 8004426:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.BindingTableList[i].DstIEEEAddr |=
 800442a:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	015b      	lsls	r3, r3, #5
 8004434:	4413      	add	r3, r2
 8004436:	3318      	adds	r3, #24
 8004438:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800443c:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 8004440:	ea4b 0204 	orr.w	r2, fp, r4
 8004444:	ea4c 0305 	orr.w	r3, ip, r5
 8004448:	f107 0008 	add.w	r0, r7, #8
 800444c:	0149      	lsls	r1, r1, #5
 800444e:	4401      	add	r1, r0
 8004450:	3118      	adds	r1, #24
 8004452:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8004456:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800445a:	3301      	adds	r3, #1
 800445c:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8004460:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004464:	2b07      	cmp	r3, #7
 8004466:	d9c2      	bls.n	80043ee <processMgmtBindRsp+0x21a>
				rsp.BindingTableList[i].DstEndpoint = rpcBuff[msgIdx++];
 8004468:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004472:	461a      	mov	r2, r3
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	441a      	add	r2, r3
 800447a:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800447e:	7811      	ldrb	r1, [r2, #0]
 8004480:	f107 0208 	add.w	r2, r7, #8
 8004484:	3301      	adds	r3, #1
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	4413      	add	r3, r2
 800448a:	460a      	mov	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.BindingTableListCount; i++)
 800448e:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8004492:	3301      	adds	r3, #1
 8004494:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	795b      	ldrb	r3, [r3, #5]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f4ff af06 	bcc.w	80042b6 <processMgmtBindRsp+0xe2>
			}
		}
		mtZdoCbs.pfnZdoMgmtBindRsp(&rsp);
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <processMgmtBindRsp+0x2f0>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f107 0208 	add.w	r2, r7, #8
 80044b2:	4610      	mov	r0, r2
 80044b4:	4798      	blx	r3
	}
}
 80044b6:	bf00      	nop
 80044b8:	f507 6718 	add.w	r7, r7, #2432	; 0x980
 80044bc:	46bd      	mov	sp, r7
 80044be:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80044c2:	bf00      	nop
 80044c4:	20000528 	.word	0x20000528
 80044c8:	0800d74c 	.word	0x0800d74c

080044cc <processMgmtLeaveRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLeaveRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtLeaveRsp)
 80044d8:	4b18      	ldr	r3, [pc, #96]	; (800453c <processMgmtLeaveRsp+0x70>)
 80044da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d028      	beq.n	8004532 <processMgmtLeaveRsp+0x66>
	{
		uint8_t msgIdx = 2;
 80044e0:	2302      	movs	r3, #2
 80044e2:	73fb      	strb	r3, [r7, #15]
		MgmtLeaveRspFormat_t rsp;
		if (rpcLen < 3)
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d802      	bhi.n	80044f0 <processMgmtLeaveRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80044ea:	4815      	ldr	r0, [pc, #84]	; (8004540 <processMgmtLeaveRsp+0x74>)
 80044ec:	f007 f896 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	3301      	adds	r3, #1
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	440b      	add	r3, r1
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	4413      	add	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	3302      	adds	r3, #2
 8004514:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	73fa      	strb	r2, [r7, #15]
 800451c:	461a      	mov	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtLeaveRsp(&rsp);
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <processMgmtLeaveRsp+0x70>)
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	f107 0208 	add.w	r2, r7, #8
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3
	}
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000528 	.word	0x20000528
 8004540:	0800d74c 	.word	0x0800d74c

08004544 <processMgmtDirectJoinRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtDirectJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtDirectJoinRsp)
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <processMgmtDirectJoinRsp+0x70>)
 8004552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d028      	beq.n	80045aa <processMgmtDirectJoinRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004558:	2302      	movs	r3, #2
 800455a:	73fb      	strb	r3, [r7, #15]
		MgmtDirectJoinRspFormat_t rsp;
		if (rpcLen < 3)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d802      	bhi.n	8004568 <processMgmtDirectJoinRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004562:	4815      	ldr	r0, [pc, #84]	; (80045b8 <processMgmtDirectJoinRsp+0x74>)
 8004564:	f007 f85a 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b29a      	uxth	r2, r3
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	3301      	adds	r3, #1
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	440b      	add	r3, r1
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	b29b      	uxth	r3, r3
 8004582:	4413      	add	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3302      	adds	r3, #2
 800458c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	73fa      	strb	r2, [r7, #15]
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtDirectJoinRsp(&rsp);
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <processMgmtDirectJoinRsp+0x70>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	f107 0208 	add.w	r2, r7, #8
 80045a6:	4610      	mov	r0, r2
 80045a8:	4798      	blx	r3
	}
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000528 	.word	0x20000528
 80045b8:	0800d74c 	.word	0x0800d74c

080045bc <processMgmtPermitJoinRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtPermitJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtPermitJoinRsp)
 80045c8:	4b18      	ldr	r3, [pc, #96]	; (800462c <processMgmtPermitJoinRsp+0x70>)
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d028      	beq.n	8004622 <processMgmtPermitJoinRsp+0x66>
	{
		uint8_t msgIdx = 2;
 80045d0:	2302      	movs	r3, #2
 80045d2:	73fb      	strb	r3, [r7, #15]
		MgmtPermitJoinRspFormat_t rsp;
		if (rpcLen < 3)
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d802      	bhi.n	80045e0 <processMgmtPermitJoinRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80045da:	4815      	ldr	r0, [pc, #84]	; (8004630 <processMgmtPermitJoinRsp+0x74>)
 80045dc:	f007 f81e 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3301      	adds	r3, #1
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	440b      	add	r3, r1
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	3302      	adds	r3, #2
 8004604:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	73fa      	strb	r2, [r7, #15]
 800460c:	461a      	mov	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtPermitJoinRsp(&rsp);
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <processMgmtPermitJoinRsp+0x70>)
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	f107 0208 	add.w	r2, r7, #8
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
	}
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000528 	.word	0x20000528
 8004630:	0800d74c 	.word	0x0800d74c

08004634 <processEndDeviceAnnceInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceAnnceInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004636:	b08b      	sub	sp, #44	; 0x2c
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceAnnceInd)
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <processEndDeviceAnnceInd+0x11c>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	2b00      	cmp	r3, #0
 8004646:	d07e      	beq.n	8004746 <processEndDeviceAnnceInd+0x112>
	{
		uint8_t msgIdx = 2;
 8004648:	2302      	movs	r3, #2
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		EndDeviceAnnceIndFormat_t rsp;
		if (rpcLen < 13)
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d802      	bhi.n	800465a <processEndDeviceAnnceInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004654:	483f      	ldr	r0, [pc, #252]	; (8004754 <processEndDeviceAnnceInd+0x120>)
 8004656:	f006 ffe1 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800465a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800466a:	3301      	adds	r3, #1
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	440b      	add	r3, r1
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	b29b      	uxth	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800467e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004682:	3302      	adds	r3, #2
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b29a      	uxth	r2, r3
 8004694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004698:	3301      	adds	r3, #1
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	440b      	add	r3, r1
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	3302      	adds	r3, #2
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.IEEEAddr = 0;
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80046c8:	e029      	b.n	800471e <processEndDeviceAnnceInd+0xea>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80046e6:	00c9      	lsls	r1, r1, #3
 80046e8:	f1a1 0620 	sub.w	r6, r1, #32
 80046ec:	f1c1 0020 	rsb	r0, r1, #32
 80046f0:	fa03 f501 	lsl.w	r5, r3, r1
 80046f4:	fa02 f606 	lsl.w	r6, r2, r6
 80046f8:	4335      	orrs	r5, r6
 80046fa:	fa22 f000 	lsr.w	r0, r2, r0
 80046fe:	4305      	orrs	r5, r0
 8004700:	fa02 f401 	lsl.w	r4, r2, r1
 8004704:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004708:	ea40 0204 	orr.w	r2, r0, r4
 800470c:	ea41 0305 	orr.w	r3, r1, r5
 8004710:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8004714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004718:	3301      	adds	r3, #1
 800471a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800471e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004722:	2b07      	cmp	r3, #7
 8004724:	d9d1      	bls.n	80046ca <processEndDeviceAnnceInd+0x96>
		rsp.Capabilities = rpcBuff[msgIdx++];
 8004726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	763b      	strb	r3, [r7, #24]

		mtZdoCbs.pfnZdoEndDeviceAnnceInd(&rsp);
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <processEndDeviceAnnceInd+0x11c>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	4610      	mov	r0, r2
 8004744:	4798      	blx	r3
	}
}
 8004746:	bf00      	nop
 8004748:	372c      	adds	r7, #44	; 0x2c
 800474a:	46bd      	mov	sp, r7
 800474c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474e:	bf00      	nop
 8004750:	20000528 	.word	0x20000528
 8004754:	0800d74c 	.word	0x0800d74c

08004758 <processMatchDescRspSent>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRspSent(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b096      	sub	sp, #88	; 0x58
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRspSent)
 8004764:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <processMatchDescRspSent+0x138>)
 8004766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 808d 	beq.w	8004888 <processMatchDescRspSent+0x130>
	{
		uint8_t msgIdx = 2;
 800476e:	2302      	movs	r3, #2
 8004770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		MatchDescRspSentFormat_t rsp;
		if (rpcLen < 4)
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d802      	bhi.n	8004780 <processMatchDescRspSent+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800477a:	4846      	ldr	r0, [pc, #280]	; (8004894 <processMatchDescRspSent+0x13c>)
 800477c:	f006 ff4e 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b29a      	uxth	r2, r3
 800478c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004790:	3301      	adds	r3, #1
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	440b      	add	r3, r1
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	b29b      	uxth	r3, r3
 800479e:	4413      	add	r3, r2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80047a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047a8:	3302      	adds	r3, #2
 80047aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		rsp.NumInClusters = rpcBuff[msgIdx++];
 80047ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	72bb      	strb	r3, [r7, #10]
		uint32_t i;
		for (i = 0; i < rsp.NumInClusters; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	653b      	str	r3, [r7, #80]	; 0x50
 80047c6:	e01f      	b.n	8004808 <processMatchDescRspSent+0xb0>
		{
			rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 80047c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047d8:	3301      	adds	r3, #1
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	440b      	add	r3, r1
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80047f2:	440b      	add	r3, r1
 80047f4:	f823 2c4c 	strh.w	r2, [r3, #-76]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 80047f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047fc:	3302      	adds	r3, #2
 80047fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumInClusters; i++)
 8004802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004804:	3301      	adds	r3, #1
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
 8004808:	7abb      	ldrb	r3, [r7, #10]
 800480a:	461a      	mov	r2, r3
 800480c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480e:	4293      	cmp	r3, r2
 8004810:	d3da      	bcc.n	80047c8 <processMatchDescRspSent+0x70>
		}
		rsp.NumOutClusters = rpcBuff[msgIdx++];
 8004812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for (i = 0; i < rsp.NumOutClusters; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	e020      	b.n	8004870 <processMatchDescRspSent+0x118>
		{
			rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 800482e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b29a      	uxth	r2, r3
 800483a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800483e:	3301      	adds	r3, #1
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	440b      	add	r3, r1
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	b29b      	uxth	r3, r3
 800484c:	4413      	add	r3, r2
 800484e:	b29a      	uxth	r2, r3
 8004850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004852:	3310      	adds	r3, #16
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800485a:	440b      	add	r3, r1
 800485c:	f823 2c4a 	strh.w	r2, [r3, #-74]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 8004860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004864:	3302      	adds	r3, #2
 8004866:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumOutClusters; i++)
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	3301      	adds	r3, #1
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
 8004870:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004874:	461a      	mov	r2, r3
 8004876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004878:	4293      	cmp	r3, r2
 800487a:	d3d8      	bcc.n	800482e <processMatchDescRspSent+0xd6>
		}

		mtZdoCbs.pfnZdoMatchDescRspSent(&rsp);
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <processMatchDescRspSent+0x138>)
 800487e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004880:	f107 0208 	add.w	r2, r7, #8
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
	}
}
 8004888:	bf00      	nop
 800488a:	3758      	adds	r7, #88	; 0x58
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000528 	.word	0x20000528
 8004894:	0800d74c 	.word	0x0800d74c

08004898 <processStatusErrorRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processStatusErrorRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoStatusErrorRsp)
 80048a4:	4b18      	ldr	r3, [pc, #96]	; (8004908 <processStatusErrorRsp+0x70>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <processStatusErrorRsp+0x66>
	{
		uint8_t msgIdx = 2;
 80048ac:	2302      	movs	r3, #2
 80048ae:	73fb      	strb	r3, [r7, #15]
		StatusErrorRspFormat_t rsp;
		if (rpcLen < 3)
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d802      	bhi.n	80048bc <processStatusErrorRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80048b6:	4815      	ldr	r0, [pc, #84]	; (800490c <processStatusErrorRsp+0x74>)
 80048b8:	f006 feb0 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	3301      	adds	r3, #1
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	440b      	add	r3, r1
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	3302      	adds	r3, #2
 80048e0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	73fa      	strb	r2, [r7, #15]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoStatusErrorRsp(&rsp);
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <processStatusErrorRsp+0x70>)
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	f107 0208 	add.w	r2, r7, #8
 80048fa:	4610      	mov	r0, r2
 80048fc:	4798      	blx	r3
	}
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000528 	.word	0x20000528
 800490c:	0800d74c 	.word	0x0800d74c

08004910 <processSrcRtgInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSrcRtgInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8004916:	af00      	add	r7, sp, #0
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	6018      	str	r0, [r3, #0]
 800491c:	460a      	mov	r2, r1
 800491e:	1cfb      	adds	r3, r7, #3
 8004920:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoSrcRtgInd)
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <processSrcRtgInd+0xf8>)
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d068      	beq.n	80049fc <processSrcRtgInd+0xec>
	{
		uint8_t msgIdx = 2;
 800492a:	2302      	movs	r3, #2
 800492c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		SrcRtgIndFormat_t rsp;
		if (rpcLen < 4)
 8004930:	1cfb      	adds	r3, r7, #3
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d802      	bhi.n	800493e <processSrcRtgInd+0x2e>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004938:	4834      	ldr	r0, [pc, #208]	; (8004a0c <processSrcRtgInd+0xfc>)
 800493a:	f006 fe6f 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800493e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4413      	add	r3, r2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b29a      	uxth	r2, r3
 800494c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004950:	3301      	adds	r3, #1
 8004952:	1d39      	adds	r1, r7, #4
 8004954:	6809      	ldr	r1, [r1, #0]
 8004956:	440b      	add	r3, r1
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	b29b      	uxth	r3, r3
 8004960:	4413      	add	r3, r2
 8004962:	b29a      	uxth	r2, r3
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 800496a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800496e:	3302      	adds	r3, #2
 8004970:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		rsp.RelayCount = rpcBuff[msgIdx++];
 8004974:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800497e:	461a      	mov	r2, r3
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4413      	add	r3, r2
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	709a      	strb	r2, [r3, #2]
		uint32_t i;
		for (i = 0; i < rsp.RelayCount; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004994:	e024      	b.n	80049e0 <processSrcRtgInd+0xd0>
		{
			rsp.RelayList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8004996:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800499a:	1d3a      	adds	r2, r7, #4
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80049a8:	3301      	adds	r3, #1
 80049aa:	1d39      	adds	r1, r7, #4
 80049ac:	6809      	ldr	r1, [r1, #0]
 80049ae:	440b      	add	r3, r1
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	b299      	uxth	r1, r3
 80049bc:	f107 020c 	add.w	r2, r7, #12
 80049c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	460a      	mov	r2, r1
 80049ca:	809a      	strh	r2, [r3, #4]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 80049cc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80049d0:	3302      	adds	r3, #2
 80049d2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (i = 0; i < rsp.RelayCount; i++)
 80049d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80049da:	3301      	adds	r3, #1
 80049dc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d3d2      	bcc.n	8004996 <processSrcRtgInd+0x86>
		}

		mtZdoCbs.pfnZdoSrcRtgInd(&rsp);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <processSrcRtgInd+0xf8>)
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f107 020c 	add.w	r2, r7, #12
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
	}
}
 80049fc:	bf00      	nop
 80049fe:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000528 	.word	0x20000528
 8004a0c:	0800d74c 	.word	0x0800d74c

08004a10 <processBeaconNotifyInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBeaconNotifyInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	6018      	str	r0, [r3, #0]
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	1cfb      	adds	r3, r7, #3
 8004a20:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoBeaconNotifyInd)
 8004a22:	4bd5      	ldr	r3, [pc, #852]	; (8004d78 <processBeaconNotifyInd+0x368>)
 8004a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 81a1 	beq.w	8004d6e <processBeaconNotifyInd+0x35e>
	{
		uint8_t msgIdx = 2;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		BeaconNotifyIndFormat_t rsp;
		if (rpcLen < 1)
 8004a32:	1cfb      	adds	r3, r7, #3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <processBeaconNotifyInd+0x30>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004a3a:	48d0      	ldr	r0, [pc, #832]	; (8004d7c <processBeaconNotifyInd+0x36c>)
 8004a3c:	f006 fdee 	bl	800b61c <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8004a40:	1cfb      	adds	r3, r7, #3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4619      	mov	r1, r3
 8004a46:	48ce      	ldr	r0, [pc, #824]	; (8004d80 <processBeaconNotifyInd+0x370>)
 8004a48:	f006 fd74 	bl	800b534 <iprintf>

		rsp.BeaconCount = rpcBuff[msgIdx++];
 8004a4c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004a56:	461a      	mov	r2, r3
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	701a      	strb	r2, [r3, #0]
		if (rpcLen > 1)
 8004a66:	1cfb      	adds	r3, r7, #3
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	f240 8179 	bls.w	8004d62 <processBeaconNotifyInd+0x352>
		{
			uint32_t i;
			for (i = 0; i < rsp.BeaconCount; i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004a76:	e16b      	b.n	8004d50 <processBeaconNotifyInd+0x340>
			{
				rsp.BeaconList[i].SrcAddr = BUILD_UINT16(rpcBuff[msgIdx],
 8004a78:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004a7c:	1d3a      	adds	r2, r7, #4
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4413      	add	r3, r2
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	1d39      	adds	r1, r7, #4
 8004a8e:	6809      	ldr	r1, [r1, #0]
 8004a90:	440b      	add	r3, r1
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	b298      	uxth	r0, r3
 8004a9e:	f107 0108 	add.w	r1, r7, #8
 8004aa2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8004ab6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004aba:	3302      	adds	r3, #2
 8004abc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].PanId = BUILD_UINT16(rpcBuff[msgIdx],
 8004ac0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004ac4:	1d3a      	adds	r2, r7, #4
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	1d39      	adds	r1, r7, #4
 8004ad6:	6809      	ldr	r1, [r1, #0]
 8004ad8:	440b      	add	r3, r1
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	b298      	uxth	r0, r3
 8004ae6:	f107 0108 	add.w	r1, r7, #8
 8004aea:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	330a      	adds	r3, #10
 8004afa:	4602      	mov	r2, r0
 8004afc:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8004afe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004b02:	3302      	adds	r3, #2
 8004b04:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].LogicalChannel = rpcBuff[msgIdx++];
 8004b08:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004b12:	461a      	mov	r2, r3
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	7818      	ldrb	r0, [r3, #0]
 8004b1c:	f107 0108 	add.w	r1, r7, #8
 8004b20:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	330c      	adds	r3, #12
 8004b30:	4602      	mov	r2, r0
 8004b32:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].PermitJoining = rpcBuff[msgIdx++];
 8004b34:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004b3e:	461a      	mov	r2, r3
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	7818      	ldrb	r0, [r3, #0]
 8004b48:	f107 0108 	add.w	r1, r7, #8
 8004b4c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	330d      	adds	r3, #13
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].RouterCap = rpcBuff[msgIdx++];
 8004b60:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	7818      	ldrb	r0, [r3, #0]
 8004b74:	f107 0108 	add.w	r1, r7, #8
 8004b78:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	330e      	adds	r3, #14
 8004b88:	4602      	mov	r2, r0
 8004b8a:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].DevCap = rpcBuff[msgIdx++];
 8004b8c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004b96:	461a      	mov	r2, r3
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	7818      	ldrb	r0, [r3, #0]
 8004ba0:	f107 0108 	add.w	r1, r7, #8
 8004ba4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	330f      	adds	r3, #15
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].ProtocolVer = rpcBuff[msgIdx++];
 8004bb8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4413      	add	r3, r2
 8004bca:	7818      	ldrb	r0, [r3, #0]
 8004bcc:	f107 0108 	add.w	r1, r7, #8
 8004bd0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3310      	adds	r3, #16
 8004be0:	4602      	mov	r2, r0
 8004be2:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].StackProf = rpcBuff[msgIdx++];
 8004be4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004bee:	461a      	mov	r2, r3
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	7818      	ldrb	r0, [r3, #0]
 8004bf8:	f107 0108 	add.w	r1, r7, #8
 8004bfc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3311      	adds	r3, #17
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Lqi = rpcBuff[msgIdx++];
 8004c10:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4413      	add	r3, r2
 8004c22:	7818      	ldrb	r0, [r3, #0]
 8004c24:	f107 0108 	add.w	r1, r7, #8
 8004c28:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	3312      	adds	r3, #18
 8004c38:	4602      	mov	r2, r0
 8004c3a:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Depth = rpcBuff[msgIdx++];
 8004c3c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004c46:	461a      	mov	r2, r3
 8004c48:	1d3b      	adds	r3, r7, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	7818      	ldrb	r0, [r3, #0]
 8004c50:	f107 0108 	add.w	r1, r7, #8
 8004c54:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	3313      	adds	r3, #19
 8004c64:	4602      	mov	r2, r0
 8004c66:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].UpdateId = rpcBuff[msgIdx++];
 8004c68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004c72:	461a      	mov	r2, r3
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	7818      	ldrb	r0, [r3, #0]
 8004c7c:	f107 0108 	add.w	r1, r7, #8
 8004c80:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3314      	adds	r3, #20
 8004c90:	4602      	mov	r2, r0
 8004c92:	701a      	strb	r2, [r3, #0]

				rsp.BeaconList[i].ExtendedPanId = 0;
 8004c94:	f107 0108 	add.w	r1, r7, #8
 8004c98:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4419      	add	r1, r3
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8004cba:	e040      	b.n	8004d3e <processBeaconNotifyInd+0x32e>
					rsp.BeaconList[i].ExtendedPanId |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8004cbc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8004cda:	00c9      	lsls	r1, r1, #3
 8004cdc:	f1a1 0620 	sub.w	r6, r1, #32
 8004ce0:	f1c1 0020 	rsb	r0, r1, #32
 8004ce4:	fa03 f501 	lsl.w	r5, r3, r1
 8004ce8:	fa02 f606 	lsl.w	r6, r2, r6
 8004cec:	4335      	orrs	r5, r6
 8004cee:	fa22 f000 	lsr.w	r0, r2, r0
 8004cf2:	4305      	orrs	r5, r0
 8004cf4:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.BeaconList[i].ExtendedPanId |=
 8004cf8:	f107 0108 	add.w	r1, r7, #8
 8004cfc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	440b      	add	r3, r1
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	ea44 0002 	orr.w	r0, r4, r2
 8004d14:	ea45 0103 	orr.w	r1, r5, r3
 8004d18:	460a      	mov	r2, r1
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	f107 0608 	add.w	r6, r7, #8
 8004d20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d24:	1c58      	adds	r0, r3, #1
 8004d26:	4603      	mov	r3, r0
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4403      	add	r3, r0
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4433      	add	r3, r6
 8004d30:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8004d34:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8004d3e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8004d42:	2b07      	cmp	r3, #7
 8004d44:	d9ba      	bls.n	8004cbc <processBeaconNotifyInd+0x2ac>
			for (i = 0; i < rsp.BeaconCount; i++)
 8004d46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004d50:	f107 0308 	add.w	r3, r7, #8
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f4ff ae8b 	bcc.w	8004a78 <processBeaconNotifyInd+0x68>

			}
		}
		mtZdoCbs.pfnZdoBeaconNotifyInd(&rsp);
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <processBeaconNotifyInd+0x368>)
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f107 0208 	add.w	r2, r7, #8
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4798      	blx	r3
	}
}
 8004d6e:	bf00      	nop
 8004d70:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	20000528 	.word	0x20000528
 8004d7c:	0800d74c 	.word	0x0800d74c
 8004d80:	0800d760 	.word	0x0800d760

08004d84 <processJoinCnf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processJoinCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoJoinCnf)
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <processJoinCnf+0xa0>)
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d040      	beq.n	8004e1a <processJoinCnf+0x96>
	{
		uint8_t msgIdx = 2;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	73fb      	strb	r3, [r7, #15]
		JoinCnfFormat_t rsp;
		if (rpcLen < 5)
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d802      	bhi.n	8004da8 <processJoinCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004da2:	4821      	ldr	r0, [pc, #132]	; (8004e28 <processJoinCnf+0xa4>)
 8004da4:	f006 fc3a 	bl	800b61c <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	4619      	mov	r1, r3
 8004dac:	481f      	ldr	r0, [pc, #124]	; (8004e2c <processJoinCnf+0xa8>)
 8004dae:	f006 fbc1 	bl	800b534 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	73fa      	strb	r2, [r7, #15]
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	723b      	strb	r3, [r7, #8]
		rsp.DevAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	440b      	add	r3, r1
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3302      	adds	r3, #2
 8004de6:	73fb      	strb	r3, [r7, #15]
		rsp.ParentAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	3301      	adds	r3, #1
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	440b      	add	r3, r1
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoJoinCnf(&rsp);
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <processJoinCnf+0xa0>)
 8004e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e12:	f107 0208 	add.w	r2, r7, #8
 8004e16:	4610      	mov	r0, r2
 8004e18:	4798      	blx	r3
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000528 	.word	0x20000528
 8004e28:	0800d74c 	.word	0x0800d74c
 8004e2c:	0800d760 	.word	0x0800d760

08004e30 <processNwkDiscoveryCnf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkDiscoveryCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkDiscoveryCnf)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <processNwkDiscoveryCnf+0x54>)
 8004e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <processNwkDiscoveryCnf+0x4a>
	{
		uint8_t msgIdx = 2;
 8004e44:	2302      	movs	r3, #2
 8004e46:	73fb      	strb	r3, [r7, #15]
		NwkDiscoveryCnfFormat_t rsp;
		if (rpcLen < 1)
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <processNwkDiscoveryCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004e4e:	480e      	ldr	r0, [pc, #56]	; (8004e88 <processNwkDiscoveryCnf+0x58>)
 8004e50:	f006 fbe4 	bl	800b61c <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	4619      	mov	r1, r3
 8004e58:	480c      	ldr	r0, [pc, #48]	; (8004e8c <processNwkDiscoveryCnf+0x5c>)
 8004e5a:	f006 fb6b 	bl	800b534 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	73fa      	strb	r2, [r7, #15]
 8004e64:	461a      	mov	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	733b      	strb	r3, [r7, #12]

		mtZdoCbs.pfnZdoNwkDiscoveryCnf(&rsp);
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <processNwkDiscoveryCnf+0x54>)
 8004e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e72:	f107 020c 	add.w	r2, r7, #12
 8004e76:	4610      	mov	r0, r2
 8004e78:	4798      	blx	r3
	}
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000528 	.word	0x20000528
 8004e88:	0800d74c 	.word	0x0800d74c
 8004e8c:	0800d760 	.word	0x0800d760

08004e90 <processLeaveInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processLeaveInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e92:	b08b      	sub	sp, #44	; 0x2c
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoLeaveInd)
 8004e9c:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <processLeaveInd+0x114>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d07b      	beq.n	8004f9c <processLeaveInd+0x10c>
	{
		uint8_t msgIdx = 2;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		LeaveIndFormat_t rsp;
		if (rpcLen < 13)
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d802      	bhi.n	8004eb6 <processLeaveInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004eb0:	483d      	ldr	r0, [pc, #244]	; (8004fa8 <processLeaveInd+0x118>)
 8004eb2:	f006 fbb3 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	440b      	add	r3, r1
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ede:	3302      	adds	r3, #2
 8004ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		rsp.ExtAddr = 0;		
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ef6:	e029      	b.n	8004f4c <processLeaveInd+0xbc>
		{
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004f14:	00c9      	lsls	r1, r1, #3
 8004f16:	f1a1 0620 	sub.w	r6, r1, #32
 8004f1a:	f1c1 0020 	rsb	r0, r1, #32
 8004f1e:	fa03 f501 	lsl.w	r5, r3, r1
 8004f22:	fa02 f606 	lsl.w	r6, r2, r6
 8004f26:	4335      	orrs	r5, r6
 8004f28:	fa22 f000 	lsr.w	r0, r2, r0
 8004f2c:	4305      	orrs	r5, r0
 8004f2e:	fa02 f401 	lsl.w	r4, r2, r1
 8004f32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f36:	ea40 0204 	orr.w	r2, r0, r4
 8004f3a:	ea41 0305 	orr.w	r3, r1, r5
 8004f3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8004f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f46:	3301      	adds	r3, #1
 8004f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	d9d1      	bls.n	8004ef8 <processLeaveInd+0x68>
		}
		rsp.Request = rpcBuff[msgIdx++];
 8004f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004f5e:	461a      	mov	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	763b      	strb	r3, [r7, #24]
		rsp.Remove = rpcBuff[msgIdx++];
 8004f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	767b      	strb	r3, [r7, #25]
		rsp.Rejoin = rpcBuff[msgIdx++];
 8004f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	76bb      	strb	r3, [r7, #26]

		mtZdoCbs.pfnZdoLeaveInd(&rsp);
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <processLeaveInd+0x114>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	f107 0208 	add.w	r2, r7, #8
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
	}
}
 8004f9c:	bf00      	nop
 8004f9e:	372c      	adds	r7, #44	; 0x2c
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa4:	20000528 	.word	0x20000528
 8004fa8:	0800d74c 	.word	0x0800d74c

08004fac <processMsgCbIncoming>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMsgCbIncoming(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fae:	b08d      	sub	sp, #52	; 0x34
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMsgCbIncoming)
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <processMsgCbIncoming+0x1b8>)
 8004fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80cd 	beq.w	800515c <processMsgCbIncoming+0x1b0>
	{
		uint8_t msgIdx = 2;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MsgCbIncomingFormat_t rsp;
		if (rpcLen < 9)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d802      	bhi.n	8004fd4 <processMsgCbIncoming+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004fce:	4866      	ldr	r0, [pc, #408]	; (8005168 <processMsgCbIncoming+0x1bc>)
 8004fd0:	f006 fb24 	bl	800b61c <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	440b      	add	r3, r1
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.WasBroadcast = rpcBuff[msgIdx++];
 8005002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	72bb      	strb	r3, [r7, #10]
		rsp.ClusterID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b29a      	uxth	r2, r3
 8005022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005026:	3301      	adds	r3, #1
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	440b      	add	r3, r1
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b29b      	uxth	r3, r3
 8005034:	4413      	add	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800503a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800503e:	3302      	adds	r3, #2
 8005040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8005044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	73bb      	strb	r3, [r7, #14]
		rsp.SeqNum = rpcBuff[msgIdx++];
 8005058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005062:	461a      	mov	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	73fb      	strb	r3, [r7, #15]
		rsp.MacDstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800506c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b29a      	uxth	r2, r3
 8005078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800507c:	3301      	adds	r3, #1
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	440b      	add	r3, r1
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	4413      	add	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005094:	3302      	adds	r3, #2
 8005096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		rsp.Status = rpcBuff[msgIdx++];
 800509a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80050a4:	461a      	mov	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	74bb      	strb	r3, [r7, #18]
		rsp.ExtAddr = 0;
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80050c0:	e029      	b.n	8005116 <processMsgCbIncoming+0x16a>
		{
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80050c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80050de:	00c9      	lsls	r1, r1, #3
 80050e0:	f1a1 0620 	sub.w	r6, r1, #32
 80050e4:	f1c1 0020 	rsb	r0, r1, #32
 80050e8:	fa03 f501 	lsl.w	r5, r3, r1
 80050ec:	fa02 f606 	lsl.w	r6, r2, r6
 80050f0:	4335      	orrs	r5, r6
 80050f2:	fa22 f000 	lsr.w	r0, r2, r0
 80050f6:	4305      	orrs	r5, r0
 80050f8:	fa02 f401 	lsl.w	r4, r2, r1
 80050fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005100:	ea40 0204 	orr.w	r2, r0, r4
 8005104:	ea41 0305 	orr.w	r3, r1, r5
 8005108:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (i = 0; i < 8; i++)
 800510c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005110:	3301      	adds	r3, #1
 8005112:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005116:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800511a:	2b07      	cmp	r3, #7
 800511c:	d9d1      	bls.n	80050c2 <processMsgCbIncoming+0x116>
		}
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800511e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b29a      	uxth	r2, r3
 800512a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800512e:	3301      	adds	r3, #1
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	440b      	add	r3, r1
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b29b      	uxth	r3, r3
 800513c:	4413      	add	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	843b      	strh	r3, [r7, #32]
		rsp.NotUsed = rpcBuff[msgIdx];
 8005142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		
		
		mtZdoCbs.pfnZdoMsgCbIncoming(&rsp);
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <processMsgCbIncoming+0x1b8>)
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	4610      	mov	r0, r2
 800515a:	4798      	blx	r3
	}
}
 800515c:	bf00      	nop
 800515e:	3734      	adds	r7, #52	; 0x34
 8005160:	46bd      	mov	sp, r7
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005164:	20000528 	.word	0x20000528
 8005168:	0800d74c 	.word	0x0800d74c

0800516c <zdoProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void zdoProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
 800517c:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3301      	adds	r3, #1
 8005182:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
 8005184:	49d7      	ldr	r1, [pc, #860]	; (80054e4 <zdoProcess+0x378>)
 8005186:	2004      	movs	r0, #4
 8005188:	f000 fb26 	bl	80057d8 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d105      	bne.n	80051a4 <zdoProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa93 	bl	80056c8 <processSrsp>
			        "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 80051a2:	e26a      	b.n	800567a <zdoProcess+0x50e>
		switch (rpcBuff[1])
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	3b80      	subs	r3, #128	; 0x80
 80051ac:	2b7f      	cmp	r3, #127	; 0x7f
 80051ae:	f200 8259 	bhi.w	8005664 <zdoProcess+0x4f8>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <zdoProcess+0x4c>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080053cd 	.word	0x080053cd
 80051bc:	080053e1 	.word	0x080053e1
 80051c0:	080053f5 	.word	0x080053f5
 80051c4:	08005409 	.word	0x08005409
 80051c8:	0800541d 	.word	0x0800541d
 80051cc:	08005431 	.word	0x08005431
 80051d0:	08005445 	.word	0x08005445
 80051d4:	08005665 	.word	0x08005665
 80051d8:	08005665 	.word	0x08005665
 80051dc:	08005665 	.word	0x08005665
 80051e0:	08005665 	.word	0x08005665
 80051e4:	08005665 	.word	0x08005665
 80051e8:	08005665 	.word	0x08005665
 80051ec:	08005665 	.word	0x08005665
 80051f0:	08005665 	.word	0x08005665
 80051f4:	08005665 	.word	0x08005665
 80051f8:	08005459 	.word	0x08005459
 80051fc:	0800546d 	.word	0x0800546d
 8005200:	08005665 	.word	0x08005665
 8005204:	08005665 	.word	0x08005665
 8005208:	08005481 	.word	0x08005481
 800520c:	08005495 	.word	0x08005495
 8005210:	08005665 	.word	0x08005665
 8005214:	08005665 	.word	0x08005665
 8005218:	08005665 	.word	0x08005665
 800521c:	08005665 	.word	0x08005665
 8005220:	08005665 	.word	0x08005665
 8005224:	08005665 	.word	0x08005665
 8005228:	08005665 	.word	0x08005665
 800522c:	08005665 	.word	0x08005665
 8005230:	08005665 	.word	0x08005665
 8005234:	08005665 	.word	0x08005665
 8005238:	080054a9 	.word	0x080054a9
 800523c:	080054bd 	.word	0x080054bd
 8005240:	080054d1 	.word	0x080054d1
 8005244:	08005665 	.word	0x08005665
 8005248:	08005665 	.word	0x08005665
 800524c:	08005665 	.word	0x08005665
 8005250:	08005665 	.word	0x08005665
 8005254:	08005665 	.word	0x08005665
 8005258:	08005665 	.word	0x08005665
 800525c:	08005665 	.word	0x08005665
 8005260:	08005665 	.word	0x08005665
 8005264:	08005665 	.word	0x08005665
 8005268:	08005665 	.word	0x08005665
 800526c:	08005665 	.word	0x08005665
 8005270:	08005665 	.word	0x08005665
 8005274:	08005665 	.word	0x08005665
 8005278:	08005525 	.word	0x08005525
 800527c:	08005539 	.word	0x08005539
 8005280:	0800554d 	.word	0x0800554d
 8005284:	08005561 	.word	0x08005561
 8005288:	08005575 	.word	0x08005575
 800528c:	08005589 	.word	0x08005589
 8005290:	0800559d 	.word	0x0800559d
 8005294:	08005665 	.word	0x08005665
 8005298:	08005665 	.word	0x08005665
 800529c:	08005665 	.word	0x08005665
 80052a0:	08005665 	.word	0x08005665
 80052a4:	08005665 	.word	0x08005665
 80052a8:	08005665 	.word	0x08005665
 80052ac:	08005665 	.word	0x08005665
 80052b0:	08005665 	.word	0x08005665
 80052b4:	08005665 	.word	0x08005665
 80052b8:	080053b9 	.word	0x080053b9
 80052bc:	080055b1 	.word	0x080055b1
 80052c0:	080055c5 	.word	0x080055c5
 80052c4:	080055d9 	.word	0x080055d9
 80052c8:	080055ed 	.word	0x080055ed
 80052cc:	08005601 	.word	0x08005601
 80052d0:	08005615 	.word	0x08005615
 80052d4:	08005629 	.word	0x08005629
 80052d8:	08005665 	.word	0x08005665
 80052dc:	0800563d 	.word	0x0800563d
 80052e0:	08005665 	.word	0x08005665
 80052e4:	08005665 	.word	0x08005665
 80052e8:	08005665 	.word	0x08005665
 80052ec:	08005665 	.word	0x08005665
 80052f0:	08005665 	.word	0x08005665
 80052f4:	08005665 	.word	0x08005665
 80052f8:	08005665 	.word	0x08005665
 80052fc:	08005665 	.word	0x08005665
 8005300:	08005665 	.word	0x08005665
 8005304:	08005665 	.word	0x08005665
 8005308:	08005665 	.word	0x08005665
 800530c:	08005665 	.word	0x08005665
 8005310:	08005665 	.word	0x08005665
 8005314:	08005665 	.word	0x08005665
 8005318:	08005665 	.word	0x08005665
 800531c:	08005665 	.word	0x08005665
 8005320:	08005665 	.word	0x08005665
 8005324:	08005665 	.word	0x08005665
 8005328:	08005665 	.word	0x08005665
 800532c:	08005665 	.word	0x08005665
 8005330:	08005665 	.word	0x08005665
 8005334:	08005665 	.word	0x08005665
 8005338:	08005665 	.word	0x08005665
 800533c:	08005665 	.word	0x08005665
 8005340:	08005665 	.word	0x08005665
 8005344:	08005665 	.word	0x08005665
 8005348:	08005665 	.word	0x08005665
 800534c:	08005665 	.word	0x08005665
 8005350:	08005665 	.word	0x08005665
 8005354:	08005665 	.word	0x08005665
 8005358:	08005665 	.word	0x08005665
 800535c:	08005665 	.word	0x08005665
 8005360:	08005665 	.word	0x08005665
 8005364:	08005665 	.word	0x08005665
 8005368:	08005665 	.word	0x08005665
 800536c:	08005665 	.word	0x08005665
 8005370:	08005665 	.word	0x08005665
 8005374:	08005665 	.word	0x08005665
 8005378:	08005665 	.word	0x08005665
 800537c:	08005665 	.word	0x08005665
 8005380:	08005665 	.word	0x08005665
 8005384:	08005665 	.word	0x08005665
 8005388:	08005665 	.word	0x08005665
 800538c:	08005665 	.word	0x08005665
 8005390:	08005665 	.word	0x08005665
 8005394:	08005665 	.word	0x08005665
 8005398:	08005665 	.word	0x08005665
 800539c:	08005665 	.word	0x08005665
 80053a0:	08005665 	.word	0x08005665
 80053a4:	08005665 	.word	0x08005665
 80053a8:	08005665 	.word	0x08005665
 80053ac:	08005665 	.word	0x08005665
 80053b0:	08005665 	.word	0x08005665
 80053b4:	08005651 	.word	0x08005651
			dbg_print(PRINT_LEVEL_VERBOSE,
 80053b8:	494b      	ldr	r1, [pc, #300]	; (80054e8 <zdoProcess+0x37c>)
 80053ba:	2004      	movs	r0, #4
 80053bc:	f000 fa0c 	bl	80057d8 <dbg_print>
			processStateChange(rpcBuff, rpcLen);
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fd fb2d 	bl	8002a24 <processStateChange>
			break;
 80053ca:	e156      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_NWK_ADDR_RSP\n");
 80053cc:	4947      	ldr	r1, [pc, #284]	; (80054ec <zdoProcess+0x380>)
 80053ce:	2004      	movs	r0, #4
 80053d0:	f000 fa02 	bl	80057d8 <dbg_print>
			processNwkAddrRsp(rpcBuff, rpcLen);
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fd fc11 	bl	8002c00 <processNwkAddrRsp>
			break;
 80053de:	e14c      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80053e0:	4943      	ldr	r1, [pc, #268]	; (80054f0 <zdoProcess+0x384>)
 80053e2:	2004      	movs	r0, #4
 80053e4:	f000 f9f8 	bl	80057d8 <dbg_print>
			processIeeeAddrRsp(rpcBuff, rpcLen);
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fd fcc7 	bl	8002d80 <processIeeeAddrRsp>
			break;
 80053f2:	e142      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80053f4:	493f      	ldr	r1, [pc, #252]	; (80054f4 <zdoProcess+0x388>)
 80053f6:	2004      	movs	r0, #4
 80053f8:	f000 f9ee 	bl	80057d8 <dbg_print>
			processNodeDescRsp(rpcBuff, rpcLen);
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fd fd85 	bl	8002f10 <processNodeDescRsp>
			break;
 8005406:	e138      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005408:	493b      	ldr	r1, [pc, #236]	; (80054f8 <zdoProcess+0x38c>)
 800540a:	2004      	movs	r0, #4
 800540c:	f000 f9e4 	bl	80057d8 <dbg_print>
			processPowerDescRsp(rpcBuff, rpcLen);
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fd fe3f 	bl	8003098 <processPowerDescRsp>
			break;
 800541a:	e12e      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 800541c:	4937      	ldr	r1, [pc, #220]	; (80054fc <zdoProcess+0x390>)
 800541e:	2004      	movs	r0, #4
 8005420:	f000 f9da 	bl	80057d8 <dbg_print>
			processSimpleDescRsp(rpcBuff, rpcLen);
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fd fe93 	bl	8003154 <processSimpleDescRsp>
			break;
 800542e:	e124      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005430:	4933      	ldr	r1, [pc, #204]	; (8005500 <zdoProcess+0x394>)
 8005432:	2004      	movs	r0, #4
 8005434:	f000 f9d0 	bl	80057d8 <dbg_print>
			processActiveEpRsp(rpcBuff, rpcLen);
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fd ff9b 	bl	8003378 <processActiveEpRsp>
			break;
 8005442:	e11a      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005444:	492f      	ldr	r1, [pc, #188]	; (8005504 <zdoProcess+0x398>)
 8005446:	2004      	movs	r0, #4
 8005448:	f000 f9c6 	bl	80057d8 <dbg_print>
			processMatchDescRsp(rpcBuff, rpcLen);
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fe f811 	bl	8003478 <processMatchDescRsp>
			break;
 8005456:	e110      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005458:	492b      	ldr	r1, [pc, #172]	; (8005508 <zdoProcess+0x39c>)
 800545a:	2004      	movs	r0, #4
 800545c:	f000 f9bc 	bl	80057d8 <dbg_print>
			processComplexDescRsp(rpcBuff, rpcLen);
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fe f887 	bl	8003578 <processComplexDescRsp>
			break;
 800546a:	e106      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 800546c:	4927      	ldr	r1, [pc, #156]	; (800550c <zdoProcess+0x3a0>)
 800546e:	2004      	movs	r0, #4
 8005470:	f000 f9b2 	bl	80057d8 <dbg_print>
			processUserDescRsp(rpcBuff, rpcLen);
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fe f8fd 	bl	8003678 <processUserDescRsp>
			break;
 800547e:	e0fc      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005480:	4923      	ldr	r1, [pc, #140]	; (8005510 <zdoProcess+0x3a4>)
 8005482:	2004      	movs	r0, #4
 8005484:	f000 f9a8 	bl	80057d8 <dbg_print>
			processUserDescConf(rpcBuff, rpcLen);
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fe f973 	bl	8003778 <processUserDescConf>
			break;
 8005492:	e0f2      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005494:	491f      	ldr	r1, [pc, #124]	; (8005514 <zdoProcess+0x3a8>)
 8005496:	2004      	movs	r0, #4
 8005498:	f000 f99e 	bl	80057d8 <dbg_print>
			processServerDiscRsp(rpcBuff, rpcLen);
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fe f9b7 	bl	8003814 <processServerDiscRsp>
			break;
 80054a6:	e0e8      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80054a8:	491b      	ldr	r1, [pc, #108]	; (8005518 <zdoProcess+0x3ac>)
 80054aa:	2004      	movs	r0, #4
 80054ac:	f000 f994 	bl	80057d8 <dbg_print>
			processEndDeviceBindRsp(rpcBuff, rpcLen);
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fe f9fb 	bl	80038b0 <processEndDeviceBindRsp>
			break;
 80054ba:	e0de      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_BIND_RSP\n");
 80054bc:	4917      	ldr	r1, [pc, #92]	; (800551c <zdoProcess+0x3b0>)
 80054be:	2004      	movs	r0, #4
 80054c0:	f000 f98a 	bl	80057d8 <dbg_print>
			processBindRsp(rpcBuff, rpcLen);
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fe fa2d 	bl	8003928 <processBindRsp>
			break;
 80054ce:	e0d4      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_UNBIND_RSP\n");
 80054d0:	4913      	ldr	r1, [pc, #76]	; (8005520 <zdoProcess+0x3b4>)
 80054d2:	2004      	movs	r0, #4
 80054d4:	f000 f980 	bl	80057d8 <dbg_print>
			processUnbindRsp(rpcBuff, rpcLen);
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fe fa5f 	bl	80039a0 <processUnbindRsp>
			break;
 80054e2:	e0ca      	b.n	800567a <zdoProcess+0x50e>
 80054e4:	0800d770 	.word	0x0800d770
 80054e8:	0800d79c 	.word	0x0800d79c
 80054ec:	0800d7c4 	.word	0x0800d7c4
 80054f0:	0800d7e8 	.word	0x0800d7e8
 80054f4:	0800d80c 	.word	0x0800d80c
 80054f8:	0800d830 	.word	0x0800d830
 80054fc:	0800d854 	.word	0x0800d854
 8005500:	0800d878 	.word	0x0800d878
 8005504:	0800d89c 	.word	0x0800d89c
 8005508:	0800d8c0 	.word	0x0800d8c0
 800550c:	0800d8e8 	.word	0x0800d8e8
 8005510:	0800d90c 	.word	0x0800d90c
 8005514:	0800d930 	.word	0x0800d930
 8005518:	0800d954 	.word	0x0800d954
 800551c:	0800d97c 	.word	0x0800d97c
 8005520:	0800d99c 	.word	0x0800d99c
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005524:	4957      	ldr	r1, [pc, #348]	; (8005684 <zdoProcess+0x518>)
 8005526:	2004      	movs	r0, #4
 8005528:	f000 f956 	bl	80057d8 <dbg_print>
			processMgmtNwkDiscRsp(rpcBuff, rpcLen);
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fe fa71 	bl	8003a18 <processMgmtNwkDiscRsp>
			break;
 8005536:	e0a0      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_LQI_RSP\n");
 8005538:	4953      	ldr	r1, [pc, #332]	; (8005688 <zdoProcess+0x51c>)
 800553a:	2004      	movs	r0, #4
 800553c:	f000 f94c 	bl	80057d8 <dbg_print>
			processMgmtLqiRsp(rpcBuff, rpcLen);
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fe fb93 	bl	8003c70 <processMgmtLqiRsp>
			break;
 800554a:	e096      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_RTG_RSP\n");
 800554c:	494f      	ldr	r1, [pc, #316]	; (800568c <zdoProcess+0x520>)
 800554e:	2004      	movs	r0, #4
 8005550:	f000 f942 	bl	80057d8 <dbg_print>
			processMgmtRtgRsp(rpcBuff, rpcLen);
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fe fd53 	bl	8004004 <processMgmtRtgRsp>
			break;
 800555e:	e08c      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005560:	494b      	ldr	r1, [pc, #300]	; (8005690 <zdoProcess+0x524>)
 8005562:	2004      	movs	r0, #4
 8005564:	f000 f938 	bl	80057d8 <dbg_print>
			processMgmtBindRsp(rpcBuff, rpcLen);
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fe fe31 	bl	80041d4 <processMgmtBindRsp>
			break;
 8005572:	e082      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005574:	4947      	ldr	r1, [pc, #284]	; (8005694 <zdoProcess+0x528>)
 8005576:	2004      	movs	r0, #4
 8005578:	f000 f92e 	bl	80057d8 <dbg_print>
			processMgmtLeaveRsp(rpcBuff, rpcLen);
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fe ffa3 	bl	80044cc <processMgmtLeaveRsp>
			break;
 8005586:	e078      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005588:	4943      	ldr	r1, [pc, #268]	; (8005698 <zdoProcess+0x52c>)
 800558a:	2004      	movs	r0, #4
 800558c:	f000 f924 	bl	80057d8 <dbg_print>
			processMgmtDirectJoinRsp(rpcBuff, rpcLen);
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fe ffd5 	bl	8004544 <processMgmtDirectJoinRsp>
			break;
 800559a:	e06e      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 800559c:	493f      	ldr	r1, [pc, #252]	; (800569c <zdoProcess+0x530>)
 800559e:	2004      	movs	r0, #4
 80055a0:	f000 f91a 	bl	80057d8 <dbg_print>
			processMgmtPermitJoinRsp(rpcBuff, rpcLen);
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff f807 	bl	80045bc <processMgmtPermitJoinRsp>
			break;
 80055ae:	e064      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80055b0:	493b      	ldr	r1, [pc, #236]	; (80056a0 <zdoProcess+0x534>)
 80055b2:	2004      	movs	r0, #4
 80055b4:	f000 f910 	bl	80057d8 <dbg_print>
			processEndDeviceAnnceInd(rpcBuff, rpcLen);
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff f839 	bl	8004634 <processEndDeviceAnnceInd>
			break;
 80055c2:	e05a      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80055c4:	4937      	ldr	r1, [pc, #220]	; (80056a4 <zdoProcess+0x538>)
 80055c6:	2004      	movs	r0, #4
 80055c8:	f000 f906 	bl	80057d8 <dbg_print>
			processMatchDescRspSent(rpcBuff, rpcLen);
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff f8c1 	bl	8004758 <processMatchDescRspSent>
			break;
 80055d6:	e050      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 80055d8:	4933      	ldr	r1, [pc, #204]	; (80056a8 <zdoProcess+0x53c>)
 80055da:	2004      	movs	r0, #4
 80055dc:	f000 f8fc 	bl	80057d8 <dbg_print>
			processStatusErrorRsp(rpcBuff, rpcLen);
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff f957 	bl	8004898 <processStatusErrorRsp>
			break;
 80055ea:	e046      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_SRC_RTG_IND\n");
 80055ec:	492f      	ldr	r1, [pc, #188]	; (80056ac <zdoProcess+0x540>)
 80055ee:	2004      	movs	r0, #4
 80055f0:	f000 f8f2 	bl	80057d8 <dbg_print>
			processSrcRtgInd(rpcBuff, rpcLen);
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff f989 	bl	8004910 <processSrcRtgInd>
			break;
 80055fe:	e03c      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005600:	492b      	ldr	r1, [pc, #172]	; (80056b0 <zdoProcess+0x544>)
 8005602:	2004      	movs	r0, #4
 8005604:	f000 f8e8 	bl	80057d8 <dbg_print>
			processBeaconNotifyInd(rpcBuff, rpcLen);
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff f9ff 	bl	8004a10 <processBeaconNotifyInd>
			break;
 8005612:	e032      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_JOIN_CNF\n");
 8005614:	4927      	ldr	r1, [pc, #156]	; (80056b4 <zdoProcess+0x548>)
 8005616:	2004      	movs	r0, #4
 8005618:	f000 f8de 	bl	80057d8 <dbg_print>
			processJoinCnf(rpcBuff, rpcLen);
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fbaf 	bl	8004d84 <processJoinCnf>
			break;
 8005626:	e028      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005628:	4923      	ldr	r1, [pc, #140]	; (80056b8 <zdoProcess+0x54c>)
 800562a:	2004      	movs	r0, #4
 800562c:	f000 f8d4 	bl	80057d8 <dbg_print>
			processNwkDiscoveryCnf(rpcBuff, rpcLen);
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fbfb 	bl	8004e30 <processNwkDiscoveryCnf>
			break;
 800563a:	e01e      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_LEAVE_IND\n");
 800563c:	491f      	ldr	r1, [pc, #124]	; (80056bc <zdoProcess+0x550>)
 800563e:	2004      	movs	r0, #4
 8005640:	f000 f8ca 	bl	80057d8 <dbg_print>
			processLeaveInd(rpcBuff, rpcLen);
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fc21 	bl	8004e90 <processLeaveInd>
			break;
 800564e:	e014      	b.n	800567a <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005650:	491b      	ldr	r1, [pc, #108]	; (80056c0 <zdoProcess+0x554>)
 8005652:	2004      	movs	r0, #4
 8005654:	f000 f8c0 	bl	80057d8 <dbg_print>
			processMsgCbIncoming(rpcBuff, rpcLen);
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fca5 	bl	8004fac <processMsgCbIncoming>
			break;
 8005662:	e00a      	b.n	800567a <zdoProcess+0x50e>
			        "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8005668:	461a      	mov	r2, r3
			        rpcBuff[1]);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3301      	adds	r3, #1
 800566e:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8005670:	4914      	ldr	r1, [pc, #80]	; (80056c4 <zdoProcess+0x558>)
 8005672:	2001      	movs	r0, #1
 8005674:	f000 f8b0 	bl	80057d8 <dbg_print>
			break;
 8005678:	bf00      	nop
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800d9bc 	.word	0x0800d9bc
 8005688:	0800d9e4 	.word	0x0800d9e4
 800568c:	0800da08 	.word	0x0800da08
 8005690:	0800da2c 	.word	0x0800da2c
 8005694:	0800da50 	.word	0x0800da50
 8005698:	0800da74 	.word	0x0800da74
 800569c:	0800daa0 	.word	0x0800daa0
 80056a0:	0800dacc 	.word	0x0800dacc
 80056a4:	0800daf8 	.word	0x0800daf8
 80056a8:	0800db20 	.word	0x0800db20
 80056ac:	0800db48 	.word	0x0800db48
 80056b0:	0800db68 	.word	0x0800db68
 80056b4:	0800db90 	.word	0x0800db90
 80056b8:	0800dbb0 	.word	0x0800dbb0
 80056bc:	0800dbd8 	.word	0x0800dbd8
 80056c0:	0800dbf8 	.word	0x0800dbf8
 80056c4:	0800dc1c 	.word	0x0800dc1c

080056c8 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	480d      	ldr	r0, [pc, #52]	; (8005710 <processSrsp+0x48>)
 80056dc:	f005 fe40 	bl	800b360 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b25      	cmp	r3, #37	; 0x25
 80056e8:	d109      	bne.n	80056fe <processSrsp+0x36>
	{
	case MT_ZDO_GET_LINK_KEY:
		dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_GET_LINK_KEY\n");
 80056ea:	490a      	ldr	r1, [pc, #40]	; (8005714 <processSrsp+0x4c>)
 80056ec:	2004      	movs	r0, #4
 80056ee:	f000 f873 	bl	80057d8 <dbg_print>
		processGetLinkKey(rpcBuff, rpcLen);
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fd fa0c 	bl	8002b14 <processGetLinkKey>
		break;
 80056fc:	e004      	b.n	8005708 <processSrsp+0x40>
	default:
		dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 80056fe:	4906      	ldr	r1, [pc, #24]	; (8005718 <processSrsp+0x50>)
 8005700:	2002      	movs	r0, #2
 8005702:	f000 f869 	bl	80057d8 <dbg_print>
		break;
 8005706:	bf00      	nop
	}
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20003070 	.word	0x20003070
 8005714:	0800dc48 	.word	0x0800dc48
 8005718:	0800dc6c 	.word	0x0800dc6c

0800571c <zdoRegisterCallbacks>:
 * @param
 *
 * @return
 */
void zdoRegisterCallbacks(mtZdoCb_t cbs)
{
 800571c:	b084      	sub	sp, #16
 800571e:	b580      	push	{r7, lr}
 8005720:	af00      	add	r7, sp, #0
 8005722:	f107 0c08 	add.w	ip, r7, #8
 8005726:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&mtZdoCbs, &cbs, sizeof(mtZdoCb_t));
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <zdoRegisterCallbacks+0x2c>)
 800572c:	4618      	mov	r0, r3
 800572e:	f107 0108 	add.w	r1, r7, #8
 8005732:	2384      	movs	r3, #132	; 0x84
 8005734:	461a      	mov	r2, r3
 8005736:	f005 fe13 	bl	800b360 <memcpy>
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005742:	b004      	add	sp, #16
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000528 	.word	0x20000528

0800574c <mtProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
void mtProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
    //Read CMD0
    switch (rpcBuff[0] & MT_RPC_SUBSYSTEM_MASK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	3b01      	subs	r3, #1
 8005762:	2b05      	cmp	r3, #5
 8005764:	d826      	bhi.n	80057b4 <mtProcess+0x68>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <mtProcess+0x20>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005791 	.word	0x08005791
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057b5 	.word	0x080057b5
 8005778:	0800579d 	.word	0x0800579d
 800577c:	08005785 	.word	0x08005785
 8005780:	080057a9 	.word	0x080057a9
    {
    case MT_RPC_SYS_ZDO:
        //process ZDO RPC's in the ZDO module
        zdoProcess(rpcBuff, rpcLen);
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fcef 	bl	800516c <zdoProcess>
        break;
 800578e:	e01c      	b.n	80057ca <mtProcess+0x7e>

    case MT_RPC_SYS_SYS:
        //process SYS RPC's in the Sys module
        sysProcess(rpcBuff, rpcLen);
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fd f8f5 	bl	8002984 <sysProcess>
        break;
 800579a:	e016      	b.n	80057ca <mtProcess+0x7e>

    case MT_RPC_SYS_AF:
        //process SYS RPC's in the Sys module
        afProcess(rpcBuff, rpcLen);
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fc f8a7 	bl	80018f4 <afProcess>
        break;
 80057a6:	e010      	b.n	80057ca <mtProcess+0x7e>

    case MT_RPC_SYS_SAPI:
        //process SYS RPC's in the Sys module
        sapiProcess(rpcBuff, rpcLen);
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc fbd3 	bl	8001f58 <sapiProcess>
        break;
 80057b2:	e00a      	b.n	80057ca <mtProcess+0x7e>

    default:
        dbg_print(PRINT_LEVEL_VERBOSE,
                "mtProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	781b      	ldrb	r3, [r3, #0]
        dbg_print(PRINT_LEVEL_VERBOSE,
 80057b8:	461a      	mov	r2, r3
                rpcBuff[1]);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3301      	adds	r3, #1
 80057be:	781b      	ldrb	r3, [r3, #0]
        dbg_print(PRINT_LEVEL_VERBOSE,
 80057c0:	4904      	ldr	r1, [pc, #16]	; (80057d4 <mtProcess+0x88>)
 80057c2:	2004      	movs	r0, #4
 80057c4:	f000 f808 	bl	80057d8 <dbg_print>

        break;
 80057c8:	bf00      	nop
    }

}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	0800dc90 	.word	0x0800dc90

080057d8 <dbg_print>:
 * None.
 *
 * @return      None.
 **************************************************************************************************
 */
void dbg_print(int print_level, const char *fmt, ...) {
 80057d8:	b40e      	push	{r1, r2, r3}
 80057da:	b580      	push	{r7, lr}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
	static char working_buffer[256];

	if (print_level > PRINT_LEVEL) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	dc0e      	bgt.n	8005806 <dbg_print+0x2e>
		return;
	}
	else {
		// Create vaarg list
		va_list args;
		va_start(args, fmt);
 80057e8:	f107 0320 	add.w	r3, r7, #32
 80057ec:	60fb      	str	r3, [r7, #12]

		// Write string to buffer
		vsnprintf(working_buffer, 256, fmt, args);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f6:	4807      	ldr	r0, [pc, #28]	; (8005814 <dbg_print+0x3c>)
 80057f8:	f006 f946 	bl	800ba88 <vsniprintf>

		// Close vaarg list
		va_end(args);

		// send data
		log_print("%s", working_buffer);
 80057fc:	4905      	ldr	r1, [pc, #20]	; (8005814 <dbg_print+0x3c>)
 80057fe:	4806      	ldr	r0, [pc, #24]	; (8005818 <dbg_print+0x40>)
 8005800:	f7fa ff20 	bl	8000644 <log_print>
 8005804:	e000      	b.n	8005808 <dbg_print+0x30>
		return;
 8005806:	bf00      	nop
	}
}
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005810:	b003      	add	sp, #12
 8005812:	4770      	bx	lr
 8005814:	200005ac 	.word	0x200005ac
 8005818:	0800dcbc 	.word	0x0800dcbc

0800581c <rpcTransportOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcTransportOpen(char *_devicePath, uint32_t port) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
	rpc_q_uart_tx = xQueueCreate(256, sizeof(uint8_t));
 8005826:	2200      	movs	r2, #0
 8005828:	2101      	movs	r1, #1
 800582a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800582e:	f003 fbe7 	bl	8009000 <xQueueGenericCreate>
 8005832:	4602      	mov	r2, r0
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <rpcTransportOpen+0x38>)
 8005836:	601a      	str	r2, [r3, #0]
	rpc_q_uart_rx = xQueueCreate(256, sizeof(uint8_t));
 8005838:	2200      	movs	r2, #0
 800583a:	2101      	movs	r1, #1
 800583c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005840:	f003 fbde 	bl	8009000 <xQueueGenericCreate>
 8005844:	4602      	mov	r2, r0
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <rpcTransportOpen+0x3c>)
 8005848:	601a      	str	r2, [r3, #0]
	return 0;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200006ac 	.word	0x200006ac
 8005858:	200006b0 	.word	0x200006b0

0800585c <rpcTransportISR>:
/*********************************************************************
 * @fn      rpcTransportISR
 *
 * @brief   Interrupt Service Routine for RPC uart
 */
void rpcTransportISR(void) {
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
	// read status register
	isr_stat = hlpuart1.Instance->ISR;
 8005860:	4b26      	ldr	r3, [pc, #152]	; (80058fc <rpcTransportISR+0xa0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <rpcTransportISR+0xa4>)
 8005868:	6013      	str	r3, [r2, #0]

	// overrun error?
	if (isr_stat & USART_ISR_ORE)
 800586a:	4b25      	ldr	r3, [pc, #148]	; (8005900 <rpcTransportISR+0xa4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <rpcTransportISR+0x2a>
		hlpuart1.Instance->ICR |= USART_ICR_ORECF;
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <rpcTransportISR+0xa0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <rpcTransportISR+0xa0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	621a      	str	r2, [r3, #32]

	// check for rx interrupt
	if (isr_stat & USART_ISR_RXNE) {
 8005886:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <rpcTransportISR+0xa4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <rpcTransportISR+0x5e>
		// read the data
		isr_data = hlpuart1.Instance->RDR & 0xFF;
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <rpcTransportISR+0xa0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005898:	b29b      	uxth	r3, r3
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <rpcTransportISR+0xa8>)
 800589e:	701a      	strb	r2, [r3, #0]
		// check for errors
		if ((isr_stat & (USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE)) == 0) {
 80058a0:	4b17      	ldr	r3, [pc, #92]	; (8005900 <rpcTransportISR+0xa4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 030e 	and.w	r3, r3, #14
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <rpcTransportISR+0x5e>
			// Transmit data to queue
			xQueueSendFromISR(rpc_q_uart_rx, (void*) &isr_data, NULL);
 80058ac:	4b16      	ldr	r3, [pc, #88]	; (8005908 <rpcTransportISR+0xac>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	2300      	movs	r3, #0
 80058b2:	2200      	movs	r2, #0
 80058b4:	4913      	ldr	r1, [pc, #76]	; (8005904 <rpcTransportISR+0xa8>)
 80058b6:	f003 fcfb 	bl	80092b0 <xQueueGenericSendFromISR>
		}
	}

	// check for data to send
	if (isr_stat & USART_ISR_TC) {
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <rpcTransportISR+0xa4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d018      	beq.n	80058f8 <rpcTransportISR+0x9c>
		// grab data from fifo
		if (xQueueReceiveFromISR(rpc_q_uart_tx, (void*) &isr_data, NULL) == pdFALSE) {
 80058c6:	4b11      	ldr	r3, [pc, #68]	; (800590c <rpcTransportISR+0xb0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	490d      	ldr	r1, [pc, #52]	; (8005904 <rpcTransportISR+0xa8>)
 80058ce:	4618      	mov	r0, r3
 80058d0:	f003 ff66 	bl	80097a0 <xQueueReceiveFromISR>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <rpcTransportISR+0x90>
			// end of transmission
			CLEAR_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 80058da:	4b08      	ldr	r3, [pc, #32]	; (80058fc <rpcTransportISR+0xa0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <rpcTransportISR+0xa0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
		else {
			// send another byte
			hlpuart1.Instance->TDR = isr_data;
		}
	}
}
 80058ea:	e005      	b.n	80058f8 <rpcTransportISR+0x9c>
			hlpuart1.Instance->TDR = isr_data;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <rpcTransportISR+0xa8>)
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	4b02      	ldr	r3, [pc, #8]	; (80058fc <rpcTransportISR+0xa0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	b292      	uxth	r2, r2
 80058f6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20002f6c 	.word	0x20002f6c
 8005900:	200006b4 	.word	0x200006b4
 8005904:	200006b8 	.word	0x200006b8
 8005908:	200006b0 	.word	0x200006b0
 800590c:	200006ac 	.word	0x200006ac

08005910 <rpcTransportWrite>:
 *
 * @param   fd - file descriptor of the UART device
 *
 * @return  status
 */
void rpcTransportWrite(uint8_t *buf, uint8_t len) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
	for (uint16_t i = 0; i < len; i++) {
 800591c:	2300      	movs	r3, #0
 800591e:	81fb      	strh	r3, [r7, #14]
 8005920:	e01b      	b.n	800595a <rpcTransportWrite+0x4a>
		// add data to tx queue
		xQueueSend(rpc_q_uart_tx, (void*) &buf[i], 1);
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <rpcTransportWrite+0x5c>)
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	18d1      	adds	r1, r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	2201      	movs	r2, #1
 8005930:	f003 fbc4 	bl	80090bc <xQueueGenericSend>

		// enable receive and transmit interrupt
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <rpcTransportWrite+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <rpcTransportWrite+0x60>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	601a      	str	r2, [r3, #0]
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <rpcTransportWrite+0x60>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <rpcTransportWrite+0x60>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005952:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++) {
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	3301      	adds	r3, #1
 8005958:	81fb      	strh	r3, [r7, #14]
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	b29b      	uxth	r3, r3
 800595e:	89fa      	ldrh	r2, [r7, #14]
 8005960:	429a      	cmp	r2, r3
 8005962:	d3de      	bcc.n	8005922 <rpcTransportWrite+0x12>
	}
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200006ac 	.word	0x200006ac
 8005970:	20002f6c 	.word	0x20002f6c

08005974 <rpcTransportRead>:
 *
 * @param   fd - file descriptor of the UART device
 *
 * @return  status
 */
uint8_t rpcTransportRead(uint8_t *buf, uint8_t len) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
	int index = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 0) == pdTRUE) {
 8005984:	e006      	b.n	8005994 <rpcTransportRead+0x20>
		index++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
		if (index == len)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	429a      	cmp	r2, r3
 8005992:	d00c      	beq.n	80059ae <rpcTransportRead+0x3a>
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 0) == pdTRUE) {
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <rpcTransportRead+0x48>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	4619      	mov	r1, r3
 80059a2:	f003 fd19 	bl	80093d8 <xQueueReceive>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d0ec      	beq.n	8005986 <rpcTransportRead+0x12>
 80059ac:	e000      	b.n	80059b0 <rpcTransportRead+0x3c>
			break;
 80059ae:	bf00      	nop
	}
	return index;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	b2db      	uxtb	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200006b0 	.word	0x200006b0

080059c0 <rpcOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcOpen(char *_devicePath, uint32_t port) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	int fd;

	// open RPC transport
	fd = rpcTransportOpen(_devicePath, port);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ff25 	bl	800581c <rpcTransportOpen>
 80059d2:	60f8      	str	r0, [r7, #12]
	if (fd < 0) {
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da0a      	bge.n	80059f0 <rpcOpen+0x30>
		perror(_devicePath);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f005 fda2 	bl	800b524 <perror>
		dbg_print(PRINT_LEVEL_ERROR, "rpcOpen: %s device open failed\n", _devicePath);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	490b      	ldr	r1, [pc, #44]	; (8005a10 <rpcOpen+0x50>)
 80059e4:	2000      	movs	r0, #0
 80059e6:	f7ff fef7 	bl	80057d8 <dbg_print>
		return (-1);
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	e00a      	b.n	8005a06 <rpcOpen+0x46>
	}

	//sem_init(&rpcSem, 0, 1); // initialize mutex to 1 - binary semaphore
	//sem_init(&srspSem, 0, 0); // initialize mutex to 0 - binary semaphore

	srspSem = xSemaphoreCreateBinary();
 80059f0:	2203      	movs	r2, #3
 80059f2:	2100      	movs	r1, #0
 80059f4:	2001      	movs	r0, #1
 80059f6:	f003 fb03 	bl	8009000 <xQueueGenericCreate>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <rpcOpen+0x54>)
 80059fe:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(srspSem);

	rpcForceRun();
 8005a00:	f000 f85e 	bl	8005ac0 <rpcForceRun>

	return fd;
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800dcc0 	.word	0x0800dcc0
 8005a14:	200006bc 	.word	0x200006bc

08005a18 <rpcInitMq>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcInitMq(void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0

	llq_open(&rpcLlq);
 8005a1c:	4802      	ldr	r0, [pc, #8]	; (8005a28 <rpcInitMq+0x10>)
 8005a1e:	f000 fac3 	bl	8005fa8 <llq_open>
	return 0;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	200006c4 	.word	0x200006c4

08005a2c <rpcWaitMqClientMsg>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcWaitMqClientMsg(uint32_t timeout) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b0c4      	sub	sp, #272	; 0x110
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	6018      	str	r0, [r3, #0]
	uint8_t rpcFrame[RPC_MAX_LEN + 1];
	int32_t rpcLen;

	dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: timeout=%d\n", timeout);
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	491d      	ldr	r1, [pc, #116]	; (8005ab0 <rpcWaitMqClientMsg+0x84>)
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	f7ff fecb 	bl	80057d8 <dbg_print>

	rpcLen = llq_timedreceive(&rpcLlq, (char*) rpcFrame, RPC_MAX_LEN + 1, timeout);
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f107 0108 	add.w	r1, r7, #8
 8005a4a:	f240 1201 	movw	r2, #257	; 0x101
 8005a4e:	4819      	ldr	r0, [pc, #100]	; (8005ab4 <rpcWaitMqClientMsg+0x88>)
 8005a50:	f000 fabb 	bl	8005fca <llq_timedreceive>
 8005a54:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (rpcLen != -1) {
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d010      	beq.n	8005a84 <rpcWaitMqClientMsg+0x58>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: processing MT[%d]\n", rpcLen);
 8005a62:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005a66:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <rpcWaitMqClientMsg+0x8c>)
 8005a68:	2002      	movs	r0, #2
 8005a6a:	f7ff feb5 	bl	80057d8 <dbg_print>
		// process incoming message
		mtProcess(rpcFrame, rpcLen);
 8005a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	f107 0308 	add.w	r3, r7, #8
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fe66 	bl	800574c <mtProcess>
	else {
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d] - %s\n", rpcLen, strerror(errno));
		return -1;
	}

	return 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e00f      	b.n	8005aa4 <rpcWaitMqClientMsg+0x78>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d] - %s\n", rpcLen, strerror(errno));
 8005a84:	f005 fc32 	bl	800b2ec <__errno>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f005 ffc3 	bl	800ba18 <strerror>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005a98:	4908      	ldr	r1, [pc, #32]	; (8005abc <rpcWaitMqClientMsg+0x90>)
 8005a9a:	2002      	movs	r0, #2
 8005a9c:	f7ff fe9c 	bl	80057d8 <dbg_print>
		return -1;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0800dd44 	.word	0x0800dd44
 8005ab4:	200006c4 	.word	0x200006c4
 8005ab8:	0800dd64 	.word	0x0800dd64
 8005abc:	0800dd8c 	.word	0x0800dd8c

08005ac0 <rpcForceRun>:
 *
 * @param   -
 *
 * @return  -
 */
void rpcForceRun(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
	uint8_t forceBoot = SB_FORCE_RUN;
 8005ac6:	2307      	movs	r3, #7
 8005ac8:	71fb      	strb	r3, [r7, #7]

	// send the bootloader force boot incase we have a bootloader that waits
	rpcTransportWrite(&forceBoot, 1);
 8005aca:	1dfb      	adds	r3, r7, #7
 8005acc:	2101      	movs	r1, #1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ff1e 	bl	8005910 <rpcTransportWrite>
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <rpcProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
int32_t rpcProcess(void) {
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b0c3      	sub	sp, #268	; 0x10c
 8005ae0:	af00      	add	r7, sp, #0
	uint8_t rpcLen, rpcTempLen, bytesRead, sofByte, rpcBuffIdx;
	uint8_t retryAttempts = 0, len, rpcBuff[RPC_MAX_LEN];
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t fcs;

#ifndef HAL_UART_IP //No SOF for IP
	//read first byte and check it is a SOF
	bytesRead = rpcTransportRead(&sofByte, 1);
 8005ae8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005aec:	2101      	movs	r1, #1
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ff40 	bl	8005974 <rpcTransportRead>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	if ((sofByte == MT_RPC_SOF) && (bytesRead == 1))
 8005afa:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8005afe:	2bfe      	cmp	r3, #254	; 0xfe
 8005b00:	f040 8101 	bne.w	8005d06 <rpcProcess+0x22a>
 8005b04:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 80fc 	bne.w	8005d06 <rpcProcess+0x22a>
#endif
	{
		// clear retry counter
		retryAttempts = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		// read length byte
		bytesRead = rpcTransportRead(&rpcLen, 1);
 8005b14:	f207 1301 	addw	r3, r7, #257	; 0x101
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ff2a 	bl	8005974 <rpcTransportRead>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (bytesRead == 1) {
 8005b26:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	f040 80e4 	bne.w	8005cf8 <rpcProcess+0x21c>
			len = rpcLen;
 8005b30:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005b34:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			rpcBuff[0] = rpcLen;
 8005b38:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	701a      	strb	r2, [r3, #0]
#ifdef HAL_UART_IP //No FCS for IP
			//allocating RPC payload (+ cmd0, cmd1)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN;
#else
			//allocating RPC payload (+ cmd0, cmd1 and fcs)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN + RPC_UART_FCS_LEN;
 8005b40:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005b44:	3303      	adds	r3, #3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
#endif

			//non blocking read, so we need to wait for the rpc to be read
			rpcBuffIdx = 1;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			rpcTempLen = rpcLen;
 8005b52:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005b56:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			while (rpcTempLen > 0) {
 8005b5a:	e04e      	b.n	8005bfa <rpcProcess+0x11e>
				// read RPC frame
				bytesRead = rpcTransportRead(&(rpcBuff[rpcBuffIdx]), rpcTempLen);
 8005b5c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005b60:	463a      	mov	r2, r7
 8005b62:	4413      	add	r3, r2
 8005b64:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ff02 	bl	8005974 <rpcTransportRead>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				// check for error
				if (bytesRead > rpcTempLen) {
 8005b76:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8005b7a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d923      	bls.n	8005bca <rpcProcess+0xee>
					//there was an error
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: read of %d bytes failed - %s\n", rpcTempLen, strerror(errno));
 8005b82:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 8005b86:	f005 fbb1 	bl	800b2ec <__errno>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f005 ff42 	bl	800ba18 <strerror>
 8005b94:	4603      	mov	r3, r0
 8005b96:	4622      	mov	r2, r4
 8005b98:	495e      	ldr	r1, [pc, #376]	; (8005d14 <rpcProcess+0x238>)
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	f7ff fe1c 	bl	80057d8 <dbg_print>

					// check whether retry limits has been reached
					if (retryAttempts++ < 5) {
 8005ba0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d806      	bhi.n	8005bbc <rpcProcess+0xe0>
						// sleep for 10ms
						vTaskDelay(10);
 8005bae:	200a      	movs	r0, #10
 8005bb0:	f004 f92a 	bl	8009e08 <vTaskDelay>

						// try again
						bytesRead = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8005bba:	e006      	b.n	8005bca <rpcProcess+0xee>
					}
					else {
						// something went wrong, abort
						dbg_print(PRINT_LEVEL_ERROR, "rpcProcess: transport read failed too many times\n");
 8005bbc:	4956      	ldr	r1, [pc, #344]	; (8005d18 <rpcProcess+0x23c>)
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f7ff fe0a 	bl	80057d8 <dbg_print>

						return -1;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	e09f      	b.n	8005d0a <rpcProcess+0x22e>
					}
				}

				// update counters
				if (rpcTempLen > bytesRead) {
 8005bca:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8005bce:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d907      	bls.n	8005be6 <rpcProcess+0x10a>
					rpcTempLen -= bytesRead;
 8005bd6:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8005bda:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005be4:	e002      	b.n	8005bec <rpcProcess+0x110>
				}
				else {
					rpcTempLen = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				}
				rpcBuffIdx += bytesRead;
 8005bec:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8005bf0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			while (rpcTempLen > 0) {
 8005bfa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1ac      	bne.n	8005b5c <rpcProcess+0x80>
			}

			// print out incoming RPC frame
			printRpcMsg("SOC IN  <--", MT_RPC_SOF, len, &rpcBuff[1]);
 8005c02:	463b      	mov	r3, r7
 8005c04:	3301      	adds	r3, #1
 8005c06:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 8005c0a:	21fe      	movs	r1, #254	; 0xfe
 8005c0c:	4843      	ldr	r0, [pc, #268]	; (8005d1c <rpcProcess+0x240>)
 8005c0e:	f000 f979 	bl	8005f04 <printRpcMsg>

			//Verify FCS of incoming MT frames
			fcs = calcFcs(&rpcBuff[0], (len + 3));
 8005c12:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8005c16:	3303      	adds	r3, #3
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f954 	bl	8005ecc <calcFcs>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			if (rpcBuff[len + 3] != fcs) {
 8005c2a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8005c2e:	3303      	adds	r3, #3
 8005c30:	463a      	mov	r2, r7
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d00e      	beq.n	8005c5a <rpcProcess+0x17e>
				dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: fcs error %x:%x\n", rpcBuff[len + 3], fcs);
 8005c3c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8005c40:	3303      	adds	r3, #3
 8005c42:	463a      	mov	r2, r7
 8005c44:	5cd3      	ldrb	r3, [r2, r3]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8005c4c:	4934      	ldr	r1, [pc, #208]	; (8005d20 <rpcProcess+0x244>)
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f7ff fdc2 	bl	80057d8 <dbg_print>
				return -1;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	e057      	b.n	8005d0a <rpcProcess+0x22e>
			}

			if ((rpcBuff[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005c62:	2b60      	cmp	r3, #96	; 0x60
 8005c64:	d136      	bne.n	8005cd4 <rpcProcess+0x1f8>
				// SRSP command ID deteced
				if (expectedSrspCmdId == (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK)) {
 8005c66:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <rpcProcess+0x248>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d120      	bne.n	8005cba <rpcProcess+0x1de>
					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: processing expected srsp [%02X]\n", rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK);
 8005c78:	463b      	mov	r3, r7
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	461a      	mov	r2, r3
 8005c82:	4929      	ldr	r1, [pc, #164]	; (8005d28 <rpcProcess+0x24c>)
 8005c84:	2002      	movs	r0, #2
 8005c86:	f7ff fda7 	bl	80057d8 <dbg_print>

					//unblock waiting sreq
					xSemaphoreGive(srspSem);
 8005c8a:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <rpcProcess+0x250>)
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2200      	movs	r2, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	f003 fa12 	bl	80090bc <xQueueGenericSend>

					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes SRSP to head of the queue\n", rpcLen);
 8005c98:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4924      	ldr	r1, [pc, #144]	; (8005d30 <rpcProcess+0x254>)
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	f7ff fd99 	bl	80057d8 <dbg_print>

					// send message to queue
					llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 1);
 8005ca6:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005caa:	461a      	mov	r2, r3
 8005cac:	463b      	mov	r3, r7
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4820      	ldr	r0, [pc, #128]	; (8005d34 <rpcProcess+0x258>)
 8005cb4:	f000 f9dd 	bl	8006072 <llq_add>
 8005cb8:	e01c      	b.n	8005cf4 <rpcProcess+0x218>
				}
				else {
					// unexpected SRSP discard
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: UNEXPECTED SREQ!: %02X%s:%02X%s", expectedSrspCmdId, (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK));
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <rpcProcess+0x248>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	491b      	ldr	r1, [pc, #108]	; (8005d38 <rpcProcess+0x25c>)
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f7ff fd84 	bl	80057d8 <dbg_print>
					return 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e01a      	b.n	8005d0a <rpcProcess+0x22e>
				}
			}
			else {
				// should be AREQ frame
				dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes AREQ to tail of the que\n", rpcLen);
 8005cd4:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4918      	ldr	r1, [pc, #96]	; (8005d3c <rpcProcess+0x260>)
 8005cdc:	2002      	movs	r0, #2
 8005cde:	f7ff fd7b 	bl	80057d8 <dbg_print>

				// send message to queue
				llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 0);
 8005ce2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	463b      	mov	r3, r7
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	2300      	movs	r3, #0
 8005cee:	4811      	ldr	r0, [pc, #68]	; (8005d34 <rpcProcess+0x258>)
 8005cf0:	f000 f9bf 	bl	8006072 <llq_add>
			}

			return 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e008      	b.n	8005d0a <rpcProcess+0x22e>
		}
		else {
			dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: Len Not read [%x]\n", bytesRead);
 8005cf8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4910      	ldr	r1, [pc, #64]	; (8005d40 <rpcProcess+0x264>)
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7ff fd69 	bl	80057d8 <dbg_print>
	}
	else {
		//dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: No valid Start Of Frame found [%x:%x]\n", sofByte, bytesRead);
	}

	return -1;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd90      	pop	{r4, r7, pc}
 8005d14:	0800ddb8 	.word	0x0800ddb8
 8005d18:	0800dde4 	.word	0x0800dde4
 8005d1c:	0800de18 	.word	0x0800de18
 8005d20:	0800de24 	.word	0x0800de24
 8005d24:	200006c0 	.word	0x200006c0
 8005d28:	0800de44 	.word	0x0800de44
 8005d2c:	200006bc 	.word	0x200006bc
 8005d30:	0800de74 	.word	0x0800de74
 8005d34:	200006c4 	.word	0x200006c4
 8005d38:	0800deac 	.word	0x0800deac
 8005d3c:	0800ded8 	.word	0x0800ded8
 8005d40:	0800df10 	.word	0x0800df10

08005d44 <rpcSendFrame>:
 *
 * @param   cmd0 System, cmd1 subsystem, ptr to payload, lenght of payload
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
uint8_t rpcSendFrame(uint8_t cmd0, uint8_t cmd1, uint8_t *payload, uint8_t payload_len) {
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b0c5      	sub	sp, #276	; 0x114
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4639      	mov	r1, r7
 8005d50:	600a      	str	r2, [r1, #0]
 8005d52:	4619      	mov	r1, r3
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	4622      	mov	r2, r4
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	1dbb      	adds	r3, r7, #6
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	1d7b      	adds	r3, r7, #5
 8005d62:	460a      	mov	r2, r1
 8005d64:	701a      	strb	r2, [r3, #0]
	uint8_t buf[RPC_MAX_LEN];
	int32_t status = MT_RPC_SUCCESS;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	// block here if SREQ is in progress
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Blocking on RPC sem\n");
 8005d6c:	494f      	ldr	r1, [pc, #316]	; (8005eac <rpcSendFrame+0x168>)
 8005d6e:	2002      	movs	r0, #2
 8005d70:	f7ff fd32 	bl	80057d8 <dbg_print>
	//sem_wait(&rpcSem);
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Sending RPC\n");
 8005d74:	494e      	ldr	r1, [pc, #312]	; (8005eb0 <rpcSendFrame+0x16c>)
 8005d76:	2002      	movs	r0, #2
 8005d78:	f7ff fd2e 	bl	80057d8 <dbg_print>

	// fill in header bytes
	buf[0] = MT_RPC_SOF;
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	22fe      	movs	r2, #254	; 0xfe
 8005d82:	701a      	strb	r2, [r3, #0]
	buf[1] = payload_len;
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	1d7a      	adds	r2, r7, #5
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	705a      	strb	r2, [r3, #1]
	buf[2] = cmd0;
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	1dfa      	adds	r2, r7, #7
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	709a      	strb	r2, [r3, #2]
	buf[3] = cmd1;
 8005d98:	f107 030c 	add.w	r3, r7, #12
 8005d9c:	1dba      	adds	r2, r7, #6
 8005d9e:	7812      	ldrb	r2, [r2, #0]
 8005da0:	70da      	strb	r2, [r3, #3]

	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d106      	bne.n	8005dbc <rpcSendFrame+0x78>
		// calculate expected SRSP
		expectedSrspCmdId = (cmd0 & MT_RPC_SUBSYSTEM_MASK);
 8005dae:	1dfb      	adds	r3, r7, #7
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <rpcSendFrame+0x170>)
 8005dba:	701a      	strb	r2, [r3, #0]
	}

	if (payload_len > 0) {
 8005dbc:	1d7b      	adds	r3, r7, #5
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <rpcSendFrame+0x94>
		// copy payload to buffer
		memcpy(buf + RPC_UART_HDR_LEN, payload, payload_len);
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	3304      	adds	r3, #4
 8005dca:	1d7a      	adds	r2, r7, #5
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	4639      	mov	r1, r7
 8005dd0:	6809      	ldr	r1, [r1, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f005 fac4 	bl	800b360 <memcpy>
	}

	// calculate FCS field
	buf[payload_len + RPC_UART_HDR_LEN] = calcFcs(&buf[RPC_UART_FRAME_START_IDX], payload_len + RPC_HDR_LEN);
 8005dd8:	1d7b      	adds	r3, r7, #5
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	1d7b      	adds	r3, r7, #5
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	1d1c      	adds	r4, r3, #4
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	3301      	adds	r3, #1
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f86c 	bl	8005ecc <calcFcs>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	551a      	strb	r2, [r3, r4]
#ifdef HAL_UART_IP
	// No SOF or FCS
	rpcTransportWrite(buf+1, payload_len + RPC_HDR_LEN + RPC_UART_FCS_LEN);
#else
	// send out RPC  message
	rpcTransportWrite(buf, payload_len + RPC_UART_HDR_LEN + RPC_UART_FCS_LEN);
 8005dfe:	1d7b      	adds	r3, r7, #5
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	3305      	adds	r3, #5
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fd7f 	bl	8005910 <rpcTransportWrite>
#endif

	// print out message to be sent
	printRpcMsg("SOC OUT -->", buf[0], payload_len, &buf[2]);
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	1c98      	adds	r0, r3, #2
 8005e1e:	1d7b      	adds	r3, r7, #5
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	4603      	mov	r3, r0
 8005e24:	4824      	ldr	r0, [pc, #144]	; (8005eb8 <rpcSendFrame+0x174>)
 8005e26:	f000 f86d 	bl	8005f04 <printRpcMsg>

	// wait for SRSP if necessary
	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8005e2a:	1dfb      	adds	r3, r7, #7
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d131      	bne.n	8005e9a <rpcSendFrame+0x156>
		dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: waiting for SRSP [%02x]\n", expectedSrspCmdId);
 8005e36:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <rpcSendFrame+0x170>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	491f      	ldr	r1, [pc, #124]	; (8005ebc <rpcSendFrame+0x178>)
 8005e3e:	2002      	movs	r0, #2
 8005e40:	f7ff fcca 	bl	80057d8 <dbg_print>

		//Wait for the SRSP
		status = (xSemaphoreTake(srspSem, SRSP_TIMEOUT_MS) == pdTRUE) ? 0 : -1;
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <rpcSendFrame+0x17c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f003 fb9f 	bl	8009590 <xQueueSemaphoreTake>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <rpcSendFrame+0x118>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e001      	b.n	8005e60 <rpcSendFrame+0x11c>
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if (status == -1) {
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d10b      	bne.n	8005e86 <rpcSendFrame+0x142>
			dbg_print(PRINT_LEVEL_WARNING, "rpcSendFrame: SRSP Error - CMD0: 0x%02X CMD1: 0x%02X\n", cmd0, cmd1);
 8005e6e:	1dfb      	adds	r3, r7, #7
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	1dbb      	adds	r3, r7, #6
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	4913      	ldr	r1, [pc, #76]	; (8005ec4 <rpcSendFrame+0x180>)
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f7ff fcad 	bl	80057d8 <dbg_print>
			status = MT_RPC_ERR_SUBSYSTEM;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e84:	e006      	b.n	8005e94 <rpcSendFrame+0x150>
		}
		else {
			dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Receive SRSP\n");
 8005e86:	4910      	ldr	r1, [pc, #64]	; (8005ec8 <rpcSendFrame+0x184>)
 8005e88:	2002      	movs	r0, #2
 8005e8a:	f7ff fca5 	bl	80057d8 <dbg_print>
			status = MT_RPC_SUCCESS;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		//set expected SRSP to invalid
		expectedSrspCmdId = 0xFF;
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <rpcSendFrame+0x170>)
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	701a      	strb	r2, [r3, #0]
	}

	//Unlock RPC sem
	//sem_post(&rpcSem);

	return status;
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	b2db      	uxtb	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	0800df30 	.word	0x0800df30
 8005eb0:	0800df54 	.word	0x0800df54
 8005eb4:	200006c0 	.word	0x200006c0
 8005eb8:	0800df70 	.word	0x0800df70
 8005ebc:	0800df7c 	.word	0x0800df7c
 8005ec0:	200006bc 	.word	0x200006bc
 8005ec4:	0800dfa4 	.word	0x0800dfa4
 8005ec8:	0800dfdc 	.word	0x0800dfdc

08005ecc <calcFcs>:
 * @param   msg  - pointer to the RPC general format frame message
 * @param   size - RPC general format frame size
 *
 * @return  FCS value
 */
static uint8_t calcFcs(uint8_t *msg, uint8_t size) {
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]

	// calculate FCS by XORing all bytes
	while (size--) {
 8005edc:	e006      	b.n	8005eec <calcFcs+0x20>
		result ^= *msg++;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	4053      	eors	r3, r2
 8005eea:	73fb      	strb	r3, [r7, #15]
	while (size--) {
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	70fa      	strb	r2, [r7, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f3      	bne.n	8005ede <calcFcs+0x12>
	}

	return result;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <printRpcMsg>:
 * @param   len - length byte
 * @param   msg  - pointer to the RPC message starting from Cmd0 byte
 *
 * @return  FCS value
 */
static void printRpcMsg(char *preMsg, uint8_t sof, uint8_t len, uint8_t *msg) {
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b08b      	sub	sp, #44	; 0x2c
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	72fb      	strb	r3, [r7, #11]
 8005f12:	4613      	mov	r3, r2
 8005f14:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	// print headers
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%s %d Bytes: SOF:%02X, Len:%02X, CMD0:%02X, CMD1:%02X, Payload:", preMsg, len + 5, sof, len, msg[0], msg[1]);
 8005f16:	7abb      	ldrb	r3, [r7, #10]
 8005f18:	1d58      	adds	r0, r3, #5
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	7aba      	ldrb	r2, [r7, #10]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	7809      	ldrb	r1, [r1, #0]
 8005f22:	460c      	mov	r4, r1
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	3101      	adds	r1, #1
 8005f28:	7809      	ldrb	r1, [r1, #0]
 8005f2a:	9103      	str	r1, [sp, #12]
 8005f2c:	9402      	str	r4, [sp, #8]
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	4603      	mov	r3, r0
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4917      	ldr	r1, [pc, #92]	; (8005f94 <printRpcMsg+0x90>)
 8005f38:	2003      	movs	r0, #3
 8005f3a:	f7ff fc4d 	bl	80057d8 <dbg_print>

	// print frame payload
	for (i = 2; i < len + 2; i++) {
 8005f3e:	2302      	movs	r3, #2
 8005f40:	75fb      	strb	r3, [r7, #23]
 8005f42:	e014      	b.n	8005f6e <printRpcMsg+0x6a>
		dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%02X%s", msg[i], i < (len + 2 - 1) ? ":" : ",");
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	7dfa      	ldrb	r2, [r7, #23]
 8005f50:	7abb      	ldrb	r3, [r7, #10]
 8005f52:	3301      	adds	r3, #1
 8005f54:	429a      	cmp	r2, r3
 8005f56:	da01      	bge.n	8005f5c <printRpcMsg+0x58>
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <printRpcMsg+0x94>)
 8005f5a:	e000      	b.n	8005f5e <printRpcMsg+0x5a>
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <printRpcMsg+0x98>)
 8005f5e:	460a      	mov	r2, r1
 8005f60:	490f      	ldr	r1, [pc, #60]	; (8005fa0 <printRpcMsg+0x9c>)
 8005f62:	2003      	movs	r0, #3
 8005f64:	f7ff fc38 	bl	80057d8 <dbg_print>
	for (i = 2; i < len + 2; i++) {
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
 8005f6e:	7dfa      	ldrb	r2, [r7, #23]
 8005f70:	7abb      	ldrb	r3, [r7, #10]
 8005f72:	3302      	adds	r3, #2
 8005f74:	429a      	cmp	r2, r3
 8005f76:	dbe5      	blt.n	8005f44 <printRpcMsg+0x40>
	}

	// print FCS
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, " FCS:%02X\n", msg[i]);
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	4908      	ldr	r1, [pc, #32]	; (8005fa4 <printRpcMsg+0xa0>)
 8005f84:	2003      	movs	r0, #3
 8005f86:	f7ff fc27 	bl	80057d8 <dbg_print>

}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	0800dff8 	.word	0x0800dff8
 8005f98:	0800e038 	.word	0x0800e038
 8005f9c:	0800e03c 	.word	0x0800e03c
 8005fa0:	0800e040 	.word	0x0800e040
 8005fa4:	0800e048 	.word	0x0800e048

08005fa8 <llq_open>:
 *
 * @param    llq_t *hndl - handle to queue to be created
 *
 * @return   none
 */
void llq_open(llq_t *hndl) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	hndl->queue = xQueueCreate(Q_SIZE, sizeof(queue_data_t));
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005fb6:	2008      	movs	r0, #8
 8005fb8:	f003 f822 	bl	8009000 <xQueueGenericCreate>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <llq_timedreceive>:
 * @Param	int maxLength - Max length of message to read
 * @Param	struct timespec * timeout - Timeout value
 *
 * @return   length of message read from queue
 */
int llq_timedreceive(llq_t *hndl, char *buffer, int maxLength, int timeout) {
 8005fca:	b590      	push	{r4, r7, lr}
 8005fcc:	b0c9      	sub	sp, #292	; 0x124
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	f107 040c 	add.w	r4, r7, #12
 8005fd4:	6020      	str	r0, [r4, #0]
 8005fd6:	f107 0008 	add.w	r0, r7, #8
 8005fda:	6001      	str	r1, [r0, #0]
 8005fdc:	1d39      	adds	r1, r7, #4
 8005fde:	600a      	str	r2, [r1, #0]
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	6013      	str	r3, [r2, #0]
	int sepmRnt = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	queue_data_t q_buf = { 0 };
 8005fea:	f107 0314 	add.w	r3, r7, #20
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f005 f9bd 	bl	800b376 <memset>

	// wait for a message or timeout
	if (xQueueReceive(hndl->queue, &q_buf, timeout) != pdTRUE) {
 8005ffc:	f107 030c 	add.w	r3, r7, #12
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	463b      	mov	r3, r7
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4619      	mov	r1, r3
 800600e:	f003 f9e3 	bl	80093d8 <xQueueReceive>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d003      	beq.n	8006020 <llq_timedreceive+0x56>
		sepmRnt = -1;
 8006018:	f04f 33ff 	mov.w	r3, #4294967295
 800601c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}

	int rLength = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	// we read with success?
	if (sepmRnt != -1) {
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d015      	beq.n	800605c <llq_timedreceive+0x92>
		rLength = MIN(q_buf.len, maxLength);
 8006030:	f107 0314 	add.w	r3, r7, #20
 8006034:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8006038:	461a      	mov	r2, r3
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4293      	cmp	r3, r2
 8006040:	bfa8      	it	ge
 8006042:	4613      	movge	r3, r2
 8006044:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		memcpy(buffer, q_buf.data, rLength);
 8006048:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800604c:	f107 0114 	add.w	r1, r7, #20
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f005 f983 	bl	800b360 <memcpy>
 800605a:	e003      	b.n	8006064 <llq_timedreceive+0x9a>
	}
	// error in read
	else {
		rLength = -1;
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	}

	// return
	return rLength;
 8006064:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8006068:	4618      	mov	r0, r3
 800606a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}

08006072 <llq_add>:
 * @Param	int prio - 1 message has priority and should be added to
 * 			head of queue, 0 message assed to tail of queue
 *
 * @return   length of message read from queue
 */
int llq_add(llq_t *hndl, char *buffer, int len, int prio) {
 8006072:	b590      	push	{r4, r7, lr}
 8006074:	b0c7      	sub	sp, #284	; 0x11c
 8006076:	af00      	add	r7, sp, #0
 8006078:	f107 040c 	add.w	r4, r7, #12
 800607c:	6020      	str	r0, [r4, #0]
 800607e:	f107 0008 	add.w	r0, r7, #8
 8006082:	6001      	str	r1, [r0, #0]
 8006084:	1d39      	adds	r1, r7, #4
 8006086:	600a      	str	r2, [r1, #0]
 8006088:	463a      	mov	r2, r7
 800608a:	6013      	str	r3, [r2, #0]
	int ret = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	queue_data_t q_buf = { 0 };
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f44f 7381 	mov.w	r3, #258	; 0x102
 800609c:	461a      	mov	r2, r3
 800609e:	2100      	movs	r1, #0
 80060a0:	f005 f969 	bl	800b376 <memset>

	// length
	q_buf.len = MIN(Q_FRAME_SIZE, len);
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ac:	bfa8      	it	ge
 80060ae:	f44f 7380 	movge.w	r3, #256	; 0x100
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// data
	memcpy(q_buf.data, buffer, q_buf.len);
 80060bc:	f107 0310 	add.w	r3, r7, #16
 80060c0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80060c4:	461a      	mov	r2, r3
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	f107 0010 	add.w	r0, r7, #16
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	f005 f946 	bl	800b360 <memcpy>

	if (prio == 1) {
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10a      	bne.n	80060f2 <llq_add+0x80>
		xQueueSendToFront(hndl->queue, &q_buf, 10);
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	f107 0110 	add.w	r1, r7, #16
 80060e8:	2301      	movs	r3, #1
 80060ea:	220a      	movs	r2, #10
 80060ec:	f002 ffe6 	bl	80090bc <xQueueGenericSend>
 80060f0:	e009      	b.n	8006106 <llq_add+0x94>
	}
	else {
		xQueueSendToBack(hndl->queue, &q_buf, 10);
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f107 0110 	add.w	r1, r7, #16
 80060fe:	2300      	movs	r3, #0
 8006100:	220a      	movs	r2, #10
 8006102:	f002 ffdb 	bl	80090bc <xQueueGenericSend>
	}

	return ret;
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 800610a:	4618      	mov	r0, r3
 800610c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006110:	46bd      	mov	sp, r7
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800611e:	2003      	movs	r0, #3
 8006120:	f000 f8db 	bl	80062da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006124:	2000      	movs	r0, #0
 8006126:	f7fa fe2b 	bl	8000d80 <HAL_InitTick>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	71fb      	strb	r3, [r7, #7]
 8006134:	e001      	b.n	800613a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006136:	f7fa fdfb 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800613a:	79fb      	ldrb	r3, [r7, #7]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_IncTick+0x1c>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_IncTick+0x20>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4413      	add	r3, r2
 8006152:	4a03      	ldr	r2, [pc, #12]	; (8006160 <HAL_IncTick+0x1c>)
 8006154:	6013      	str	r3, [r2, #0]
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	20003170 	.word	0x20003170
 8006164:	200000d8 	.word	0x200000d8

08006168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return uwTick;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_GetTick+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20003170 	.word	0x20003170

08006180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800619c:	4013      	ands	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	60d3      	str	r3, [r2, #12]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	e000ed00 	.word	0xe000ed00

080061c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <__NVIC_GetPriorityGrouping+0x18>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 0307 	and.w	r3, r3, #7
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	db0b      	blt.n	800620e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	f003 021f 	and.w	r2, r3, #31
 80061fc:	4907      	ldr	r1, [pc, #28]	; (800621c <__NVIC_EnableIRQ+0x38>)
 80061fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	2001      	movs	r0, #1
 8006206:	fa00 f202 	lsl.w	r2, r0, r2
 800620a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db0a      	blt.n	800624a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	490c      	ldr	r1, [pc, #48]	; (800626c <__NVIC_SetPriority+0x4c>)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	0112      	lsls	r2, r2, #4
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	440b      	add	r3, r1
 8006244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006248:	e00a      	b.n	8006260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	4908      	ldr	r1, [pc, #32]	; (8006270 <__NVIC_SetPriority+0x50>)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	3b04      	subs	r3, #4
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	440b      	add	r3, r1
 800625e:	761a      	strb	r2, [r3, #24]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	e000e100 	.word	0xe000e100
 8006270:	e000ed00 	.word	0xe000ed00

08006274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	bf28      	it	cs
 8006292:	2304      	movcs	r3, #4
 8006294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3304      	adds	r3, #4
 800629a:	2b06      	cmp	r3, #6
 800629c:	d902      	bls.n	80062a4 <NVIC_EncodePriority+0x30>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3b03      	subs	r3, #3
 80062a2:	e000      	b.n	80062a6 <NVIC_EncodePriority+0x32>
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	401a      	ands	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062bc:	f04f 31ff 	mov.w	r1, #4294967295
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	43d9      	mvns	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	4313      	orrs	r3, r2
         );
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3724      	adds	r7, #36	; 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff4c 	bl	8006180 <__NVIC_SetPriorityGrouping>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006302:	f7ff ff61 	bl	80061c8 <__NVIC_GetPriorityGrouping>
 8006306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	f7ff ffb1 	bl	8006274 <NVIC_EncodePriority>
 8006312:	4602      	mov	r2, r0
 8006314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ff80 	bl	8006220 <__NVIC_SetPriority>
}
 8006320:	bf00      	nop
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff ff54 	bl	80061e4 <__NVIC_EnableIRQ>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006352:	e166      	b.n	8006622 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	2101      	movs	r1, #1
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	fa01 f303 	lsl.w	r3, r1, r3
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8158 	beq.w	800661c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d00b      	beq.n	800638c <HAL_GPIO_Init+0x48>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d007      	beq.n	800638c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006380:	2b11      	cmp	r3, #17
 8006382:	d003      	beq.n	800638c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b12      	cmp	r3, #18
 800638a:	d130      	bne.n	80063ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	2203      	movs	r2, #3
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4013      	ands	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063c2:	2201      	movs	r2, #1
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43db      	mvns	r3, r3
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4013      	ands	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	f003 0201 	and.w	r2, r3, #1
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	2203      	movs	r2, #3
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4013      	ands	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d003      	beq.n	800642e <HAL_GPIO_Init+0xea>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b12      	cmp	r3, #18
 800642c:	d123      	bne.n	8006476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	08da      	lsrs	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3208      	adds	r2, #8
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	220f      	movs	r2, #15
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	08da      	lsrs	r2, r3, #3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3208      	adds	r2, #8
 8006470:	6939      	ldr	r1, [r7, #16]
 8006472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	2203      	movs	r2, #3
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4013      	ands	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0203 	and.w	r2, r3, #3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80b2 	beq.w	800661c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b8:	4b61      	ldr	r3, [pc, #388]	; (8006640 <HAL_GPIO_Init+0x2fc>)
 80064ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064bc:	4a60      	ldr	r2, [pc, #384]	; (8006640 <HAL_GPIO_Init+0x2fc>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6613      	str	r3, [r2, #96]	; 0x60
 80064c4:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <HAL_GPIO_Init+0x2fc>)
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064d0:	4a5c      	ldr	r2, [pc, #368]	; (8006644 <HAL_GPIO_Init+0x300>)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	3302      	adds	r3, #2
 80064d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	220f      	movs	r2, #15
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4013      	ands	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064fa:	d02b      	beq.n	8006554 <HAL_GPIO_Init+0x210>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a52      	ldr	r2, [pc, #328]	; (8006648 <HAL_GPIO_Init+0x304>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d025      	beq.n	8006550 <HAL_GPIO_Init+0x20c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a51      	ldr	r2, [pc, #324]	; (800664c <HAL_GPIO_Init+0x308>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01f      	beq.n	800654c <HAL_GPIO_Init+0x208>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a50      	ldr	r2, [pc, #320]	; (8006650 <HAL_GPIO_Init+0x30c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d019      	beq.n	8006548 <HAL_GPIO_Init+0x204>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a4f      	ldr	r2, [pc, #316]	; (8006654 <HAL_GPIO_Init+0x310>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <HAL_GPIO_Init+0x200>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <HAL_GPIO_Init+0x314>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00d      	beq.n	8006540 <HAL_GPIO_Init+0x1fc>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a4d      	ldr	r2, [pc, #308]	; (800665c <HAL_GPIO_Init+0x318>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <HAL_GPIO_Init+0x1f8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a4c      	ldr	r2, [pc, #304]	; (8006660 <HAL_GPIO_Init+0x31c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_GPIO_Init+0x1f4>
 8006534:	2307      	movs	r3, #7
 8006536:	e00e      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006538:	2308      	movs	r3, #8
 800653a:	e00c      	b.n	8006556 <HAL_GPIO_Init+0x212>
 800653c:	2306      	movs	r3, #6
 800653e:	e00a      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006540:	2305      	movs	r3, #5
 8006542:	e008      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006544:	2304      	movs	r3, #4
 8006546:	e006      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006548:	2303      	movs	r3, #3
 800654a:	e004      	b.n	8006556 <HAL_GPIO_Init+0x212>
 800654c:	2302      	movs	r3, #2
 800654e:	e002      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <HAL_GPIO_Init+0x212>
 8006554:	2300      	movs	r3, #0
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	f002 0203 	and.w	r2, r2, #3
 800655c:	0092      	lsls	r2, r2, #2
 800655e:	4093      	lsls	r3, r2
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006566:	4937      	ldr	r1, [pc, #220]	; (8006644 <HAL_GPIO_Init+0x300>)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	3302      	adds	r3, #2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006574:	4b3b      	ldr	r3, [pc, #236]	; (8006664 <HAL_GPIO_Init+0x320>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	43db      	mvns	r3, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006598:	4a32      	ldr	r2, [pc, #200]	; (8006664 <HAL_GPIO_Init+0x320>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_GPIO_Init+0x320>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	43db      	mvns	r3, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4013      	ands	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065c2:	4a28      	ldr	r2, [pc, #160]	; (8006664 <HAL_GPIO_Init+0x320>)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065c8:	4b26      	ldr	r3, [pc, #152]	; (8006664 <HAL_GPIO_Init+0x320>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4013      	ands	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_GPIO_Init+0x320>)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <HAL_GPIO_Init+0x320>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	43db      	mvns	r3, r3
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4013      	ands	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <HAL_GPIO_Init+0x320>)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	3301      	adds	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	f47f ae91 	bne.w	8006354 <HAL_GPIO_Init+0x10>
  }
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	40010000 	.word	0x40010000
 8006648:	48000400 	.word	0x48000400
 800664c:	48000800 	.word	0x48000800
 8006650:	48000c00 	.word	0x48000c00
 8006654:	48001000 	.word	0x48001000
 8006658:	48001400 	.word	0x48001400
 800665c:	48001800 	.word	0x48001800
 8006660:	48001c00 	.word	0x48001c00
 8006664:	40010400 	.word	0x40010400

08006668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <HAL_PWREx_GetVoltageRange+0x18>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40007000 	.word	0x40007000

08006684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006692:	d130      	bne.n	80066f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006694:	4b23      	ldr	r3, [pc, #140]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d038      	beq.n	8006714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066a2:	4b20      	ldr	r3, [pc, #128]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066aa:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2232      	movs	r2, #50	; 0x32
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	4a1b      	ldr	r2, [pc, #108]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	0c9b      	lsrs	r3, r3, #18
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066c8:	e002      	b.n	80066d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066dc:	d102      	bne.n	80066e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f2      	bne.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d110      	bne.n	8006714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e00f      	b.n	8006716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006702:	d007      	beq.n	8006714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800670c:	4a05      	ldr	r2, [pc, #20]	; (8006724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800670e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40007000 	.word	0x40007000
 8006728:	200000d0 	.word	0x200000d0
 800672c:	431bde83 	.word	0x431bde83

08006730 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a04      	ldr	r2, [pc, #16]	; (800674c <HAL_PWREx_EnableVddIO2+0x1c>)
 800673a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673e:	6053      	str	r3, [r2, #4]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40007000 	.word	0x40007000

08006750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f000 bc16 	b.w	8006f90 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006764:	4ba0      	ldr	r3, [pc, #640]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800676e:	4b9e      	ldr	r3, [pc, #632]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80e4 	beq.w	800694e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_RCC_OscConfig+0x4c>
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b0c      	cmp	r3, #12
 8006790:	f040 808b 	bne.w	80068aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b01      	cmp	r3, #1
 8006798:	f040 8087 	bne.w	80068aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800679c:	4b92      	ldr	r3, [pc, #584]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCC_OscConfig+0x64>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e3ed      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1a      	ldr	r2, [r3, #32]
 80067b8:	4b8b      	ldr	r3, [pc, #556]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <HAL_RCC_OscConfig+0x7e>
 80067c4:	4b88      	ldr	r3, [pc, #544]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067cc:	e005      	b.n	80067da <HAL_RCC_OscConfig+0x8a>
 80067ce:	4b86      	ldr	r3, [pc, #536]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80067d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067da:	4293      	cmp	r3, r2
 80067dc:	d223      	bcs.n	8006826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fdb0 	bl	8007348 <RCC_SetFlashLatencyFromMSIRange>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e3ce      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067f2:	4b7d      	ldr	r3, [pc, #500]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7c      	ldr	r2, [pc, #496]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80067f8:	f043 0308 	orr.w	r3, r3, #8
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b7a      	ldr	r3, [pc, #488]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	4977      	ldr	r1, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800680c:	4313      	orrs	r3, r2
 800680e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006810:	4b75      	ldr	r3, [pc, #468]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	4972      	ldr	r1, [pc, #456]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006820:	4313      	orrs	r3, r2
 8006822:	604b      	str	r3, [r1, #4]
 8006824:	e025      	b.n	8006872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006826:	4b70      	ldr	r3, [pc, #448]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6f      	ldr	r2, [pc, #444]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800682c:	f043 0308 	orr.w	r3, r3, #8
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4b6d      	ldr	r3, [pc, #436]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	496a      	ldr	r1, [pc, #424]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006844:	4b68      	ldr	r3, [pc, #416]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	4965      	ldr	r1, [pc, #404]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006854:	4313      	orrs	r3, r2
 8006856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fd70 	bl	8007348 <RCC_SetFlashLatencyFromMSIRange>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e38e      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006872:	f000 fc75 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8006876:	4601      	mov	r1, r0
 8006878:	4b5b      	ldr	r3, [pc, #364]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a5a      	ldr	r2, [pc, #360]	; (80069ec <HAL_RCC_OscConfig+0x29c>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	fa21 f303 	lsr.w	r3, r1, r3
 800688e:	4a58      	ldr	r2, [pc, #352]	; (80069f0 <HAL_RCC_OscConfig+0x2a0>)
 8006890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006892:	4b58      	ldr	r3, [pc, #352]	; (80069f4 <HAL_RCC_OscConfig+0x2a4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fa fa72 	bl	8000d80 <HAL_InitTick>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d052      	beq.n	800694c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	e372      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d032      	beq.n	8006918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068b2:	4b4d      	ldr	r3, [pc, #308]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a4c      	ldr	r2, [pc, #304]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068be:	f7ff fc53 	bl	8006168 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068c6:	f7ff fc4f 	bl	8006168 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e35b      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068d8:	4b43      	ldr	r3, [pc, #268]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068e4:	4b40      	ldr	r3, [pc, #256]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3f      	ldr	r2, [pc, #252]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068ea:	f043 0308 	orr.w	r3, r3, #8
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	493a      	ldr	r1, [pc, #232]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006902:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	4935      	ldr	r1, [pc, #212]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006912:	4313      	orrs	r3, r2
 8006914:	604b      	str	r3, [r1, #4]
 8006916:	e01a      	b.n	800694e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a32      	ldr	r2, [pc, #200]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800691e:	f023 0301 	bic.w	r3, r3, #1
 8006922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006924:	f7ff fc20 	bl	8006168 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800692c:	f7ff fc1c 	bl	8006168 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e328      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800693e:	4b2a      	ldr	r3, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x1dc>
 800694a:	e000      	b.n	800694e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800694c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d073      	beq.n	8006a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d005      	beq.n	800696c <HAL_RCC_OscConfig+0x21c>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	d10e      	bne.n	8006984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d10b      	bne.n	8006984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696c:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d063      	beq.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d15f      	bne.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e305      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d106      	bne.n	800699c <HAL_RCC_OscConfig+0x24c>
 800698e:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 8006994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e01d      	b.n	80069d8 <HAL_RCC_OscConfig+0x288>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069a4:	d10c      	bne.n	80069c0 <HAL_RCC_OscConfig+0x270>
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e00b      	b.n	80069d8 <HAL_RCC_OscConfig+0x288>
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <HAL_RCC_OscConfig+0x298>)
 80069d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01b      	beq.n	8006a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7ff fbc2 	bl	8006168 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069e6:	e010      	b.n	8006a0a <HAL_RCC_OscConfig+0x2ba>
 80069e8:	40021000 	.word	0x40021000
 80069ec:	0800e05c 	.word	0x0800e05c
 80069f0:	200000d0 	.word	0x200000d0
 80069f4:	200000d4 	.word	0x200000d4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f8:	f7ff fbb6 	bl	8006168 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e2c2      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a0a:	4baf      	ldr	r3, [pc, #700]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x2a8>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7ff fba6 	bl	8006168 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a20:	f7ff fba2 	bl	8006168 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e2ae      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a32:	4ba5      	ldr	r3, [pc, #660]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0x2d0>
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d060      	beq.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d005      	beq.n	8006a60 <HAL_RCC_OscConfig+0x310>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b0c      	cmp	r3, #12
 8006a58:	d119      	bne.n	8006a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d116      	bne.n	8006a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a60:	4b99      	ldr	r3, [pc, #612]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_OscConfig+0x328>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e28b      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b93      	ldr	r3, [pc, #588]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	4990      	ldr	r1, [pc, #576]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8c:	e040      	b.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d023      	beq.n	8006ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a96:	4b8c      	ldr	r3, [pc, #560]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a8b      	ldr	r2, [pc, #556]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa2:	f7ff fb61 	bl	8006168 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aaa:	f7ff fb5d 	bl	8006168 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e269      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006abc:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac8:	4b7f      	ldr	r3, [pc, #508]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	061b      	lsls	r3, r3, #24
 8006ad6:	497c      	ldr	r1, [pc, #496]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]
 8006adc:	e018      	b.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ade:	4b7a      	ldr	r3, [pc, #488]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a79      	ldr	r2, [pc, #484]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aea:	f7ff fb3d 	bl	8006168 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006af2:	f7ff fb39 	bl	8006168 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e245      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b04:	4b70      	ldr	r3, [pc, #448]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f0      	bne.n	8006af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d03c      	beq.n	8006b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01c      	beq.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b24:	4b68      	ldr	r3, [pc, #416]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b2a:	4a67      	ldr	r2, [pc, #412]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7ff fb18 	bl	8006168 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b3c:	f7ff fb14 	bl	8006168 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e220      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b4e:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0ef      	beq.n	8006b3c <HAL_RCC_OscConfig+0x3ec>
 8006b5c:	e01b      	b.n	8006b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b5e:	4b5a      	ldr	r3, [pc, #360]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b64:	4a58      	ldr	r2, [pc, #352]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7ff fafb 	bl	8006168 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b76:	f7ff faf7 	bl	8006168 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e203      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b88:	4b4f      	ldr	r3, [pc, #316]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1ef      	bne.n	8006b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 80a6 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ba8:	4b47      	ldr	r3, [pc, #284]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb4:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	4a43      	ldr	r2, [pc, #268]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc0:	4b41      	ldr	r3, [pc, #260]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd0:	4b3e      	ldr	r3, [pc, #248]	; (8006ccc <HAL_RCC_OscConfig+0x57c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d118      	bne.n	8006c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bdc:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <HAL_RCC_OscConfig+0x57c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a3a      	ldr	r2, [pc, #232]	; (8006ccc <HAL_RCC_OscConfig+0x57c>)
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006be8:	f7ff fabe 	bl	8006168 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf0:	f7ff faba 	bl	8006168 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e1c6      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c02:	4b32      	ldr	r3, [pc, #200]	; (8006ccc <HAL_RCC_OscConfig+0x57c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d108      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4d8>
 8006c16:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c26:	e024      	b.n	8006c72 <HAL_RCC_OscConfig+0x522>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	d110      	bne.n	8006c52 <HAL_RCC_OscConfig+0x502>
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	4a24      	ldr	r2, [pc, #144]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c38:	f043 0304 	orr.w	r3, r3, #4
 8006c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c40:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c46:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c50:	e00f      	b.n	8006c72 <HAL_RCC_OscConfig+0x522>
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c68:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c6a:	f023 0304 	bic.w	r3, r3, #4
 8006c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d016      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7a:	f7ff fa75 	bl	8006168 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c82:	f7ff fa71 	bl	8006168 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e17b      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c98:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <HAL_RCC_OscConfig+0x578>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ed      	beq.n	8006c82 <HAL_RCC_OscConfig+0x532>
 8006ca6:	e01a      	b.n	8006cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca8:	f7ff fa5e 	bl	8006168 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cae:	e00f      	b.n	8006cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7ff fa5a 	bl	8006168 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d906      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e164      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
 8006cc6:	bf00      	nop
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cd0:	4ba8      	ldr	r3, [pc, #672]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e8      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cde:	7ffb      	ldrb	r3, [r7, #31]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce4:	4ba3      	ldr	r3, [pc, #652]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce8:	4aa2      	ldr	r2, [pc, #648]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d03c      	beq.n	8006d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01c      	beq.n	8006d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d04:	4b9b      	ldr	r3, [pc, #620]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d0a:	4a9a      	ldr	r2, [pc, #616]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7ff fa28 	bl	8006168 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d1c:	f7ff fa24 	bl	8006168 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e130      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d2e:	4b91      	ldr	r3, [pc, #580]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0ef      	beq.n	8006d1c <HAL_RCC_OscConfig+0x5cc>
 8006d3c:	e01b      	b.n	8006d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d3e:	4b8d      	ldr	r3, [pc, #564]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d44:	4a8b      	ldr	r2, [pc, #556]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7ff fa0b 	bl	8006168 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d56:	f7ff fa07 	bl	8006168 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e113      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d68:	4b82      	ldr	r3, [pc, #520]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1ef      	bne.n	8006d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8107 	beq.w	8006f8e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	f040 80cb 	bne.w	8006f20 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d8a:	4b7a      	ldr	r3, [pc, #488]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f003 0203 	and.w	r2, r3, #3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d12c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	3b01      	subs	r3, #1
 8006daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d123      	bne.n	8006df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d11b      	bne.n	8006df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d113      	bne.n	8006df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d109      	bne.n	8006df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	3b01      	subs	r3, #1
 8006df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d06d      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d068      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e0a:	4b5a      	ldr	r3, [pc, #360]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e0ba      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e1a:	4b56      	ldr	r3, [pc, #344]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a55      	ldr	r2, [pc, #340]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e26:	f7ff f99f 	bl	8006168 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e2e:	f7ff f99b 	bl	8006168 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e0a7      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e40:	4b4c      	ldr	r3, [pc, #304]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f0      	bne.n	8006e2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e4c:	4b49      	ldr	r3, [pc, #292]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	4b49      	ldr	r3, [pc, #292]	; (8006f78 <HAL_RCC_OscConfig+0x828>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e5c:	3a01      	subs	r2, #1
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	4311      	orrs	r1, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e66:	0212      	lsls	r2, r2, #8
 8006e68:	4311      	orrs	r1, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e6e:	0852      	lsrs	r2, r2, #1
 8006e70:	3a01      	subs	r2, #1
 8006e72:	0552      	lsls	r2, r2, #21
 8006e74:	4311      	orrs	r1, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e7a:	0852      	lsrs	r2, r2, #1
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	0652      	lsls	r2, r2, #25
 8006e80:	4311      	orrs	r1, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e86:	06d2      	lsls	r2, r2, #27
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	493a      	ldr	r1, [pc, #232]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e90:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a37      	ldr	r2, [pc, #220]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e9c:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4a34      	ldr	r2, [pc, #208]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ea8:	f7ff f95e 	bl	8006168 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb0:	f7ff f95a 	bl	8006168 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e066      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ece:	e05e      	b.n	8006f8e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e05d      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ed4:	4b27      	ldr	r3, [pc, #156]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d156      	bne.n	8006f8e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ee0:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006eec:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ef8:	f7ff f936 	bl	8006168 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f00:	f7ff f932 	bl	8006168 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e03e      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f12:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x7b0>
 8006f1e:	e036      	b.n	8006f8e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b0c      	cmp	r3, #12
 8006f24:	d031      	beq.n	8006f8a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f26:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006f32:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <HAL_RCC_OscConfig+0x824>)
 8006f50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5a:	f7ff f905 	bl	8006168 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f60:	e00c      	b.n	8006f7c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f62:	f7ff f901 	bl	8006168 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d905      	bls.n	8006f7c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e00d      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
 8006f74:	40021000 	.word	0x40021000
 8006f78:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_RCC_OscConfig+0x848>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1ec      	bne.n	8006f62 <HAL_RCC_OscConfig+0x812>
 8006f88:	e001      	b.n	8006f8e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3720      	adds	r7, #32
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000

08006f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0c8      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b66      	ldr	r3, [pc, #408]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d910      	bls.n	8006fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b63      	ldr	r3, [pc, #396]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f023 0207 	bic.w	r2, r3, #7
 8006fc6:	4961      	ldr	r1, [pc, #388]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fce:	4b5f      	ldr	r3, [pc, #380]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d001      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0b0      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d04c      	beq.n	8007086 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d107      	bne.n	8007004 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ff4:	4b56      	ldr	r3, [pc, #344]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d121      	bne.n	8007044 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e09e      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d107      	bne.n	800701c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800700c:	4b50      	ldr	r3, [pc, #320]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d115      	bne.n	8007044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e092      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007024:	4b4a      	ldr	r3, [pc, #296]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e086      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007034:	4b46      	ldr	r3, [pc, #280]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e07e      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007044:	4b42      	ldr	r3, [pc, #264]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f023 0203 	bic.w	r2, r3, #3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	493f      	ldr	r1, [pc, #252]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007052:	4313      	orrs	r3, r2
 8007054:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007056:	f7ff f887 	bl	8006168 <HAL_GetTick>
 800705a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705c:	e00a      	b.n	8007074 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705e:	f7ff f883 	bl	8006168 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	f241 3288 	movw	r2, #5000	; 0x1388
 800706c:	4293      	cmp	r3, r2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e066      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 020c 	and.w	r2, r3, #12
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	429a      	cmp	r2, r3
 8007084:	d1eb      	bne.n	800705e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007092:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	492c      	ldr	r1, [pc, #176]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d210      	bcs.n	80070d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 0207 	bic.w	r2, r3, #7
 80070ba:	4924      	ldr	r1, [pc, #144]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c2:	4b22      	ldr	r3, [pc, #136]	; (800714c <HAL_RCC_ClockConfig+0x1b0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e036      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4918      	ldr	r1, [pc, #96]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4910      	ldr	r1, [pc, #64]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007112:	f000 f825 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8007116:	4601      	mov	r1, r0
 8007118:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <HAL_RCC_ClockConfig+0x1b4>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	091b      	lsrs	r3, r3, #4
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 8007124:	5cd3      	ldrb	r3, [r2, r3]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	fa21 f303 	lsr.w	r3, r1, r3
 800712e:	4a0a      	ldr	r2, [pc, #40]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <HAL_RCC_ClockConfig+0x1c0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 fe22 	bl	8000d80 <HAL_InitTick>
 800713c:	4603      	mov	r3, r0
 800713e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007140:	7afb      	ldrb	r3, [r7, #11]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40022000 	.word	0x40022000
 8007150:	40021000 	.word	0x40021000
 8007154:	0800e05c 	.word	0x0800e05c
 8007158:	200000d0 	.word	0x200000d0
 800715c:	200000d4 	.word	0x200000d4

08007160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007160:	b480      	push	{r7}
 8007162:	b089      	sub	sp, #36	; 0x24
 8007164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	2300      	movs	r3, #0
 800716c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800716e:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 030c 	and.w	r3, r3, #12
 8007176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007178:	4b3a      	ldr	r3, [pc, #232]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_GetSysClockFreq+0x34>
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d121      	bne.n	80071d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d11e      	bne.n	80071d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007194:	4b33      	ldr	r3, [pc, #204]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80071a0:	4b30      	ldr	r3, [pc, #192]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 80071a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e005      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071b0:	4b2c      	ldr	r3, [pc, #176]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	091b      	lsrs	r3, r3, #4
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80071bc:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <HAL_RCC_GetSysClockFreq+0x108>)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10d      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071d0:	e00a      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d102      	bne.n	80071de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <HAL_RCC_GetSysClockFreq+0x10c>)
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e004      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d101      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071e4:	4b22      	ldr	r3, [pc, #136]	; (8007270 <HAL_RCC_GetSysClockFreq+0x110>)
 80071e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d133      	bne.n	8007256 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071ee:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d002      	beq.n	8007204 <HAL_RCC_GetSysClockFreq+0xa4>
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d003      	beq.n	800720a <HAL_RCC_GetSysClockFreq+0xaa>
 8007202:	e005      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007204:	4b19      	ldr	r3, [pc, #100]	; (800726c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007206:	617b      	str	r3, [r7, #20]
      break;
 8007208:	e005      	b.n	8007216 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800720a:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_RCC_GetSysClockFreq+0x110>)
 800720c:	617b      	str	r3, [r7, #20]
      break;
 800720e:	e002      	b.n	8007216 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	617b      	str	r3, [r7, #20]
      break;
 8007214:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007216:	4b13      	ldr	r3, [pc, #76]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	091b      	lsrs	r3, r3, #4
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	3301      	adds	r3, #1
 8007222:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	fb02 f203 	mul.w	r2, r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800723c:	4b09      	ldr	r3, [pc, #36]	; (8007264 <HAL_RCC_GetSysClockFreq+0x104>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	0e5b      	lsrs	r3, r3, #25
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007256:	69bb      	ldr	r3, [r7, #24]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3724      	adds	r7, #36	; 0x24
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40021000 	.word	0x40021000
 8007268:	0800e074 	.word	0x0800e074
 800726c:	00f42400 	.word	0x00f42400
 8007270:	007a1200 	.word	0x007a1200

08007274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007278:	4b03      	ldr	r3, [pc, #12]	; (8007288 <HAL_RCC_GetHCLKFreq+0x14>)
 800727a:	681b      	ldr	r3, [r3, #0]
}
 800727c:	4618      	mov	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	200000d0 	.word	0x200000d0

0800728c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007290:	f7ff fff0 	bl	8007274 <HAL_RCC_GetHCLKFreq>
 8007294:	4601      	mov	r1, r0
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4a04      	ldr	r2, [pc, #16]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072a2:	5cd3      	ldrb	r3, [r2, r3]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40021000 	.word	0x40021000
 80072b4:	0800e06c 	.word	0x0800e06c

080072b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072bc:	f7ff ffda 	bl	8007274 <HAL_RCC_GetHCLKFreq>
 80072c0:	4601      	mov	r1, r0
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	0adb      	lsrs	r3, r3, #11
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072ce:	5cd3      	ldrb	r3, [r2, r3]
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	0800e06c 	.word	0x0800e06c

080072e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220f      	movs	r2, #15
 80072f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072f4:	4b12      	ldr	r3, [pc, #72]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0203 	and.w	r2, r3, #3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800730c:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007318:	4b09      	ldr	r3, [pc, #36]	; (8007340 <HAL_RCC_GetClockConfig+0x5c>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	08db      	lsrs	r3, r3, #3
 800731e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <HAL_RCC_GetClockConfig+0x60>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0207 	and.w	r2, r3, #7
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	601a      	str	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40021000 	.word	0x40021000
 8007344:	40022000 	.word	0x40022000

08007348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007354:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007360:	f7ff f982 	bl	8006668 <HAL_PWREx_GetVoltageRange>
 8007364:	6178      	str	r0, [r7, #20]
 8007366:	e014      	b.n	8007392 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007368:	4b25      	ldr	r3, [pc, #148]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736c:	4a24      	ldr	r2, [pc, #144]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800736e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007372:	6593      	str	r3, [r2, #88]	; 0x58
 8007374:	4b22      	ldr	r3, [pc, #136]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007380:	f7ff f972 	bl	8006668 <HAL_PWREx_GetVoltageRange>
 8007384:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007386:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800738c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007390:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007398:	d10b      	bne.n	80073b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d919      	bls.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2ba0      	cmp	r3, #160	; 0xa0
 80073a4:	d902      	bls.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073a6:	2302      	movs	r3, #2
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e013      	b.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073ac:	2301      	movs	r3, #1
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e010      	b.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d902      	bls.n	80073be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073b8:	2303      	movs	r3, #3
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	e00a      	b.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b80      	cmp	r3, #128	; 0x80
 80073c2:	d102      	bne.n	80073ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073c4:	2302      	movs	r3, #2
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e004      	b.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b70      	cmp	r3, #112	; 0x70
 80073ce:	d101      	bne.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073d0:	2301      	movs	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f023 0207 	bic.w	r2, r3, #7
 80073dc:	4909      	ldr	r1, [pc, #36]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d001      	beq.n	80073f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	40022000 	.word	0x40022000

08007408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007410:	2300      	movs	r3, #0
 8007412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007414:	2300      	movs	r3, #0
 8007416:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007420:	2b00      	cmp	r3, #0
 8007422:	d03f      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800742c:	d01c      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800742e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007432:	d802      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007438:	e01f      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800743a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800743e:	d003      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007440:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007444:	d01c      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007446:	e018      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007448:	4b85      	ldr	r3, [pc, #532]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4a84      	ldr	r2, [pc, #528]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800744e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007452:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007454:	e015      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f000 facb 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007466:	e00c      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3320      	adds	r3, #32
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fbb2 	bl	8007bd8 <RCCEx_PLLSAI2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007478:	e003      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	74fb      	strb	r3, [r7, #19]
      break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007482:	7cfb      	ldrb	r3, [r7, #19]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007488:	4b75      	ldr	r3, [pc, #468]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007496:	4972      	ldr	r1, [pc, #456]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007498:	4313      	orrs	r3, r2
 800749a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800749e:	e001      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	7cfb      	ldrb	r3, [r7, #19]
 80074a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d03f      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074b8:	d01c      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80074ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074be:	d802      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00e      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80074c4:	e01f      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80074c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ca:	d003      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80074cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074d0:	d01c      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80074d2:	e018      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074d4:	4b62      	ldr	r3, [pc, #392]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4a61      	ldr	r2, [pc, #388]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80074da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074e0:	e015      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	2100      	movs	r1, #0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fa85 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074f2:	e00c      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3320      	adds	r3, #32
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fb6c 	bl	8007bd8 <RCCEx_PLLSAI2_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007504:	e003      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	74fb      	strb	r3, [r7, #19]
      break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800750c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800750e:	7cfb      	ldrb	r3, [r7, #19]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007514:	4b52      	ldr	r3, [pc, #328]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007522:	494f      	ldr	r1, [pc, #316]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800752a:	e001      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	7cfb      	ldrb	r3, [r7, #19]
 800752e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80a0 	beq.w	800767e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800753e:	2300      	movs	r3, #0
 8007540:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007542:	4b47      	ldr	r3, [pc, #284]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00d      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007558:	4b41      	ldr	r3, [pc, #260]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800755a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755c:	4a40      	ldr	r2, [pc, #256]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800755e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007562:	6593      	str	r3, [r2, #88]	; 0x58
 8007564:	4b3e      	ldr	r3, [pc, #248]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007570:	2301      	movs	r3, #1
 8007572:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007574:	4b3b      	ldr	r3, [pc, #236]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3a      	ldr	r2, [pc, #232]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800757a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800757e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007580:	f7fe fdf2 	bl	8006168 <HAL_GetTick>
 8007584:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007586:	e009      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007588:	f7fe fdee 	bl	8006168 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d902      	bls.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	74fb      	strb	r3, [r7, #19]
        break;
 800759a:	e005      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800759c:	4b31      	ldr	r3, [pc, #196]	; (8007664 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0ef      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80075a8:	7cfb      	ldrb	r3, [r7, #19]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d15c      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075ae:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01f      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d019      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075cc:	4b24      	ldr	r3, [pc, #144]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075d8:	4b21      	ldr	r3, [pc, #132]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	4a20      	ldr	r2, [pc, #128]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075f8:	4a19      	ldr	r2, [pc, #100]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fe fdad 	bl	8006168 <HAL_GetTick>
 800760e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007610:	e00b      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7fe fda9 	bl	8006168 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d902      	bls.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	74fb      	strb	r3, [r7, #19]
            break;
 8007628:	e006      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0ec      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800763e:	4b08      	ldr	r3, [pc, #32]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764e:	4904      	ldr	r1, [pc, #16]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007656:	e009      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007658:	7cfb      	ldrb	r3, [r7, #19]
 800765a:	74bb      	strb	r3, [r7, #18]
 800765c:	e006      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800765e:	bf00      	nop
 8007660:	40021000 	.word	0x40021000
 8007664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	7cfb      	ldrb	r3, [r7, #19]
 800766a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800766c:	7c7b      	ldrb	r3, [r7, #17]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d105      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007672:	4ba6      	ldr	r3, [pc, #664]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007676:	4aa5      	ldr	r2, [pc, #660]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800768a:	4ba0      	ldr	r3, [pc, #640]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	f023 0203 	bic.w	r2, r3, #3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	499c      	ldr	r1, [pc, #624]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076ac:	4b97      	ldr	r3, [pc, #604]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	f023 020c 	bic.w	r2, r3, #12
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	4994      	ldr	r1, [pc, #592]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ce:	4b8f      	ldr	r3, [pc, #572]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	498b      	ldr	r1, [pc, #556]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076f0:	4b86      	ldr	r3, [pc, #536]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fe:	4983      	ldr	r1, [pc, #524]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007700:	4313      	orrs	r3, r2
 8007702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007712:	4b7e      	ldr	r3, [pc, #504]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007720:	497a      	ldr	r1, [pc, #488]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007734:	4b75      	ldr	r3, [pc, #468]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007742:	4972      	ldr	r1, [pc, #456]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007744:	4313      	orrs	r3, r2
 8007746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007756:	4b6d      	ldr	r3, [pc, #436]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007764:	4969      	ldr	r1, [pc, #420]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007766:	4313      	orrs	r3, r2
 8007768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007778:	4b64      	ldr	r3, [pc, #400]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007786:	4961      	ldr	r1, [pc, #388]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800779a:	4b5c      	ldr	r3, [pc, #368]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a8:	4958      	ldr	r1, [pc, #352]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077bc:	4b53      	ldr	r3, [pc, #332]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	4950      	ldr	r1, [pc, #320]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077de:	4b4b      	ldr	r3, [pc, #300]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	4947      	ldr	r1, [pc, #284]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007800:	4b42      	ldr	r3, [pc, #264]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007806:	f023 0203 	bic.w	r2, r3, #3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	493f      	ldr	r1, [pc, #252]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d028      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007822:	4b3a      	ldr	r3, [pc, #232]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007830:	4936      	ldr	r1, [pc, #216]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007840:	d106      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007842:	4b32      	ldr	r3, [pc, #200]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	4a31      	ldr	r2, [pc, #196]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800784c:	60d3      	str	r3, [r2, #12]
 800784e:	e011      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007858:	d10c      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	2101      	movs	r1, #1
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f8c9 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800786a:	7cfb      	ldrb	r3, [r7, #19]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007870:	7cfb      	ldrb	r3, [r7, #19]
 8007872:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d028      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007880:	4b22      	ldr	r3, [pc, #136]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788e:	491f      	ldr	r1, [pc, #124]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800789e:	d106      	bne.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a0:	4b1a      	ldr	r3, [pc, #104]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078aa:	60d3      	str	r3, [r2, #12]
 80078ac:	e011      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078b6:	d10c      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f89a 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80078ce:	7cfb      	ldrb	r3, [r7, #19]
 80078d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02a      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078fc:	d108      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	4a02      	ldr	r2, [pc, #8]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007908:	60d3      	str	r3, [r2, #12]
 800790a:	e013      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800790c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007918:	d10c      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	2101      	movs	r1, #1
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f869 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800792a:	7cfb      	ldrb	r3, [r7, #19]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007930:	7cfb      	ldrb	r3, [r7, #19]
 8007932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02f      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007940:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007946:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800794e:	4929      	ldr	r1, [pc, #164]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795e:	d10d      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2102      	movs	r1, #2
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f846 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007970:	7cfb      	ldrb	r3, [r7, #19]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d014      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007976:	7cfb      	ldrb	r3, [r7, #19]
 8007978:	74bb      	strb	r3, [r7, #18]
 800797a:	e011      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007984:	d10c      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3320      	adds	r3, #32
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f923 	bl	8007bd8 <RCCEx_PLLSAI2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079ac:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079bc:	490d      	ldr	r1, [pc, #52]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d0:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80079d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e0:	4904      	ldr	r1, [pc, #16]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40021000 	.word	0x40021000

080079f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a06:	4b73      	ldr	r3, [pc, #460]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a12:	4b70      	ldr	r3, [pc, #448]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0203 	and.w	r2, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d10d      	bne.n	8007a3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
       ||
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
       ||
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d044      	beq.n	8007ac8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
 8007a42:	e041      	b.n	8007ac8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d00c      	beq.n	8007a66 <RCCEx_PLLSAI1_Config+0x6e>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d013      	beq.n	8007a78 <RCCEx_PLLSAI1_Config+0x80>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d120      	bne.n	8007a96 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a54:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d11d      	bne.n	8007a9c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a64:	e01a      	b.n	8007a9c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a66:	4b5b      	ldr	r3, [pc, #364]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d116      	bne.n	8007aa0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a76:	e013      	b.n	8007aa0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a78:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10f      	bne.n	8007aa4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a84:	4b53      	ldr	r3, [pc, #332]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a94:	e006      	b.n	8007aa4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9a:	e004      	b.n	8007aa6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e002      	b.n	8007aa6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e000      	b.n	8007aa6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007aa4:	bf00      	nop
    }

    if(status == HAL_OK)
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	4944      	ldr	r1, [pc, #272]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d17c      	bne.n	8007bc8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ace:	4b41      	ldr	r3, [pc, #260]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a40      	ldr	r2, [pc, #256]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ada:	f7fe fb45 	bl	8006168 <HAL_GetTick>
 8007ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ae0:	e009      	b.n	8007af6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ae2:	f7fe fb41 	bl	8006168 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d902      	bls.n	8007af6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	73fb      	strb	r3, [r7, #15]
        break;
 8007af4:	e005      	b.n	8007b02 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007af6:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ef      	bne.n	8007ae2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d15f      	bne.n	8007bc8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d110      	bne.n	8007b30 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007b16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6892      	ldr	r2, [r2, #8]
 8007b1e:	0211      	lsls	r1, r2, #8
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	68d2      	ldr	r2, [r2, #12]
 8007b24:	06d2      	lsls	r2, r2, #27
 8007b26:	430a      	orrs	r2, r1
 8007b28:	492a      	ldr	r1, [pc, #168]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	610b      	str	r3, [r1, #16]
 8007b2e:	e027      	b.n	8007b80 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d112      	bne.n	8007b5c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6892      	ldr	r2, [r2, #8]
 8007b46:	0211      	lsls	r1, r2, #8
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6912      	ldr	r2, [r2, #16]
 8007b4c:	0852      	lsrs	r2, r2, #1
 8007b4e:	3a01      	subs	r2, #1
 8007b50:	0552      	lsls	r2, r2, #21
 8007b52:	430a      	orrs	r2, r1
 8007b54:	491f      	ldr	r1, [pc, #124]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	610b      	str	r3, [r1, #16]
 8007b5a:	e011      	b.n	8007b80 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	0211      	lsls	r1, r2, #8
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6952      	ldr	r2, [r2, #20]
 8007b72:	0852      	lsrs	r2, r2, #1
 8007b74:	3a01      	subs	r2, #1
 8007b76:	0652      	lsls	r2, r2, #25
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	4916      	ldr	r1, [pc, #88]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8c:	f7fe faec 	bl	8006168 <HAL_GetTick>
 8007b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b92:	e009      	b.n	8007ba8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b94:	f7fe fae8 	bl	8006168 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d902      	bls.n	8007ba8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba6:	e005      	b.n	8007bb4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0ef      	beq.n	8007b94 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40021000 	.word	0x40021000

08007bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007be6:	4b68      	ldr	r3, [pc, #416]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d018      	beq.n	8007c24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bf2:	4b65      	ldr	r3, [pc, #404]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f003 0203 	and.w	r2, r3, #3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d10d      	bne.n	8007c1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
       ||
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c0a:	4b5f      	ldr	r3, [pc, #380]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
       ||
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d044      	beq.n	8007ca8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	73fb      	strb	r3, [r7, #15]
 8007c22:	e041      	b.n	8007ca8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d00c      	beq.n	8007c46 <RCCEx_PLLSAI2_Config+0x6e>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d013      	beq.n	8007c58 <RCCEx_PLLSAI2_Config+0x80>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d120      	bne.n	8007c76 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c34:	4b54      	ldr	r3, [pc, #336]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11d      	bne.n	8007c7c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c44:	e01a      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c46:	4b50      	ldr	r3, [pc, #320]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d116      	bne.n	8007c80 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c56:	e013      	b.n	8007c80 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c58:	4b4b      	ldr	r3, [pc, #300]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10f      	bne.n	8007c84 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c64:	4b48      	ldr	r3, [pc, #288]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c74:	e006      	b.n	8007c84 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7a:	e004      	b.n	8007c86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007c84:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10d      	bne.n	8007ca8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c8c:	4b3e      	ldr	r3, [pc, #248]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	4939      	ldr	r1, [pc, #228]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d166      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007cae:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a35      	ldr	r2, [pc, #212]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cba:	f7fe fa55 	bl	8006168 <HAL_GetTick>
 8007cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cc0:	e009      	b.n	8007cd6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cc2:	f7fe fa51 	bl	8006168 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d902      	bls.n	8007cd6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	73fb      	strb	r3, [r7, #15]
        break;
 8007cd4:	e005      	b.n	8007ce2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cd6:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1ef      	bne.n	8007cc2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d149      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d110      	bne.n	8007d10 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cee:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6892      	ldr	r2, [r2, #8]
 8007cfe:	0211      	lsls	r1, r2, #8
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	68d2      	ldr	r2, [r2, #12]
 8007d04:	06d2      	lsls	r2, r2, #27
 8007d06:	430a      	orrs	r2, r1
 8007d08:	491f      	ldr	r1, [pc, #124]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	614b      	str	r3, [r1, #20]
 8007d0e:	e011      	b.n	8007d34 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6892      	ldr	r2, [r2, #8]
 8007d20:	0211      	lsls	r1, r2, #8
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6912      	ldr	r2, [r2, #16]
 8007d26:	0852      	lsrs	r2, r2, #1
 8007d28:	3a01      	subs	r2, #1
 8007d2a:	0652      	lsls	r2, r2, #25
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	4916      	ldr	r1, [pc, #88]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d40:	f7fe fa12 	bl	8006168 <HAL_GetTick>
 8007d44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d46:	e009      	b.n	8007d5c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d48:	f7fe fa0e 	bl	8006168 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d902      	bls.n	8007d5c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	73fb      	strb	r3, [r7, #15]
          break;
 8007d5a:	e005      	b.n	8007d68 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0ef      	beq.n	8007d48 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	4904      	ldr	r1, [pc, #16]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000

08007d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e01d      	b.n	8007dda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f815 	bl	8007de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f000 f986 	bl	80080dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
	...

08007df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <HAL_TIM_Base_Start_IT+0x50>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b06      	cmp	r3, #6
 8007e20:	d00b      	beq.n	8007e3a <HAL_TIM_Base_Start_IT+0x42>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e28:	d007      	beq.n	8007e3a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	00010007 	.word	0x00010007

08007e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0202 	mvn.w	r2, #2
 8007e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f905 	bl	800809e <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8f7 	bl	800808a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f908 	bl	80080b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d122      	bne.n	8007efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d11b      	bne.n	8007efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0204 	mvn.w	r2, #4
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f8db 	bl	800809e <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8cd 	bl	800808a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f8de 	bl	80080b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0308 	and.w	r3, r3, #8
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d122      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d11b      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0208 	mvn.w	r2, #8
 8007f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2204      	movs	r2, #4
 8007f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8b1 	bl	800809e <HAL_TIM_IC_CaptureCallback>
 8007f3c:	e005      	b.n	8007f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8a3 	bl	800808a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f8b4 	bl	80080b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b10      	cmp	r3, #16
 8007f5c:	d122      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d11b      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0210 	mvn.w	r2, #16
 8007f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f887 	bl	800809e <HAL_TIM_IC_CaptureCallback>
 8007f90:	e005      	b.n	8007f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f879 	bl	800808a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f88a 	bl	80080b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d10e      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d107      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0201 	mvn.w	r2, #1
 8007fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f8 fe96 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d10e      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d107      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f914 	bl	8008224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800a:	d10e      	bne.n	800802a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008016:	2b80      	cmp	r3, #128	; 0x80
 8008018:	d107      	bne.n	800802a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f907 	bl	8008238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d10e      	bne.n	8008056 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d107      	bne.n	8008056 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800804e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f838 	bl	80080c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b20      	cmp	r3, #32
 8008062:	d10e      	bne.n	8008082 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b20      	cmp	r3, #32
 8008070:	d107      	bne.n	8008082 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f06f 0220 	mvn.w	r2, #32
 800807a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8c7 	bl	8008210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a40      	ldr	r2, [pc, #256]	; (80081f0 <TIM_Base_SetConfig+0x114>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d013      	beq.n	800811c <TIM_Base_SetConfig+0x40>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fa:	d00f      	beq.n	800811c <TIM_Base_SetConfig+0x40>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a3d      	ldr	r2, [pc, #244]	; (80081f4 <TIM_Base_SetConfig+0x118>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00b      	beq.n	800811c <TIM_Base_SetConfig+0x40>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a3c      	ldr	r2, [pc, #240]	; (80081f8 <TIM_Base_SetConfig+0x11c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <TIM_Base_SetConfig+0x40>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a3b      	ldr	r2, [pc, #236]	; (80081fc <TIM_Base_SetConfig+0x120>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d003      	beq.n	800811c <TIM_Base_SetConfig+0x40>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a3a      	ldr	r2, [pc, #232]	; (8008200 <TIM_Base_SetConfig+0x124>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d108      	bne.n	800812e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <TIM_Base_SetConfig+0x114>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d01f      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813c:	d01b      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a2c      	ldr	r2, [pc, #176]	; (80081f4 <TIM_Base_SetConfig+0x118>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d017      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a2b      	ldr	r2, [pc, #172]	; (80081f8 <TIM_Base_SetConfig+0x11c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d013      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <TIM_Base_SetConfig+0x120>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00f      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a29      	ldr	r2, [pc, #164]	; (8008200 <TIM_Base_SetConfig+0x124>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00b      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a28      	ldr	r2, [pc, #160]	; (8008204 <TIM_Base_SetConfig+0x128>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a27      	ldr	r2, [pc, #156]	; (8008208 <TIM_Base_SetConfig+0x12c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_Base_SetConfig+0x9a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a26      	ldr	r2, [pc, #152]	; (800820c <TIM_Base_SetConfig+0x130>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d108      	bne.n	8008188 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <TIM_Base_SetConfig+0x114>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00f      	beq.n	80081d4 <TIM_Base_SetConfig+0xf8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a12      	ldr	r2, [pc, #72]	; (8008200 <TIM_Base_SetConfig+0x124>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_Base_SetConfig+0xf8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a11      	ldr	r2, [pc, #68]	; (8008204 <TIM_Base_SetConfig+0x128>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_Base_SetConfig+0xf8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a10      	ldr	r2, [pc, #64]	; (8008208 <TIM_Base_SetConfig+0x12c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_Base_SetConfig+0xf8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a0f      	ldr	r2, [pc, #60]	; (800820c <TIM_Base_SetConfig+0x130>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d103      	bne.n	80081dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	615a      	str	r2, [r3, #20]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800
 80081fc:	40000c00 	.word	0x40000c00
 8008200:	40013400 	.word	0x40013400
 8008204:	40014000 	.word	0x40014000
 8008208:	40014400 	.word	0x40014400
 800820c:	40014800 	.word	0x40014800

08008210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e040      	b.n	80082e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7f8 ff42 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8c0 	bl	8008410 <UART_SetConfig>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e022      	b.n	80082e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fc26 	bl	8008af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fcad 	bl	8008c38 <UART_CheckIdleState>
 80082de:	4603      	mov	r3, r0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	f040 8081 	bne.w	8008404 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_UART_Transmit+0x26>
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e079      	b.n	8008406 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_UART_Transmit+0x38>
 800831c:	2302      	movs	r3, #2
 800831e:	e072      	b.n	8008406 <HAL_UART_Transmit+0x11e>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2221      	movs	r2, #33	; 0x21
 8008332:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008334:	f7fd ff18 	bl	8006168 <HAL_GetTick>
 8008338:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	88fa      	ldrh	r2, [r7, #6]
 8008346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d108      	bne.n	8008366 <HAL_UART_Transmit+0x7e>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	61bb      	str	r3, [r7, #24]
 8008364:	e003      	b.n	800836e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008376:	e02d      	b.n	80083d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fc9d 	bl	8008cc2 <UART_WaitOnFlagUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e039      	b.n	8008406 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a4:	b292      	uxth	r2, r2
 80083a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	3302      	adds	r3, #2
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	e008      	b.n	80083c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	b292      	uxth	r2, r2
 80083ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1cb      	bne.n	8008378 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fc69 	bl	8008cc2 <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e005      	b.n	8008406 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2220      	movs	r2, #32
 80083fe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008410:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008414:	b08a      	sub	sp, #40	; 0x28
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	4313      	orrs	r3, r2
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	4bb8      	ldr	r3, [pc, #736]	; (8008728 <UART_SetConfig+0x318>)
 8008446:	4013      	ands	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800844e:	430b      	orrs	r3, r1
 8008450:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4aae      	ldr	r2, [pc, #696]	; (800872c <UART_SetConfig+0x31c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847e:	4313      	orrs	r3, r2
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008492:	430a      	orrs	r2, r1
 8008494:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4aa5      	ldr	r2, [pc, #660]	; (8008730 <UART_SetConfig+0x320>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d126      	bne.n	80084ee <UART_SetConfig+0xde>
 80084a0:	4ba4      	ldr	r3, [pc, #656]	; (8008734 <UART_SetConfig+0x324>)
 80084a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d81a      	bhi.n	80084e4 <UART_SetConfig+0xd4>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <UART_SetConfig+0xa4>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084cd 	.word	0x080084cd
 80084c0:	080084dd 	.word	0x080084dd
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ca:	e105      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80084cc:	2302      	movs	r3, #2
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084d2:	e101      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80084d4:	2304      	movs	r3, #4
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084da:	e0fd      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80084dc:	2308      	movs	r3, #8
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e2:	e0f9      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80084e4:	2310      	movs	r3, #16
 80084e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ea:	bf00      	nop
 80084ec:	e0f4      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a91      	ldr	r2, [pc, #580]	; (8008738 <UART_SetConfig+0x328>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d138      	bne.n	800856a <UART_SetConfig+0x15a>
 80084f8:	4b8e      	ldr	r3, [pc, #568]	; (8008734 <UART_SetConfig+0x324>)
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	f003 030c 	and.w	r3, r3, #12
 8008502:	2b0c      	cmp	r3, #12
 8008504:	d82c      	bhi.n	8008560 <UART_SetConfig+0x150>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <UART_SetConfig+0xfc>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	08008541 	.word	0x08008541
 8008510:	08008561 	.word	0x08008561
 8008514:	08008561 	.word	0x08008561
 8008518:	08008561 	.word	0x08008561
 800851c:	08008551 	.word	0x08008551
 8008520:	08008561 	.word	0x08008561
 8008524:	08008561 	.word	0x08008561
 8008528:	08008561 	.word	0x08008561
 800852c:	08008549 	.word	0x08008549
 8008530:	08008561 	.word	0x08008561
 8008534:	08008561 	.word	0x08008561
 8008538:	08008561 	.word	0x08008561
 800853c:	08008559 	.word	0x08008559
 8008540:	2300      	movs	r3, #0
 8008542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008546:	e0c7      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008548:	2302      	movs	r3, #2
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854e:	e0c3      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008550:	2304      	movs	r3, #4
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008556:	e0bf      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008558:	2308      	movs	r3, #8
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855e:	e0bb      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008560:	2310      	movs	r3, #16
 8008562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008566:	bf00      	nop
 8008568:	e0b6      	b.n	80086d8 <UART_SetConfig+0x2c8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a73      	ldr	r2, [pc, #460]	; (800873c <UART_SetConfig+0x32c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d125      	bne.n	80085c0 <UART_SetConfig+0x1b0>
 8008574:	4b6f      	ldr	r3, [pc, #444]	; (8008734 <UART_SetConfig+0x324>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800857e:	2b10      	cmp	r3, #16
 8008580:	d011      	beq.n	80085a6 <UART_SetConfig+0x196>
 8008582:	2b10      	cmp	r3, #16
 8008584:	d802      	bhi.n	800858c <UART_SetConfig+0x17c>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <UART_SetConfig+0x186>
 800858a:	e014      	b.n	80085b6 <UART_SetConfig+0x1a6>
 800858c:	2b20      	cmp	r3, #32
 800858e:	d006      	beq.n	800859e <UART_SetConfig+0x18e>
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d00c      	beq.n	80085ae <UART_SetConfig+0x19e>
 8008594:	e00f      	b.n	80085b6 <UART_SetConfig+0x1a6>
 8008596:	2300      	movs	r3, #0
 8008598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859c:	e09c      	b.n	80086d8 <UART_SetConfig+0x2c8>
 800859e:	2302      	movs	r3, #2
 80085a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a4:	e098      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085a6:	2304      	movs	r3, #4
 80085a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ac:	e094      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085ae:	2308      	movs	r3, #8
 80085b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b4:	e090      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085b6:	2310      	movs	r3, #16
 80085b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085bc:	bf00      	nop
 80085be:	e08b      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a5e      	ldr	r2, [pc, #376]	; (8008740 <UART_SetConfig+0x330>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d125      	bne.n	8008616 <UART_SetConfig+0x206>
 80085ca:	4b5a      	ldr	r3, [pc, #360]	; (8008734 <UART_SetConfig+0x324>)
 80085cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085d4:	2b40      	cmp	r3, #64	; 0x40
 80085d6:	d011      	beq.n	80085fc <UART_SetConfig+0x1ec>
 80085d8:	2b40      	cmp	r3, #64	; 0x40
 80085da:	d802      	bhi.n	80085e2 <UART_SetConfig+0x1d2>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <UART_SetConfig+0x1dc>
 80085e0:	e014      	b.n	800860c <UART_SetConfig+0x1fc>
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d006      	beq.n	80085f4 <UART_SetConfig+0x1e4>
 80085e6:	2bc0      	cmp	r3, #192	; 0xc0
 80085e8:	d00c      	beq.n	8008604 <UART_SetConfig+0x1f4>
 80085ea:	e00f      	b.n	800860c <UART_SetConfig+0x1fc>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f2:	e071      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085f4:	2302      	movs	r3, #2
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fa:	e06d      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008602:	e069      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860a:	e065      	b.n	80086d8 <UART_SetConfig+0x2c8>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008612:	bf00      	nop
 8008614:	e060      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a4a      	ldr	r2, [pc, #296]	; (8008744 <UART_SetConfig+0x334>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d129      	bne.n	8008674 <UART_SetConfig+0x264>
 8008620:	4b44      	ldr	r3, [pc, #272]	; (8008734 <UART_SetConfig+0x324>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862e:	d014      	beq.n	800865a <UART_SetConfig+0x24a>
 8008630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008634:	d802      	bhi.n	800863c <UART_SetConfig+0x22c>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <UART_SetConfig+0x23a>
 800863a:	e016      	b.n	800866a <UART_SetConfig+0x25a>
 800863c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008640:	d007      	beq.n	8008652 <UART_SetConfig+0x242>
 8008642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008646:	d00c      	beq.n	8008662 <UART_SetConfig+0x252>
 8008648:	e00f      	b.n	800866a <UART_SetConfig+0x25a>
 800864a:	2300      	movs	r3, #0
 800864c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008650:	e042      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008652:	2302      	movs	r3, #2
 8008654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008658:	e03e      	b.n	80086d8 <UART_SetConfig+0x2c8>
 800865a:	2304      	movs	r3, #4
 800865c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008660:	e03a      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008662:	2308      	movs	r3, #8
 8008664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008668:	e036      	b.n	80086d8 <UART_SetConfig+0x2c8>
 800866a:	2310      	movs	r3, #16
 800866c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008670:	bf00      	nop
 8008672:	e031      	b.n	80086d8 <UART_SetConfig+0x2c8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2c      	ldr	r2, [pc, #176]	; (800872c <UART_SetConfig+0x31c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d129      	bne.n	80086d2 <UART_SetConfig+0x2c2>
 800867e:	4b2d      	ldr	r3, [pc, #180]	; (8008734 <UART_SetConfig+0x324>)
 8008680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800868c:	d014      	beq.n	80086b8 <UART_SetConfig+0x2a8>
 800868e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008692:	d802      	bhi.n	800869a <UART_SetConfig+0x28a>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <UART_SetConfig+0x298>
 8008698:	e016      	b.n	80086c8 <UART_SetConfig+0x2b8>
 800869a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800869e:	d007      	beq.n	80086b0 <UART_SetConfig+0x2a0>
 80086a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086a4:	d00c      	beq.n	80086c0 <UART_SetConfig+0x2b0>
 80086a6:	e00f      	b.n	80086c8 <UART_SetConfig+0x2b8>
 80086a8:	2300      	movs	r3, #0
 80086aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ae:	e013      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80086b0:	2302      	movs	r3, #2
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086b6:	e00f      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80086b8:	2304      	movs	r3, #4
 80086ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086be:	e00b      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80086c0:	2308      	movs	r3, #8
 80086c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c6:	e007      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80086c8:	2310      	movs	r3, #16
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ce:	bf00      	nop
 80086d0:	e002      	b.n	80086d8 <UART_SetConfig+0x2c8>
 80086d2:	2310      	movs	r3, #16
 80086d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <UART_SetConfig+0x31c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	f040 80fe 	bne.w	80088e0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d837      	bhi.n	800875c <UART_SetConfig+0x34c>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <UART_SetConfig+0x2e4>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008719 	.word	0x08008719
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	08008721 	.word	0x08008721
 8008700:	0800875d 	.word	0x0800875d
 8008704:	0800874d 	.word	0x0800874d
 8008708:	0800875d 	.word	0x0800875d
 800870c:	0800875d 	.word	0x0800875d
 8008710:	0800875d 	.word	0x0800875d
 8008714:	08008755 	.word	0x08008755
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008718:	f7fe fdb8 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800871c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800871e:	e020      	b.n	8008762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <UART_SetConfig+0x338>)
 8008722:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008724:	e01d      	b.n	8008762 <UART_SetConfig+0x352>
 8008726:	bf00      	nop
 8008728:	efff69f3 	.word	0xefff69f3
 800872c:	40008000 	.word	0x40008000
 8008730:	40013800 	.word	0x40013800
 8008734:	40021000 	.word	0x40021000
 8008738:	40004400 	.word	0x40004400
 800873c:	40004800 	.word	0x40004800
 8008740:	40004c00 	.word	0x40004c00
 8008744:	40005000 	.word	0x40005000
 8008748:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800874c:	f7fe fd08 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008750:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008752:	e006      	b.n	8008762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8008754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008758:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800875a:	e002      	b.n	8008762 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	76fb      	strb	r3, [r7, #27]
        break;
 8008760:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 81b9 	beq.w	8008adc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	4413      	add	r3, r2
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	429a      	cmp	r2, r3
 8008778:	d305      	bcc.n	8008786 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	429a      	cmp	r2, r3
 8008784:	d902      	bls.n	800878c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	76fb      	strb	r3, [r7, #27]
 800878a:	e1a7      	b.n	8008adc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800878c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008790:	2b08      	cmp	r3, #8
 8008792:	f200 8092 	bhi.w	80088ba <UART_SetConfig+0x4aa>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <UART_SetConfig+0x38c>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087c1 	.word	0x080087c1
 80087a0:	080088bb 	.word	0x080088bb
 80087a4:	0800880f 	.word	0x0800880f
 80087a8:	080088bb 	.word	0x080088bb
 80087ac:	08008843 	.word	0x08008843
 80087b0:	080088bb 	.word	0x080088bb
 80087b4:	080088bb 	.word	0x080088bb
 80087b8:	080088bb 	.word	0x080088bb
 80087bc:	08008891 	.word	0x08008891
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80087c0:	f7fe fd64 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 80087c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	4619      	mov	r1, r3
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	f04f 0400 	mov.w	r4, #0
 80087d6:	0214      	lsls	r4, r2, #8
 80087d8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80087dc:	020b      	lsls	r3, r1, #8
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6852      	ldr	r2, [r2, #4]
 80087e2:	0852      	lsrs	r2, r2, #1
 80087e4:	4611      	mov	r1, r2
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	eb13 0b01 	adds.w	fp, r3, r1
 80087ee:	eb44 0c02 	adc.w	ip, r4, r2
 80087f2:	4658      	mov	r0, fp
 80087f4:	4661      	mov	r1, ip
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f04f 0400 	mov.w	r4, #0
 80087fe:	461a      	mov	r2, r3
 8008800:	4623      	mov	r3, r4
 8008802:	f7f7 fd4d 	bl	80002a0 <__aeabi_uldivmod>
 8008806:	4603      	mov	r3, r0
 8008808:	460c      	mov	r4, r1
 800880a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800880c:	e058      	b.n	80088c0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	f04f 0400 	mov.w	r4, #0
 8008818:	49ae      	ldr	r1, [pc, #696]	; (8008ad4 <UART_SetConfig+0x6c4>)
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	eb13 0b01 	adds.w	fp, r3, r1
 8008822:	eb44 0c02 	adc.w	ip, r4, r2
 8008826:	4658      	mov	r0, fp
 8008828:	4661      	mov	r1, ip
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f04f 0400 	mov.w	r4, #0
 8008832:	461a      	mov	r2, r3
 8008834:	4623      	mov	r3, r4
 8008836:	f7f7 fd33 	bl	80002a0 <__aeabi_uldivmod>
 800883a:	4603      	mov	r3, r0
 800883c:	460c      	mov	r4, r1
 800883e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008840:	e03e      	b.n	80088c0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008842:	f7fe fc8d 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008846:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4619      	mov	r1, r3
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	f04f 0400 	mov.w	r4, #0
 8008858:	0214      	lsls	r4, r2, #8
 800885a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800885e:	020b      	lsls	r3, r1, #8
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6852      	ldr	r2, [r2, #4]
 8008864:	0852      	lsrs	r2, r2, #1
 8008866:	4611      	mov	r1, r2
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	eb13 0b01 	adds.w	fp, r3, r1
 8008870:	eb44 0c02 	adc.w	ip, r4, r2
 8008874:	4658      	mov	r0, fp
 8008876:	4661      	mov	r1, ip
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f04f 0400 	mov.w	r4, #0
 8008880:	461a      	mov	r2, r3
 8008882:	4623      	mov	r3, r4
 8008884:	f7f7 fd0c 	bl	80002a0 <__aeabi_uldivmod>
 8008888:	4603      	mov	r3, r0
 800888a:	460c      	mov	r4, r1
 800888c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800888e:	e017      	b.n	80088c0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	f04f 0400 	mov.w	r4, #0
 800889a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800889e:	f144 0100 	adc.w	r1, r4, #0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f04f 0400 	mov.w	r4, #0
 80088aa:	461a      	mov	r2, r3
 80088ac:	4623      	mov	r3, r4
 80088ae:	f7f7 fcf7 	bl	80002a0 <__aeabi_uldivmod>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80088b8:	e002      	b.n	80088c0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	76fb      	strb	r3, [r7, #27]
            break;
 80088be:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c6:	d308      	bcc.n	80088da <UART_SetConfig+0x4ca>
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ce:	d204      	bcs.n	80088da <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	60da      	str	r2, [r3, #12]
 80088d8:	e100      	b.n	8008adc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	76fb      	strb	r3, [r7, #27]
 80088de:	e0fd      	b.n	8008adc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e8:	f040 8084 	bne.w	80089f4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80088ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d85f      	bhi.n	80089b4 <UART_SetConfig+0x5a4>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x4ec>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008941 	.word	0x08008941
 8008904:	08008961 	.word	0x08008961
 8008908:	080089b5 	.word	0x080089b5
 800890c:	0800897d 	.word	0x0800897d
 8008910:	080089b5 	.word	0x080089b5
 8008914:	080089b5 	.word	0x080089b5
 8008918:	080089b5 	.word	0x080089b5
 800891c:	0800899d 	.word	0x0800899d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008920:	f7fe fcb4 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 8008924:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	005a      	lsls	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	441a      	add	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	b29b      	uxth	r3, r3
 800893c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800893e:	e03c      	b.n	80089ba <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008940:	f7fe fcba 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 8008944:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	005a      	lsls	r2, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	441a      	add	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800895e:	e02c      	b.n	80089ba <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800896a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6852      	ldr	r2, [r2, #4]
 8008972:	fbb3 f3f2 	udiv	r3, r3, r2
 8008976:	b29b      	uxth	r3, r3
 8008978:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800897a:	e01e      	b.n	80089ba <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897c:	f7fe fbf0 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008980:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	005a      	lsls	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	441a      	add	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800899a:	e00e      	b.n	80089ba <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80089b2:	e002      	b.n	80089ba <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	76fb      	strb	r3, [r7, #27]
        break;
 80089b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b0f      	cmp	r3, #15
 80089be:	d916      	bls.n	80089ee <UART_SetConfig+0x5de>
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c6:	d212      	bcs.n	80089ee <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f023 030f 	bic.w	r3, r3, #15
 80089d0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	085b      	lsrs	r3, r3, #1
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	b29a      	uxth	r2, r3
 80089de:	89fb      	ldrh	r3, [r7, #14]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	89fa      	ldrh	r2, [r7, #14]
 80089ea:	60da      	str	r2, [r3, #12]
 80089ec:	e076      	b.n	8008adc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	76fb      	strb	r3, [r7, #27]
 80089f2:	e073      	b.n	8008adc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80089f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d85c      	bhi.n	8008ab6 <UART_SetConfig+0x6a6>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x5f4>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a47 	.word	0x08008a47
 8008a0c:	08008a65 	.word	0x08008a65
 8008a10:	08008ab7 	.word	0x08008ab7
 8008a14:	08008a81 	.word	0x08008a81
 8008a18:	08008ab7 	.word	0x08008ab7
 8008a1c:	08008ab7 	.word	0x08008ab7
 8008a20:	08008ab7 	.word	0x08008ab7
 8008a24:	08008a9f 	.word	0x08008a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a28:	f7fe fc30 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 8008a2c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	085a      	lsrs	r2, r3, #1
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	441a      	add	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008a44:	e03a      	b.n	8008abc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a46:	f7fe fc37 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 8008a4a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	085a      	lsrs	r2, r3, #1
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	441a      	add	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008a62:	e02b      	b.n	8008abc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008a6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6852      	ldr	r2, [r2, #4]
 8008a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008a7e:	e01d      	b.n	8008abc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a80:	f7fe fb6e 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008a84:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	085a      	lsrs	r2, r3, #1
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	441a      	add	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008a9c:	e00e      	b.n	8008abc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ab4:	e002      	b.n	8008abc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	76fb      	strb	r3, [r7, #27]
        break;
 8008aba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d90a      	bls.n	8008ad8 <UART_SetConfig+0x6c8>
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d206      	bcs.n	8008ad8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e003      	b.n	8008adc <UART_SetConfig+0x6cc>
 8008ad4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ae8:	7efb      	ldrb	r3, [r7, #27]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3728      	adds	r7, #40	; 0x28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01a      	beq.n	8008c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf2:	d10a      	bne.n	8008c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	605a      	str	r2, [r3, #4]
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c46:	f7fd fa8f 	bl	8006168 <HAL_GetTick>
 8008c4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d10e      	bne.n	8008c78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f82a 	bl	8008cc2 <UART_WaitOnFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e020      	b.n	8008cba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d10e      	bne.n	8008ca4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f814 	bl	8008cc2 <UART_WaitOnFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e00a      	b.n	8008cba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	603b      	str	r3, [r7, #0]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd2:	e05d      	b.n	8008d90 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d059      	beq.n	8008d90 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cdc:	f7fd fa44 	bl	8006168 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d302      	bcc.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d11b      	bne.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0201 	bic.w	r2, r2, #1
 8008d10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2220      	movs	r2, #32
 8008d16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e042      	b.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d02b      	beq.n	8008d90 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d123      	bne.n	8008d90 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d50:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d60:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0201 	bic.w	r2, r2, #1
 8008d70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2220      	movs	r2, #32
 8008d76:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e00f      	b.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	69da      	ldr	r2, [r3, #28]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	bf0c      	ite	eq
 8008da0:	2301      	moveq	r3, #1
 8008da2:	2300      	movne	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	461a      	mov	r2, r3
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d092      	beq.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008dbc:	f001 f858 	bl	8009e70 <vTaskStartScheduler>
  
  return osOK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f103 0208 	add.w	r2, r3, #8
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f04f 32ff 	mov.w	r2, #4294967295
 8008dde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f103 0208 	add.w	r2, r3, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f103 0208 	add.w	r2, r3, #8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689a      	ldr	r2, [r3, #8]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d103      	bne.n	8008e88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e00c      	b.n	8008ea2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e002      	b.n	8008e96 <vListInsert+0x2e>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d2f6      	bcs.n	8008e90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6892      	ldr	r2, [r2, #8]
 8008ef0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6852      	ldr	r2, [r2, #4]
 8008efa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d103      	bne.n	8008f0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689a      	ldr	r2, [r3, #8]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	1e5a      	subs	r2, r3, #1
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	e7fe      	b.n	8008f56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008f58:	f001 fed8 	bl	800ad0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f64:	68f9      	ldr	r1, [r7, #12]
 8008f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f68:	fb01 f303 	mul.w	r3, r1, r3
 8008f6c:	441a      	add	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	441a      	add	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	22ff      	movs	r2, #255	; 0xff
 8008f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	22ff      	movs	r2, #255	; 0xff
 8008fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d114      	bne.n	8008fd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01a      	beq.n	8008fec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3310      	adds	r3, #16
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 f996 	bl	800a2ec <xTaskRemoveFromEventList>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d012      	beq.n	8008fec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <xQueueGenericReset+0xcc>)
 8008fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	e009      	b.n	8008fec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3310      	adds	r3, #16
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fef2 	bl	8008dc6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3324      	adds	r3, #36	; 0x24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff feed 	bl	8008dc6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fec:	f001 febc 	bl	800ad68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ff0:	2301      	movs	r3, #1
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	; 0x28
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d109      	bne.n	8009028 <xQueueGenericCreate+0x28>
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	613b      	str	r3, [r7, #16]
 8009026:	e7fe      	b.n	8009026 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800902e:	2300      	movs	r3, #0
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	e004      	b.n	800903e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3348      	adds	r3, #72	; 0x48
 8009042:	4618      	mov	r0, r3
 8009044:	f001 ff7c 	bl	800af40 <pvPortMalloc>
 8009048:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d011      	beq.n	8009074 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	3348      	adds	r3, #72	; 0x48
 8009058:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009062:	79fa      	ldrb	r2, [r7, #7]
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f805 	bl	800907e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009074:	69bb      	ldr	r3, [r7, #24]
	}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e002      	b.n	80090a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090ac:	2101      	movs	r1, #1
 80090ae:	69b8      	ldr	r0, [r7, #24]
 80090b0:	f7ff ff3e 	bl	8008f30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <xQueueGenericSend+0x30>
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <xQueueGenericSend+0x3e>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueGenericSend+0x42>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueGenericSend+0x44>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <xQueueGenericSend+0x5c>
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
 8009116:	e7fe      	b.n	8009116 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d103      	bne.n	8009126 <xQueueGenericSend+0x6a>
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	2b01      	cmp	r3, #1
 8009124:	d101      	bne.n	800912a <xQueueGenericSend+0x6e>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <xQueueGenericSend+0x70>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <xQueueGenericSend+0x88>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e7fe      	b.n	8009142 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009144:	f001 fa88 	bl	800a658 <xTaskGetSchedulerState>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <xQueueGenericSend+0x98>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <xQueueGenericSend+0x9c>
 8009154:	2301      	movs	r3, #1
 8009156:	e000      	b.n	800915a <xQueueGenericSend+0x9e>
 8009158:	2300      	movs	r3, #0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <xQueueGenericSend+0xb6>
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	e7fe      	b.n	8009170 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009172:	f001 fdcb 	bl	800ad0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	429a      	cmp	r2, r3
 8009180:	d302      	bcc.n	8009188 <xQueueGenericSend+0xcc>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d129      	bne.n	80091dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918e:	f000 fb9c 	bl	80098ca <prvCopyDataToQueue>
 8009192:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	2b00      	cmp	r3, #0
 800919a:	d010      	beq.n	80091be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	3324      	adds	r3, #36	; 0x24
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 f8a3 	bl	800a2ec <xTaskRemoveFromEventList>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d013      	beq.n	80091d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091ac:	4b3f      	ldr	r3, [pc, #252]	; (80092ac <xQueueGenericSend+0x1f0>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	e00a      	b.n	80091d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091c4:	4b39      	ldr	r3, [pc, #228]	; (80092ac <xQueueGenericSend+0x1f0>)
 80091c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091d4:	f001 fdc8 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 80091d8:	2301      	movs	r3, #1
 80091da:	e063      	b.n	80092a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091e2:	f001 fdc1 	bl	800ad68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e05c      	b.n	80092a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d106      	bne.n	80091fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 f8db 	bl	800a3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091fe:	f001 fdb3 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009202:	f000 fe93 	bl	8009f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009206:	f001 fd81 	bl	800ad0c <vPortEnterCritical>
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009210:	b25b      	sxtb	r3, r3
 8009212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009216:	d103      	bne.n	8009220 <xQueueGenericSend+0x164>
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009226:	b25b      	sxtb	r3, r3
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d103      	bne.n	8009236 <xQueueGenericSend+0x17a>
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009236:	f001 fd97 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800923a:	1d3a      	adds	r2, r7, #4
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f8ca 	bl	800a3dc <xTaskCheckForTimeOut>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d124      	bne.n	8009298 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800924e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009250:	f000 fc33 	bl	8009aba <prvIsQueueFull>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d018      	beq.n	800928c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	3310      	adds	r3, #16
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f001 f81e 	bl	800a2a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800926a:	f000 fbbe 	bl	80099ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800926e:	f000 fe6b 	bl	8009f48 <xTaskResumeAll>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	f47f af7c 	bne.w	8009172 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <xQueueGenericSend+0x1f0>)
 800927c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	e772      	b.n	8009172 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800928c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800928e:	f000 fbac 	bl	80099ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009292:	f000 fe59 	bl	8009f48 <xTaskResumeAll>
 8009296:	e76c      	b.n	8009172 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800929a:	f000 fba6 	bl	80099ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800929e:	f000 fe53 	bl	8009f48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3738      	adds	r7, #56	; 0x38
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08e      	sub	sp, #56	; 0x38
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <xQueueGenericSendFromISR+0x2c>
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
 80092da:	e7fe      	b.n	80092da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSendFromISR+0x3a>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <xQueueGenericSendFromISR+0x3e>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <xQueueGenericSendFromISR+0x40>
 80092ee:	2300      	movs	r3, #0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <xQueueGenericSendFromISR+0x58>
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	623b      	str	r3, [r7, #32]
 8009306:	e7fe      	b.n	8009306 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d103      	bne.n	8009316 <xQueueGenericSendFromISR+0x66>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <xQueueGenericSendFromISR+0x6a>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <xQueueGenericSendFromISR+0x6c>
 800931a:	2300      	movs	r3, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <xQueueGenericSendFromISR+0x84>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	e7fe      	b.n	8009332 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009334:	f001 fdc6 	bl	800aec4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009338:	f3ef 8211 	mrs	r2, BASEPRI
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61ba      	str	r2, [r7, #24]
 800934e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009350:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935c:	429a      	cmp	r2, r3
 800935e:	d302      	bcc.n	8009366 <xQueueGenericSendFromISR+0xb6>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2b02      	cmp	r3, #2
 8009364:	d12c      	bne.n	80093c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800936c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009376:	f000 faa8 	bl	80098ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800937a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800937e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009382:	d112      	bne.n	80093aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d016      	beq.n	80093ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	3324      	adds	r3, #36	; 0x24
 8009390:	4618      	mov	r0, r3
 8009392:	f000 ffab 	bl	800a2ec <xTaskRemoveFromEventList>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00e      	beq.n	80093ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	e007      	b.n	80093ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093ae:	3301      	adds	r3, #1
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	b25a      	sxtb	r2, r3
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093ba:	2301      	movs	r3, #1
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80093be:	e001      	b.n	80093c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	637b      	str	r3, [r7, #52]	; 0x34
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	; 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08c      	sub	sp, #48	; 0x30
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <xQueueReceive+0x2e>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	623b      	str	r3, [r7, #32]
 8009404:	e7fe      	b.n	8009404 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d103      	bne.n	8009414 <xQueueReceive+0x3c>
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <xQueueReceive+0x40>
 8009414:	2301      	movs	r3, #1
 8009416:	e000      	b.n	800941a <xQueueReceive+0x42>
 8009418:	2300      	movs	r3, #0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <xQueueReceive+0x5a>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	e7fe      	b.n	8009430 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009432:	f001 f911 	bl	800a658 <xTaskGetSchedulerState>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <xQueueReceive+0x6a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <xQueueReceive+0x6e>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <xQueueReceive+0x70>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <xQueueReceive+0x88>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	e7fe      	b.n	800945e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009460:	f001 fc54 	bl	800ad0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01f      	beq.n	80094b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009474:	f000 fa93 	bl	800999e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	1e5a      	subs	r2, r3, #1
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00f      	beq.n	80094a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	3310      	adds	r3, #16
 800948c:	4618      	mov	r0, r3
 800948e:	f000 ff2d 	bl	800a2ec <xTaskRemoveFromEventList>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009498:	4b3c      	ldr	r3, [pc, #240]	; (800958c <xQueueReceive+0x1b4>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094a8:	f001 fc5e 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e069      	b.n	8009584 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094b6:	f001 fc57 	bl	800ad68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e062      	b.n	8009584 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d106      	bne.n	80094d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094c4:	f107 0310 	add.w	r3, r7, #16
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 ff71 	bl	800a3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094ce:	2301      	movs	r3, #1
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094d2:	f001 fc49 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094d6:	f000 fd29 	bl	8009f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094da:	f001 fc17 	bl	800ad0c <vPortEnterCritical>
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d103      	bne.n	80094f4 <xQueueReceive+0x11c>
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d103      	bne.n	800950a <xQueueReceive+0x132>
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950a:	f001 fc2d 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800950e:	1d3a      	adds	r2, r7, #4
 8009510:	f107 0310 	add.w	r3, r7, #16
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f000 ff60 	bl	800a3dc <xTaskCheckForTimeOut>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d123      	bne.n	800956a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009524:	f000 fab3 	bl	8009a8e <prvIsQueueEmpty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	3324      	adds	r3, #36	; 0x24
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f000 feb4 	bl	800a2a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800953c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800953e:	f000 fa54 	bl	80099ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009542:	f000 fd01 	bl	8009f48 <xTaskResumeAll>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d189      	bne.n	8009460 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800954c:	4b0f      	ldr	r3, [pc, #60]	; (800958c <xQueueReceive+0x1b4>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	e780      	b.n	8009460 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800955e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009560:	f000 fa43 	bl	80099ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009564:	f000 fcf0 	bl	8009f48 <xTaskResumeAll>
 8009568:	e77a      	b.n	8009460 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800956a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956c:	f000 fa3d 	bl	80099ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009570:	f000 fcea 	bl	8009f48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009576:	f000 fa8a 	bl	8009a8e <prvIsQueueEmpty>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	f43f af6f 	beq.w	8009460 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009582:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009584:	4618      	mov	r0, r3
 8009586:	3730      	adds	r7, #48	; 0x30
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	e000ed04 	.word	0xe000ed04

08009590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08e      	sub	sp, #56	; 0x38
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80095a2:	2300      	movs	r3, #0
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <xQueueSemaphoreTake+0x30>
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
 80095be:	e7fe      	b.n	80095be <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <xQueueSemaphoreTake+0x4c>
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	e7fe      	b.n	80095da <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095dc:	f001 f83c 	bl	800a658 <xTaskGetSchedulerState>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <xQueueSemaphoreTake+0x5c>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <xQueueSemaphoreTake+0x60>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <xQueueSemaphoreTake+0x62>
 80095f0:	2300      	movs	r3, #0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d109      	bne.n	800960a <xQueueSemaphoreTake+0x7a>
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61bb      	str	r3, [r7, #24]
 8009608:	e7fe      	b.n	8009608 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800960a:	f001 fb7f 	bl	800ad0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d024      	beq.n	8009664 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800962a:	f001 f9cf 	bl	800a9cc <pvTaskIncrementMutexHeldCount>
 800962e:	4602      	mov	r2, r0
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	3310      	adds	r3, #16
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fe53 	bl	800a2ec <xTaskRemoveFromEventList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800964c:	4b53      	ldr	r3, [pc, #332]	; (800979c <xQueueSemaphoreTake+0x20c>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800965c:	f001 fb84 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	e096      	b.n	8009792 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d110      	bne.n	800968c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <xQueueSemaphoreTake+0xf4>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e7fe      	b.n	8009682 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009684:	f001 fb70 	bl	800ad68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009688:	2300      	movs	r3, #0
 800968a:	e082      	b.n	8009792 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009692:	f107 030c 	add.w	r3, r7, #12
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fe8a 	bl	800a3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096a0:	f001 fb62 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096a4:	f000 fc42 	bl	8009f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096a8:	f001 fb30 	bl	800ad0c <vPortEnterCritical>
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d103      	bne.n	80096c2 <xQueueSemaphoreTake+0x132>
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d103      	bne.n	80096d8 <xQueueSemaphoreTake+0x148>
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096d8:	f001 fb46 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096dc:	463a      	mov	r2, r7
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fe79 	bl	800a3dc <xTaskCheckForTimeOut>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d132      	bne.n	8009756 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f2:	f000 f9cc 	bl	8009a8e <prvIsQueueEmpty>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d026      	beq.n	800974a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009704:	f001 fb02 	bl	800ad0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 ffc1 	bl	800a694 <xTaskPriorityInherit>
 8009712:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009714:	f001 fb28 	bl	800ad68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fdbf 	bl	800a2a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009728:	f000 f95f 	bl	80099ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800972c:	f000 fc0c 	bl	8009f48 <xTaskResumeAll>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	f47f af69 	bne.w	800960a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009738:	4b18      	ldr	r3, [pc, #96]	; (800979c <xQueueSemaphoreTake+0x20c>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	e75f      	b.n	800960a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800974a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800974c:	f000 f94d 	bl	80099ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009750:	f000 fbfa 	bl	8009f48 <xTaskResumeAll>
 8009754:	e759      	b.n	800960a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009758:	f000 f947 	bl	80099ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800975c:	f000 fbf4 	bl	8009f48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009762:	f000 f994 	bl	8009a8e <prvIsQueueEmpty>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	f43f af4e 	beq.w	800960a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009774:	f001 faca 	bl	800ad0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800977a:	f000 f88e 	bl	800989a <prvGetDisinheritPriorityAfterTimeout>
 800977e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009786:	4618      	mov	r0, r3
 8009788:	f001 f888 	bl	800a89c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800978c:	f001 faec 	bl	800ad68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009790:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009792:	4618      	mov	r0, r3
 8009794:	3738      	adds	r7, #56	; 0x38
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	; 0x38
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <xQueueReceiveFromISR+0x2a>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e7fe      	b.n	80097c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <xQueueReceiveFromISR+0x38>
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <xQueueReceiveFromISR+0x3c>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <xQueueReceiveFromISR+0x3e>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <xQueueReceiveFromISR+0x56>
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e7fe      	b.n	80097f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097f6:	f001 fb65 	bl	800aec4 <vPortValidateInterruptPriority>
	__asm volatile
 80097fa:	f3ef 8211 	mrs	r2, BASEPRI
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	61ba      	str	r2, [r7, #24]
 8009810:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009812:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d02f      	beq.n	8009882 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009830:	f000 f8b5 	bl	800999e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	1e5a      	subs	r2, r3, #1
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800983c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d112      	bne.n	800986c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d016      	beq.n	800987c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	3310      	adds	r3, #16
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fd4a 	bl	800a2ec <xTaskRemoveFromEventList>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e007      	b.n	800987c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800986c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009870:	3301      	adds	r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	b25a      	sxtb	r2, r3
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800987c:	2301      	movs	r3, #1
 800987e:	637b      	str	r3, [r7, #52]	; 0x34
 8009880:	e001      	b.n	8009886 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	613b      	str	r3, [r7, #16]
	__asm volatile
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009892:	4618      	mov	r0, r3
 8009894:	3738      	adds	r7, #56	; 0x38
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f1c3 0307 	rsb	r3, r3, #7
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e001      	b.n	80098bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80098bc:	68fb      	ldr	r3, [r7, #12]
	}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b086      	sub	sp, #24
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10d      	bne.n	8009904 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d14d      	bne.n	800998c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 ff4d 	bl	800a794 <xTaskPriorityDisinherit>
 80098fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	609a      	str	r2, [r3, #8]
 8009902:	e043      	b.n	800998c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d119      	bne.n	800993e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6858      	ldr	r0, [r3, #4]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	461a      	mov	r2, r3
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	f001 fd23 	bl	800b360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	441a      	add	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	d32b      	bcc.n	800998c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
 800993c:	e026      	b.n	800998c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	68d8      	ldr	r0, [r3, #12]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	461a      	mov	r2, r3
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	f001 fd09 	bl	800b360 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009956:	425b      	negs	r3, r3
 8009958:	441a      	add	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d207      	bcs.n	800997a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	689a      	ldr	r2, [r3, #8]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	425b      	negs	r3, r3
 8009974:	441a      	add	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b02      	cmp	r3, #2
 800997e:	d105      	bne.n	800998c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	3b01      	subs	r3, #1
 800998a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d018      	beq.n	80099e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	441a      	add	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d303      	bcc.n	80099d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68d9      	ldr	r1, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	461a      	mov	r2, r3
 80099dc:	6838      	ldr	r0, [r7, #0]
 80099de:	f001 fcbf 	bl	800b360 <memcpy>
	}
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099f2:	f001 f98b 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099fe:	e011      	b.n	8009a24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d012      	beq.n	8009a2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3324      	adds	r3, #36	; 0x24
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fc6d 	bl	800a2ec <xTaskRemoveFromEventList>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a18:	f000 fd40 	bl	800a49c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dce9      	bgt.n	8009a00 <prvUnlockQueue+0x16>
 8009a2c:	e000      	b.n	8009a30 <prvUnlockQueue+0x46>
					break;
 8009a2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	22ff      	movs	r2, #255	; 0xff
 8009a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a38:	f001 f996 	bl	800ad68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a3c:	f001 f966 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a48:	e011      	b.n	8009a6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d012      	beq.n	8009a78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3310      	adds	r3, #16
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fc48 	bl	800a2ec <xTaskRemoveFromEventList>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a62:	f000 fd1b 	bl	800a49c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dce9      	bgt.n	8009a4a <prvUnlockQueue+0x60>
 8009a76:	e000      	b.n	8009a7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	22ff      	movs	r2, #255	; 0xff
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a82:	f001 f971 	bl	800ad68 <vPortExitCritical>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a96:	f001 f939 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	e001      	b.n	8009aac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aac:	f001 f95c 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ac2:	f001 f923 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d102      	bne.n	8009ad8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	e001      	b.n	8009adc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009adc:	f001 f944 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08e      	sub	sp, #56	; 0x38
 8009aee:	af04      	add	r7, sp, #16
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d109      	bne.n	8009b12 <xTaskCreateStatic+0x28>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	623b      	str	r3, [r7, #32]
 8009b10:	e7fe      	b.n	8009b10 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d109      	bne.n	8009b2c <xTaskCreateStatic+0x42>
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	e7fe      	b.n	8009b2a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b2c:	2354      	movs	r3, #84	; 0x54
 8009b2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b54      	cmp	r3, #84	; 0x54
 8009b34:	d009      	beq.n	8009b4a <xTaskCreateStatic+0x60>
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	61bb      	str	r3, [r7, #24]
 8009b48:	e7fe      	b.n	8009b48 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01e      	beq.n	8009b90 <xTaskCreateStatic+0xa6>
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01b      	beq.n	8009b90 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	2202      	movs	r2, #2
 8009b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9303      	str	r3, [sp, #12]
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	f107 0314 	add.w	r3, r7, #20
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f850 	bl	8009c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b8a:	f000 f8d3 	bl	8009d34 <prvAddNewTaskToReadyList>
 8009b8e:	e001      	b.n	8009b94 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b94:	697b      	ldr	r3, [r7, #20]
	}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b08c      	sub	sp, #48	; 0x30
 8009ba2:	af04      	add	r7, sp, #16
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 f9c4 	bl	800af40 <pvPortMalloc>
 8009bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00e      	beq.n	8009bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bc0:	2054      	movs	r0, #84	; 0x54
 8009bc2:	f001 f9bd 	bl	800af40 <pvPortMalloc>
 8009bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8009bd4:	e005      	b.n	8009be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f001 fa74 	bl	800b0c4 <vPortFree>
 8009bdc:	e001      	b.n	8009be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d017      	beq.n	8009c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bf0:	88fa      	ldrh	r2, [r7, #6]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f80e 	bl	8009c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c0c:	69f8      	ldr	r0, [r7, #28]
 8009c0e:	f000 f891 	bl	8009d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c12:	2301      	movs	r3, #1
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	e002      	b.n	8009c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c40:	3b01      	subs	r3, #1
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <prvInitialiseNewTask+0x46>
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e7fe      	b.n	8009c6c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01f      	beq.n	8009cb4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	e012      	b.n	8009ca0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	7819      	ldrb	r1, [r3, #0]
 8009c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	4413      	add	r3, r2
 8009c88:	3334      	adds	r3, #52	; 0x34
 8009c8a:	460a      	mov	r2, r1
 8009c8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d006      	beq.n	8009ca8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	d9e9      	bls.n	8009c7a <prvInitialiseNewTask+0x52>
 8009ca6:	e000      	b.n	8009caa <prvInitialiseNewTask+0x82>
			{
				break;
 8009ca8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cb2:	e003      	b.n	8009cbc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	2b06      	cmp	r3, #6
 8009cc0:	d901      	bls.n	8009cc6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cc2:	2306      	movs	r3, #6
 8009cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff f892 	bl	8008e06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	3318      	adds	r3, #24
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff f88d 	bl	8008e06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	f1c3 0207 	rsb	r2, r3, #7
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	2200      	movs	r2, #0
 8009d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	69b8      	ldr	r0, [r7, #24]
 8009d16:	f000 fed3 	bl	800aac0 <pxPortInitialiseStack>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d3c:	f000 ffe6 	bl	800ad0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d40:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <prvAddNewTaskToReadyList+0xb8>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3301      	adds	r3, #1
 8009d46:	4a29      	ldr	r2, [pc, #164]	; (8009dec <prvAddNewTaskToReadyList+0xb8>)
 8009d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d4a:	4b29      	ldr	r3, [pc, #164]	; (8009df0 <prvAddNewTaskToReadyList+0xbc>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d52:	4a27      	ldr	r2, [pc, #156]	; (8009df0 <prvAddNewTaskToReadyList+0xbc>)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d58:	4b24      	ldr	r3, [pc, #144]	; (8009dec <prvAddNewTaskToReadyList+0xb8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d110      	bne.n	8009d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d60:	f000 fbc0 	bl	800a4e4 <prvInitialiseTaskLists>
 8009d64:	e00d      	b.n	8009d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d66:	4b23      	ldr	r3, [pc, #140]	; (8009df4 <prvAddNewTaskToReadyList+0xc0>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d109      	bne.n	8009d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d6e:	4b20      	ldr	r3, [pc, #128]	; (8009df0 <prvAddNewTaskToReadyList+0xbc>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d802      	bhi.n	8009d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d7c:	4a1c      	ldr	r2, [pc, #112]	; (8009df0 <prvAddNewTaskToReadyList+0xbc>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d82:	4b1d      	ldr	r3, [pc, #116]	; (8009df8 <prvAddNewTaskToReadyList+0xc4>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3301      	adds	r3, #1
 8009d88:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <prvAddNewTaskToReadyList+0xc4>)
 8009d8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	2201      	movs	r2, #1
 8009d92:	409a      	lsls	r2, r3
 8009d94:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <prvAddNewTaskToReadyList+0xc8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	4a18      	ldr	r2, [pc, #96]	; (8009dfc <prvAddNewTaskToReadyList+0xc8>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <prvAddNewTaskToReadyList+0xcc>)
 8009dac:	441a      	add	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7ff f833 	bl	8008e20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dba:	f000 ffd5 	bl	800ad68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <prvAddNewTaskToReadyList+0xc0>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00e      	beq.n	8009de4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <prvAddNewTaskToReadyList+0xbc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d207      	bcs.n	8009de4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dd4:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <prvAddNewTaskToReadyList+0xd0>)
 8009dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200007c8 	.word	0x200007c8
 8009df0:	200006c8 	.word	0x200006c8
 8009df4:	200007d4 	.word	0x200007d4
 8009df8:	200007e4 	.word	0x200007e4
 8009dfc:	200007d0 	.word	0x200007d0
 8009e00:	200006cc 	.word	0x200006cc
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d016      	beq.n	8009e48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <vTaskDelay+0x60>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <vTaskDelay+0x2e>
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60bb      	str	r3, [r7, #8]
 8009e34:	e7fe      	b.n	8009e34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009e36:	f000 f879 	bl	8009f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fdd9 	bl	800a9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e42:	f000 f881 	bl	8009f48 <xTaskResumeAll>
 8009e46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d107      	bne.n	8009e5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009e4e:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <vTaskDelay+0x64>)
 8009e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200007f0 	.word	0x200007f0
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08a      	sub	sp, #40	; 0x28
 8009e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e7e:	463a      	mov	r2, r7
 8009e80:	1d39      	adds	r1, r7, #4
 8009e82:	f107 0308 	add.w	r3, r7, #8
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fb8a 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	9202      	str	r2, [sp, #8]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	2300      	movs	r3, #0
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	460a      	mov	r2, r1
 8009e9e:	491d      	ldr	r1, [pc, #116]	; (8009f14 <vTaskStartScheduler+0xa4>)
 8009ea0:	481d      	ldr	r0, [pc, #116]	; (8009f18 <vTaskStartScheduler+0xa8>)
 8009ea2:	f7ff fe22 	bl	8009aea <xTaskCreateStatic>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <vTaskStartScheduler+0xac>)
 8009eaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009eac:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <vTaskStartScheduler+0xac>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e001      	b.n	8009ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d115      	bne.n	8009ef0 <vTaskStartScheduler+0x80>
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ed6:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <vTaskStartScheduler+0xb0>)
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <vTaskStartScheduler+0xb4>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ee4:	4b10      	ldr	r3, [pc, #64]	; (8009f28 <vTaskStartScheduler+0xb8>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009eea:	f000 fe71 	bl	800abd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009eee:	e00d      	b.n	8009f0c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef6:	d109      	bne.n	8009f0c <vTaskStartScheduler+0x9c>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e7fe      	b.n	8009f0a <vTaskStartScheduler+0x9a>
}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	0800e054 	.word	0x0800e054
 8009f18:	0800a4b5 	.word	0x0800a4b5
 8009f1c:	200007ec 	.word	0x200007ec
 8009f20:	200007e8 	.word	0x200007e8
 8009f24:	200007d4 	.word	0x200007d4
 8009f28:	200007cc 	.word	0x200007cc

08009f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <vTaskSuspendAll+0x18>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3301      	adds	r3, #1
 8009f36:	4a03      	ldr	r2, [pc, #12]	; (8009f44 <vTaskSuspendAll+0x18>)
 8009f38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009f3a:	bf00      	nop
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	200007f0 	.word	0x200007f0

08009f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f56:	4b41      	ldr	r3, [pc, #260]	; (800a05c <xTaskResumeAll+0x114>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <xTaskResumeAll+0x2a>
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	e7fe      	b.n	8009f70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f72:	f000 fecb 	bl	800ad0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f76:	4b39      	ldr	r3, [pc, #228]	; (800a05c <xTaskResumeAll+0x114>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	4a37      	ldr	r2, [pc, #220]	; (800a05c <xTaskResumeAll+0x114>)
 8009f7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f80:	4b36      	ldr	r3, [pc, #216]	; (800a05c <xTaskResumeAll+0x114>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d161      	bne.n	800a04c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f88:	4b35      	ldr	r3, [pc, #212]	; (800a060 <xTaskResumeAll+0x118>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05d      	beq.n	800a04c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f90:	e02e      	b.n	8009ff0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f92:	4b34      	ldr	r3, [pc, #208]	; (800a064 <xTaskResumeAll+0x11c>)
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3318      	adds	r3, #24
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe ff9b 	bl	8008eda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fe ff96 	bl	8008eda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	409a      	lsls	r2, r3
 8009fb6:	4b2c      	ldr	r3, [pc, #176]	; (800a068 <xTaskResumeAll+0x120>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	4a2a      	ldr	r2, [pc, #168]	; (800a068 <xTaskResumeAll+0x120>)
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4a27      	ldr	r2, [pc, #156]	; (800a06c <xTaskResumeAll+0x124>)
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe ff22 	bl	8008e20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	4b23      	ldr	r3, [pc, #140]	; (800a070 <xTaskResumeAll+0x128>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d302      	bcc.n	8009ff0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009fea:	4b22      	ldr	r3, [pc, #136]	; (800a074 <xTaskResumeAll+0x12c>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ff0:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <xTaskResumeAll+0x11c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1cc      	bne.n	8009f92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ffe:	f000 fb0b 	bl	800a618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a002:	4b1d      	ldr	r3, [pc, #116]	; (800a078 <xTaskResumeAll+0x130>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d010      	beq.n	800a030 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a00e:	f000 f837 	bl	800a080 <xTaskIncrementTick>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a018:	4b16      	ldr	r3, [pc, #88]	; (800a074 <xTaskResumeAll+0x12c>)
 800a01a:	2201      	movs	r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f1      	bne.n	800a00e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <xTaskResumeAll+0x130>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a030:	4b10      	ldr	r3, [pc, #64]	; (800a074 <xTaskResumeAll+0x12c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a03c:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <xTaskResumeAll+0x134>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a04c:	f000 fe8c 	bl	800ad68 <vPortExitCritical>

	return xAlreadyYielded;
 800a050:	68bb      	ldr	r3, [r7, #8]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	200007f0 	.word	0x200007f0
 800a060:	200007c8 	.word	0x200007c8
 800a064:	20000788 	.word	0x20000788
 800a068:	200007d0 	.word	0x200007d0
 800a06c:	200006cc 	.word	0x200006cc
 800a070:	200006c8 	.word	0x200006c8
 800a074:	200007dc 	.word	0x200007dc
 800a078:	200007d8 	.word	0x200007d8
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a08a:	4b4e      	ldr	r3, [pc, #312]	; (800a1c4 <xTaskIncrementTick+0x144>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f040 8087 	bne.w	800a1a2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a094:	4b4c      	ldr	r3, [pc, #304]	; (800a1c8 <xTaskIncrementTick+0x148>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3301      	adds	r3, #1
 800a09a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a09c:	4a4a      	ldr	r2, [pc, #296]	; (800a1c8 <xTaskIncrementTick+0x148>)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d11f      	bne.n	800a0e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0a8:	4b48      	ldr	r3, [pc, #288]	; (800a1cc <xTaskIncrementTick+0x14c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <xTaskIncrementTick+0x46>
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	e7fe      	b.n	800a0c4 <xTaskIncrementTick+0x44>
 800a0c6:	4b41      	ldr	r3, [pc, #260]	; (800a1cc <xTaskIncrementTick+0x14c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	4b40      	ldr	r3, [pc, #256]	; (800a1d0 <xTaskIncrementTick+0x150>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a3e      	ldr	r2, [pc, #248]	; (800a1cc <xTaskIncrementTick+0x14c>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	4a3e      	ldr	r2, [pc, #248]	; (800a1d0 <xTaskIncrementTick+0x150>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	4b3e      	ldr	r3, [pc, #248]	; (800a1d4 <xTaskIncrementTick+0x154>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	4a3c      	ldr	r2, [pc, #240]	; (800a1d4 <xTaskIncrementTick+0x154>)
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	f000 fa98 	bl	800a618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0e8:	4b3b      	ldr	r3, [pc, #236]	; (800a1d8 <xTaskIncrementTick+0x158>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d348      	bcc.n	800a184 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f2:	4b36      	ldr	r3, [pc, #216]	; (800a1cc <xTaskIncrementTick+0x14c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fc:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <xTaskIncrementTick+0x158>)
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	601a      	str	r2, [r3, #0]
					break;
 800a104:	e03e      	b.n	800a184 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a106:	4b31      	ldr	r3, [pc, #196]	; (800a1cc <xTaskIncrementTick+0x14c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d203      	bcs.n	800a126 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a11e:	4a2e      	ldr	r2, [pc, #184]	; (800a1d8 <xTaskIncrementTick+0x158>)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a124:	e02e      	b.n	800a184 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	3304      	adds	r3, #4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fed5 	bl	8008eda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	3318      	adds	r3, #24
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fecc 	bl	8008eda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	2201      	movs	r2, #1
 800a148:	409a      	lsls	r2, r3
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <xTaskIncrementTick+0x15c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4313      	orrs	r3, r2
 800a150:	4a22      	ldr	r2, [pc, #136]	; (800a1dc <xTaskIncrementTick+0x15c>)
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4a1f      	ldr	r2, [pc, #124]	; (800a1e0 <xTaskIncrementTick+0x160>)
 800a162:	441a      	add	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	3304      	adds	r3, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fe fe58 	bl	8008e20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <xTaskIncrementTick+0x164>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d3b9      	bcc.n	800a0f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a17e:	2301      	movs	r3, #1
 800a180:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a182:	e7b6      	b.n	800a0f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a184:	4b17      	ldr	r3, [pc, #92]	; (800a1e4 <xTaskIncrementTick+0x164>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	4915      	ldr	r1, [pc, #84]	; (800a1e0 <xTaskIncrementTick+0x160>)
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d907      	bls.n	800a1ac <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a19c:	2301      	movs	r3, #1
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e004      	b.n	800a1ac <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a1a2:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <xTaskIncrementTick+0x168>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	4a0f      	ldr	r2, [pc, #60]	; (800a1e8 <xTaskIncrementTick+0x168>)
 800a1aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a1ac:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <xTaskIncrementTick+0x16c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a1b8:	697b      	ldr	r3, [r7, #20]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200007f0 	.word	0x200007f0
 800a1c8:	200007cc 	.word	0x200007cc
 800a1cc:	20000780 	.word	0x20000780
 800a1d0:	20000784 	.word	0x20000784
 800a1d4:	200007e0 	.word	0x200007e0
 800a1d8:	200007e8 	.word	0x200007e8
 800a1dc:	200007d0 	.word	0x200007d0
 800a1e0:	200006cc 	.word	0x200006cc
 800a1e4:	200006c8 	.word	0x200006c8
 800a1e8:	200007d8 	.word	0x200007d8
 800a1ec:	200007dc 	.word	0x200007dc

0800a1f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1f6:	4b26      	ldr	r3, [pc, #152]	; (800a290 <vTaskSwitchContext+0xa0>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1fe:	4b25      	ldr	r3, [pc, #148]	; (800a294 <vTaskSwitchContext+0xa4>)
 800a200:	2201      	movs	r2, #1
 800a202:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a204:	e03e      	b.n	800a284 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a206:	4b23      	ldr	r3, [pc, #140]	; (800a294 <vTaskSwitchContext+0xa4>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20c:	4b22      	ldr	r3, [pc, #136]	; (800a298 <vTaskSwitchContext+0xa8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	fab3 f383 	clz	r3, r3
 800a218:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a21a:	7afb      	ldrb	r3, [r7, #11]
 800a21c:	f1c3 031f 	rsb	r3, r3, #31
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	491e      	ldr	r1, [pc, #120]	; (800a29c <vTaskSwitchContext+0xac>)
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d109      	bne.n	800a24a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e7fe      	b.n	800a248 <vTaskSwitchContext+0x58>
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4a11      	ldr	r2, [pc, #68]	; (800a29c <vTaskSwitchContext+0xac>)
 800a256:	4413      	add	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	3308      	adds	r3, #8
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d104      	bne.n	800a27a <vTaskSwitchContext+0x8a>
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	605a      	str	r2, [r3, #4]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <vTaskSwitchContext+0xb0>)
 800a282:	6013      	str	r3, [r2, #0]
}
 800a284:	bf00      	nop
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200007f0 	.word	0x200007f0
 800a294:	200007dc 	.word	0x200007dc
 800a298:	200007d0 	.word	0x200007d0
 800a29c:	200006cc 	.word	0x200006cc
 800a2a0:	200006c8 	.word	0x200006c8

0800a2a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d109      	bne.n	800a2c8 <vTaskPlaceOnEventList+0x24>
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	e7fe      	b.n	800a2c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <vTaskPlaceOnEventList+0x44>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3318      	adds	r3, #24
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fe fdc9 	bl	8008e68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	6838      	ldr	r0, [r7, #0]
 800a2da:	f000 fb8b 	bl	800a9f4 <prvAddCurrentTaskToDelayedList>
}
 800a2de:	bf00      	nop
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200006c8 	.word	0x200006c8

0800a2ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <xTaskRemoveFromEventList+0x2a>
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	e7fe      	b.n	800a314 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	3318      	adds	r3, #24
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe fddd 	bl	8008eda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a320:	4b1d      	ldr	r3, [pc, #116]	; (800a398 <xTaskRemoveFromEventList+0xac>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11c      	bne.n	800a362 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fdd4 	bl	8008eda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	2201      	movs	r2, #1
 800a338:	409a      	lsls	r2, r3
 800a33a:	4b18      	ldr	r3, [pc, #96]	; (800a39c <xTaskRemoveFromEventList+0xb0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4313      	orrs	r3, r2
 800a340:	4a16      	ldr	r2, [pc, #88]	; (800a39c <xTaskRemoveFromEventList+0xb0>)
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a13      	ldr	r2, [pc, #76]	; (800a3a0 <xTaskRemoveFromEventList+0xb4>)
 800a352:	441a      	add	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe fd60 	bl	8008e20 <vListInsertEnd>
 800a360:	e005      	b.n	800a36e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3318      	adds	r3, #24
 800a366:	4619      	mov	r1, r3
 800a368:	480e      	ldr	r0, [pc, #56]	; (800a3a4 <xTaskRemoveFromEventList+0xb8>)
 800a36a:	f7fe fd59 	bl	8008e20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a372:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <xTaskRemoveFromEventList+0xbc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	429a      	cmp	r2, r3
 800a37a:	d905      	bls.n	800a388 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a37c:	2301      	movs	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <xTaskRemoveFromEventList+0xc0>)
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e001      	b.n	800a38c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a388:	2300      	movs	r3, #0
 800a38a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a38c:	697b      	ldr	r3, [r7, #20]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200007f0 	.word	0x200007f0
 800a39c:	200007d0 	.word	0x200007d0
 800a3a0:	200006cc 	.word	0x200006cc
 800a3a4:	20000788 	.word	0x20000788
 800a3a8:	200006c8 	.word	0x200006c8
 800a3ac:	200007dc 	.word	0x200007dc

0800a3b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <vTaskInternalSetTimeOutState+0x24>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <vTaskInternalSetTimeOutState+0x28>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	605a      	str	r2, [r3, #4]
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	200007e0 	.word	0x200007e0
 800a3d8:	200007cc 	.word	0x200007cc

0800a3dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d109      	bne.n	800a400 <xTaskCheckForTimeOut+0x24>
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	613b      	str	r3, [r7, #16]
 800a3fe:	e7fe      	b.n	800a3fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <xTaskCheckForTimeOut+0x3e>
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e7fe      	b.n	800a418 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a41a:	f000 fc77 	bl	800ad0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a41e:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <xTaskCheckForTimeOut+0xb8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d102      	bne.n	800a43e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a438:	2300      	movs	r3, #0
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	e023      	b.n	800a486 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b15      	ldr	r3, [pc, #84]	; (800a498 <xTaskCheckForTimeOut+0xbc>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d007      	beq.n	800a45a <xTaskCheckForTimeOut+0x7e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	429a      	cmp	r2, r3
 800a452:	d302      	bcc.n	800a45a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	61fb      	str	r3, [r7, #28]
 800a458:	e015      	b.n	800a486 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	429a      	cmp	r2, r3
 800a462:	d20b      	bcs.n	800a47c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	1ad2      	subs	r2, r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ff9d 	bl	800a3b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	e004      	b.n	800a486 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a482:	2301      	movs	r3, #1
 800a484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a486:	f000 fc6f 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 800a48a:	69fb      	ldr	r3, [r7, #28]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	200007cc 	.word	0x200007cc
 800a498:	200007e0 	.word	0x200007e0

0800a49c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4a0:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <vTaskMissedYield+0x14>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
}
 800a4a6:	bf00      	nop
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	200007dc 	.word	0x200007dc

0800a4b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4bc:	f000 f852 	bl	800a564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <prvIdleTask+0x28>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d9f9      	bls.n	800a4bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <prvIdleTask+0x2c>)
 800a4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4d8:	e7f0      	b.n	800a4bc <prvIdleTask+0x8>
 800a4da:	bf00      	nop
 800a4dc:	200006cc 	.word	0x200006cc
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
 800a4ee:	e00c      	b.n	800a50a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4a12      	ldr	r2, [pc, #72]	; (800a544 <prvInitialiseTaskLists+0x60>)
 800a4fc:	4413      	add	r3, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fc61 	bl	8008dc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3301      	adds	r3, #1
 800a508:	607b      	str	r3, [r7, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b06      	cmp	r3, #6
 800a50e:	d9ef      	bls.n	800a4f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a510:	480d      	ldr	r0, [pc, #52]	; (800a548 <prvInitialiseTaskLists+0x64>)
 800a512:	f7fe fc58 	bl	8008dc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a516:	480d      	ldr	r0, [pc, #52]	; (800a54c <prvInitialiseTaskLists+0x68>)
 800a518:	f7fe fc55 	bl	8008dc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a51c:	480c      	ldr	r0, [pc, #48]	; (800a550 <prvInitialiseTaskLists+0x6c>)
 800a51e:	f7fe fc52 	bl	8008dc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a522:	480c      	ldr	r0, [pc, #48]	; (800a554 <prvInitialiseTaskLists+0x70>)
 800a524:	f7fe fc4f 	bl	8008dc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a528:	480b      	ldr	r0, [pc, #44]	; (800a558 <prvInitialiseTaskLists+0x74>)
 800a52a:	f7fe fc4c 	bl	8008dc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a52e:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <prvInitialiseTaskLists+0x78>)
 800a530:	4a05      	ldr	r2, [pc, #20]	; (800a548 <prvInitialiseTaskLists+0x64>)
 800a532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <prvInitialiseTaskLists+0x7c>)
 800a536:	4a05      	ldr	r2, [pc, #20]	; (800a54c <prvInitialiseTaskLists+0x68>)
 800a538:	601a      	str	r2, [r3, #0]
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	200006cc 	.word	0x200006cc
 800a548:	20000758 	.word	0x20000758
 800a54c:	2000076c 	.word	0x2000076c
 800a550:	20000788 	.word	0x20000788
 800a554:	2000079c 	.word	0x2000079c
 800a558:	200007b4 	.word	0x200007b4
 800a55c:	20000780 	.word	0x20000780
 800a560:	20000784 	.word	0x20000784

0800a564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a56a:	e019      	b.n	800a5a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a56c:	f000 fbce 	bl	800ad0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a570:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <prvCheckTasksWaitingTermination+0x4c>)
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fcac 	bl	8008eda <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a582:	4b0c      	ldr	r3, [pc, #48]	; (800a5b4 <prvCheckTasksWaitingTermination+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3b01      	subs	r3, #1
 800a588:	4a0a      	ldr	r2, [pc, #40]	; (800a5b4 <prvCheckTasksWaitingTermination+0x50>)
 800a58a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <prvCheckTasksWaitingTermination+0x54>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3b01      	subs	r3, #1
 800a592:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <prvCheckTasksWaitingTermination+0x54>)
 800a594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a596:	f000 fbe7 	bl	800ad68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f80e 	bl	800a5bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <prvCheckTasksWaitingTermination+0x54>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e1      	bne.n	800a56c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	2000079c 	.word	0x2000079c
 800a5b4:	200007c8 	.word	0x200007c8
 800a5b8:	200007b0 	.word	0x200007b0

0800a5bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d108      	bne.n	800a5e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fd76 	bl	800b0c4 <vPortFree>
				vPortFree( pxTCB );
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fd73 	bl	800b0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5de:	e017      	b.n	800a610 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d103      	bne.n	800a5f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fd6a 	bl	800b0c4 <vPortFree>
	}
 800a5f0:	e00e      	b.n	800a610 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d009      	beq.n	800a610 <prvDeleteTCB+0x54>
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e7fe      	b.n	800a60e <prvDeleteTCB+0x52>
	}
 800a610:	bf00      	nop
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a61e:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <prvResetNextTaskUnblockTime+0x38>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d104      	bne.n	800a632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <prvResetNextTaskUnblockTime+0x3c>)
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295
 800a62e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a630:	e008      	b.n	800a644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a632:	4b07      	ldr	r3, [pc, #28]	; (800a650 <prvResetNextTaskUnblockTime+0x38>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	4a04      	ldr	r2, [pc, #16]	; (800a654 <prvResetNextTaskUnblockTime+0x3c>)
 800a642:	6013      	str	r3, [r2, #0]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000780 	.word	0x20000780
 800a654:	200007e8 	.word	0x200007e8

0800a658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <xTaskGetSchedulerState+0x34>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a666:	2301      	movs	r3, #1
 800a668:	607b      	str	r3, [r7, #4]
 800a66a:	e008      	b.n	800a67e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a66c:	4b08      	ldr	r3, [pc, #32]	; (800a690 <xTaskGetSchedulerState+0x38>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a674:	2302      	movs	r3, #2
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e001      	b.n	800a67e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a67e:	687b      	ldr	r3, [r7, #4]
	}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	200007d4 	.word	0x200007d4
 800a690:	200007f0 	.word	0x200007f0

0800a694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d069      	beq.n	800a77e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ae:	4b36      	ldr	r3, [pc, #216]	; (800a788 <xTaskPriorityInherit+0xf4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d259      	bcs.n	800a76c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db06      	blt.n	800a6ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6c0:	4b31      	ldr	r3, [pc, #196]	; (800a788 <xTaskPriorityInherit+0xf4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	f1c3 0207 	rsb	r2, r3, #7
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6959      	ldr	r1, [r3, #20]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4a2b      	ldr	r2, [pc, #172]	; (800a78c <xTaskPriorityInherit+0xf8>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4299      	cmp	r1, r3
 800a6e4:	d13a      	bne.n	800a75c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fbf5 	bl	8008eda <uxListRemove>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d115      	bne.n	800a722 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fa:	4924      	ldr	r1, [pc, #144]	; (800a78c <xTaskPriorityInherit+0xf8>)
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <xTaskPriorityInherit+0x8e>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	fa02 f303 	lsl.w	r3, r2, r3
 800a716:	43da      	mvns	r2, r3
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <xTaskPriorityInherit+0xfc>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4013      	ands	r3, r2
 800a71e:	4a1c      	ldr	r2, [pc, #112]	; (800a790 <xTaskPriorityInherit+0xfc>)
 800a720:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a722:	4b19      	ldr	r3, [pc, #100]	; (800a788 <xTaskPriorityInherit+0xf4>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	2201      	movs	r2, #1
 800a732:	409a      	lsls	r2, r3
 800a734:	4b16      	ldr	r3, [pc, #88]	; (800a790 <xTaskPriorityInherit+0xfc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4313      	orrs	r3, r2
 800a73a:	4a15      	ldr	r2, [pc, #84]	; (800a790 <xTaskPriorityInherit+0xfc>)
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4a10      	ldr	r2, [pc, #64]	; (800a78c <xTaskPriorityInherit+0xf8>)
 800a74c:	441a      	add	r2, r3
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3304      	adds	r3, #4
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fe fb63 	bl	8008e20 <vListInsertEnd>
 800a75a:	e004      	b.n	800a766 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <xTaskPriorityInherit+0xf4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a766:	2301      	movs	r3, #1
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	e008      	b.n	800a77e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <xTaskPriorityInherit+0xf4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	429a      	cmp	r2, r3
 800a778:	d201      	bcs.n	800a77e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a77e:	68fb      	ldr	r3, [r7, #12]
	}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200006c8 	.word	0x200006c8
 800a78c:	200006cc 	.word	0x200006cc
 800a790:	200007d0 	.word	0x200007d0

0800a794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d06c      	beq.n	800a884 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7aa:	4b39      	ldr	r3, [pc, #228]	; (800a890 <xTaskPriorityDisinherit+0xfc>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d009      	beq.n	800a7c8 <xTaskPriorityDisinherit+0x34>
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e7fe      	b.n	800a7c6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d109      	bne.n	800a7e4 <xTaskPriorityDisinherit+0x50>
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60bb      	str	r3, [r7, #8]
 800a7e2:	e7fe      	b.n	800a7e2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d044      	beq.n	800a884 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d140      	bne.n	800a884 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fb67 	bl	8008eda <uxListRemove>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d115      	bne.n	800a83e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a816:	491f      	ldr	r1, [pc, #124]	; (800a894 <xTaskPriorityDisinherit+0x100>)
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	440b      	add	r3, r1
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xTaskPriorityDisinherit+0xaa>
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	2201      	movs	r2, #1
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	43da      	mvns	r2, r3
 800a834:	4b18      	ldr	r3, [pc, #96]	; (800a898 <xTaskPriorityDisinherit+0x104>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4013      	ands	r3, r2
 800a83a:	4a17      	ldr	r2, [pc, #92]	; (800a898 <xTaskPriorityDisinherit+0x104>)
 800a83c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	f1c3 0207 	rsb	r2, r3, #7
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a856:	2201      	movs	r2, #1
 800a858:	409a      	lsls	r2, r3
 800a85a:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <xTaskPriorityDisinherit+0x104>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4313      	orrs	r3, r2
 800a860:	4a0d      	ldr	r2, [pc, #52]	; (800a898 <xTaskPriorityDisinherit+0x104>)
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4a08      	ldr	r2, [pc, #32]	; (800a894 <xTaskPriorityDisinherit+0x100>)
 800a872:	441a      	add	r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	3304      	adds	r3, #4
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7fe fad0 	bl	8008e20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a880:	2301      	movs	r3, #1
 800a882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a884:	697b      	ldr	r3, [r7, #20]
	}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	200006c8 	.word	0x200006c8
 800a894:	200006cc 	.word	0x200006cc
 800a898:	200007d0 	.word	0x200007d0

0800a89c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8081 	beq.w	800a9b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e7fe      	b.n	800a8d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d902      	bls.n	800a8e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	61fb      	str	r3, [r7, #28]
 800a8e0:	e002      	b.n	800a8e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d062      	beq.n	800a9b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d15d      	bne.n	800a9b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8fc:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	429a      	cmp	r2, r3
 800a904:	d109      	bne.n	800a91a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60bb      	str	r3, [r7, #8]
 800a918:	e7fe      	b.n	800a918 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	69fa      	ldr	r2, [r7, #28]
 800a924:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	db04      	blt.n	800a938 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	f1c3 0207 	rsb	r2, r3, #7
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	6959      	ldr	r1, [r3, #20]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4a1f      	ldr	r2, [pc, #124]	; (800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a948:	4413      	add	r3, r2
 800a94a:	4299      	cmp	r1, r3
 800a94c:	d134      	bne.n	800a9b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fac1 	bl	8008eda <uxListRemove>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d115      	bne.n	800a98a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a962:	4918      	ldr	r1, [pc, #96]	; (800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	2201      	movs	r2, #1
 800a97a:	fa02 f303 	lsl.w	r3, r2, r3
 800a97e:	43da      	mvns	r2, r3
 800a980:	4b11      	ldr	r3, [pc, #68]	; (800a9c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4013      	ands	r3, r2
 800a986:	4a10      	ldr	r2, [pc, #64]	; (800a9c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a988:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	2201      	movs	r2, #1
 800a990:	409a      	lsls	r2, r3
 800a992:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4313      	orrs	r3, r2
 800a998:	4a0b      	ldr	r2, [pc, #44]	; (800a9c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4a06      	ldr	r2, [pc, #24]	; (800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a9aa:	441a      	add	r2, r3
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	f7fe fa34 	bl	8008e20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9b8:	bf00      	nop
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	200006c8 	.word	0x200006c8
 800a9c4:	200006cc 	.word	0x200006cc
 800a9c8:	200007d0 	.word	0x200007d0

0800a9cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d004      	beq.n	800a9e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9de:	3201      	adds	r2, #1
 800a9e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a9e2:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
	}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	200006c8 	.word	0x200006c8

0800a9f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9fe:	4b29      	ldr	r3, [pc, #164]	; (800aaa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa04:	4b28      	ldr	r3, [pc, #160]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fa65 	bl	8008eda <uxListRemove>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10b      	bne.n	800aa2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aa16:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa22:	43da      	mvns	r2, r3
 800aa24:	4b21      	ldr	r3, [pc, #132]	; (800aaac <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	4a20      	ldr	r2, [pc, #128]	; (800aaac <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d10a      	bne.n	800aa4c <prvAddCurrentTaskToDelayedList+0x58>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d007      	beq.n	800aa4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa3c:	4b1a      	ldr	r3, [pc, #104]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3304      	adds	r3, #4
 800aa42:	4619      	mov	r1, r3
 800aa44:	481a      	ldr	r0, [pc, #104]	; (800aab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aa46:	f7fe f9eb 	bl	8008e20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa4a:	e026      	b.n	800aa9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa54:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d209      	bcs.n	800aa78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa64:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f7fe f9f9 	bl	8008e68 <vListInsert>
}
 800aa76:	e010      	b.n	800aa9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3304      	adds	r3, #4
 800aa82:	4619      	mov	r1, r3
 800aa84:	4610      	mov	r0, r2
 800aa86:	f7fe f9ef 	bl	8008e68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d202      	bcs.n	800aa9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aa94:	4a09      	ldr	r2, [pc, #36]	; (800aabc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6013      	str	r3, [r2, #0]
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	200007cc 	.word	0x200007cc
 800aaa8:	200006c8 	.word	0x200006c8
 800aaac:	200007d0 	.word	0x200007d0
 800aab0:	200007b4 	.word	0x200007b4
 800aab4:	20000784 	.word	0x20000784
 800aab8:	20000780 	.word	0x20000780
 800aabc:	200007e8 	.word	0x200007e8

0800aac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3b04      	subs	r3, #4
 800aad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3b04      	subs	r3, #4
 800aade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f023 0201 	bic.w	r2, r3, #1
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaf0:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <pxPortInitialiseStack+0x64>)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3b14      	subs	r3, #20
 800aafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3b04      	subs	r3, #4
 800ab06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f06f 0202 	mvn.w	r2, #2
 800ab0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3b20      	subs	r3, #32
 800ab14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab16:	68fb      	ldr	r3, [r7, #12]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	0800ab29 	.word	0x0800ab29

0800ab28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab32:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <prvTaskExitError+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d009      	beq.n	800ab50 <prvTaskExitError+0x28>
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e7fe      	b.n	800ab4e <prvTaskExitError+0x26>
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab62:	bf00      	nop
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0fc      	beq.n	800ab64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	200000dc 	.word	0x200000dc
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <pxCurrentTCBConst2>)
 800ab82:	6819      	ldr	r1, [r3, #0]
 800ab84:	6808      	ldr	r0, [r1, #0]
 800ab86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	f380 8809 	msr	PSP, r0
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f04f 0000 	mov.w	r0, #0
 800ab96:	f380 8811 	msr	BASEPRI, r0
 800ab9a:	4770      	bx	lr
 800ab9c:	f3af 8000 	nop.w

0800aba0 <pxCurrentTCBConst2>:
 800aba0:	200006c8 	.word	0x200006c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop

0800aba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aba8:	4808      	ldr	r0, [pc, #32]	; (800abcc <prvPortStartFirstTask+0x24>)
 800abaa:	6800      	ldr	r0, [r0, #0]
 800abac:	6800      	ldr	r0, [r0, #0]
 800abae:	f380 8808 	msr	MSP, r0
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8814 	msr	CONTROL, r0
 800abba:	b662      	cpsie	i
 800abbc:	b661      	cpsie	f
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	df00      	svc	0
 800abc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abca:	bf00      	nop
 800abcc:	e000ed08 	.word	0xe000ed08

0800abd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abd6:	4b44      	ldr	r3, [pc, #272]	; (800ace8 <xPortStartScheduler+0x118>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a44      	ldr	r2, [pc, #272]	; (800acec <xPortStartScheduler+0x11c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d109      	bne.n	800abf4 <xPortStartScheduler+0x24>
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e7fe      	b.n	800abf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abf4:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <xPortStartScheduler+0x118>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <xPortStartScheduler+0x120>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d109      	bne.n	800ac12 <xPortStartScheduler+0x42>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e7fe      	b.n	800ac10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac12:	4b38      	ldr	r3, [pc, #224]	; (800acf4 <xPortStartScheduler+0x124>)
 800ac14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	22ff      	movs	r2, #255	; 0xff
 800ac22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <xPortStartScheduler+0x128>)
 800ac38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac3a:	4b30      	ldr	r3, [pc, #192]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac3c:	2207      	movs	r2, #7
 800ac3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac40:	e009      	b.n	800ac56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ac42:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a2c      	ldr	r2, [pc, #176]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5e:	2b80      	cmp	r3, #128	; 0x80
 800ac60:	d0ef      	beq.n	800ac42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac62:	4b26      	ldr	r3, [pc, #152]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f1c3 0307 	rsb	r3, r3, #7
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d009      	beq.n	800ac82 <xPortStartScheduler+0xb2>
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	e7fe      	b.n	800ac80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	4a1c      	ldr	r2, [pc, #112]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac94:	4a19      	ldr	r2, [pc, #100]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aca0:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a16      	ldr	r2, [pc, #88]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acac:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <xPortStartScheduler+0x130>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a13      	ldr	r2, [pc, #76]	; (800ad00 <xPortStartScheduler+0x130>)
 800acb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acb8:	f000 f8d6 	bl	800ae68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <xPortStartScheduler+0x134>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acc2:	f000 f8f5 	bl	800aeb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acc6:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <xPortStartScheduler+0x138>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a0f      	ldr	r2, [pc, #60]	; (800ad08 <xPortStartScheduler+0x138>)
 800accc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800acd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acd2:	f7ff ff69 	bl	800aba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acd6:	f7ff fa8b 	bl	800a1f0 <vTaskSwitchContext>
	prvTaskExitError();
 800acda:	f7ff ff25 	bl	800ab28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	e000ed00 	.word	0xe000ed00
 800acec:	410fc271 	.word	0x410fc271
 800acf0:	410fc270 	.word	0x410fc270
 800acf4:	e000e400 	.word	0xe000e400
 800acf8:	200007f4 	.word	0x200007f4
 800acfc:	200007f8 	.word	0x200007f8
 800ad00:	e000ed20 	.word	0xe000ed20
 800ad04:	200000dc 	.word	0x200000dc
 800ad08:	e000ef34 	.word	0xe000ef34

0800ad0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	4a0d      	ldr	r2, [pc, #52]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d10e      	bne.n	800ad54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortEnterCritical+0x58>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <vPortEnterCritical+0x48>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	603b      	str	r3, [r7, #0]
 800ad52:	e7fe      	b.n	800ad52 <vPortEnterCritical+0x46>
	}
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	200000dc 	.word	0x200000dc
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d109      	bne.n	800ad8a <vPortExitCritical+0x22>
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e7fe      	b.n	800ad88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <vPortExitCritical+0x3e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	200000dc 	.word	0x200000dc
	...

0800adc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adc0:	f3ef 8009 	mrs	r0, PSP
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <pxCurrentTCBConst>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f01e 0f10 	tst.w	lr, #16
 800add0:	bf08      	it	eq
 800add2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800add6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ade0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ade4:	f380 8811 	msr	BASEPRI, r0
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f7ff f9fe 	bl	800a1f0 <vTaskSwitchContext>
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f380 8811 	msr	BASEPRI, r0
 800adfc:	bc09      	pop	{r0, r3}
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae06:	f01e 0f10 	tst.w	lr, #16
 800ae0a:	bf08      	it	eq
 800ae0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae10:	f380 8809 	msr	PSP, r0
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst>:
 800ae20:	200006c8 	.word	0x200006c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae40:	f7ff f91e 	bl	800a080 <xTaskIncrementTick>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae4a:	4b06      	ldr	r3, [pc, #24]	; (800ae64 <SysTick_Handler+0x3c>)
 800ae4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	2300      	movs	r3, #0
 800ae54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortSetupTimerInterrupt+0x38>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <vPortSetupTimerInterrupt+0x3c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <vPortSetupTimerInterrupt+0x40>)
 800ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae82:	099b      	lsrs	r3, r3, #6
 800ae84:	4a09      	ldr	r2, [pc, #36]	; (800aeac <vPortSetupTimerInterrupt+0x44>)
 800ae86:	3b01      	subs	r3, #1
 800ae88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae8a:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	e000e010 	.word	0xe000e010
 800aea0:	e000e018 	.word	0xe000e018
 800aea4:	200000d0 	.word	0x200000d0
 800aea8:	10624dd3 	.word	0x10624dd3
 800aeac:	e000e014 	.word	0xe000e014

0800aeb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aeb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aec0 <vPortEnableVFP+0x10>
 800aeb4:	6801      	ldr	r1, [r0, #0]
 800aeb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeba:	6001      	str	r1, [r0, #0]
 800aebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aebe:	bf00      	nop
 800aec0:	e000ed88 	.word	0xe000ed88

0800aec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeca:	f3ef 8305 	mrs	r3, IPSR
 800aece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b0f      	cmp	r3, #15
 800aed4:	d913      	bls.n	800aefe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aed6:	4a16      	ldr	r2, [pc, #88]	; (800af30 <vPortValidateInterruptPriority+0x6c>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aee0:	4b14      	ldr	r3, [pc, #80]	; (800af34 <vPortValidateInterruptPriority+0x70>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d209      	bcs.n	800aefe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	607b      	str	r3, [r7, #4]
 800aefc:	e7fe      	b.n	800aefc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <vPortValidateInterruptPriority+0x74>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <vPortValidateInterruptPriority+0x78>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d909      	bls.n	800af22 <vPortValidateInterruptPriority+0x5e>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	e7fe      	b.n	800af20 <vPortValidateInterruptPriority+0x5c>
	}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	e000e3f0 	.word	0xe000e3f0
 800af34:	200007f4 	.word	0x200007f4
 800af38:	e000ed0c 	.word	0xe000ed0c
 800af3c:	200007f8 	.word	0x200007f8

0800af40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	; 0x28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af4c:	f7fe ffee 	bl	8009f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af50:	4b57      	ldr	r3, [pc, #348]	; (800b0b0 <pvPortMalloc+0x170>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af58:	f000 f90c 	bl	800b174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af5c:	4b55      	ldr	r3, [pc, #340]	; (800b0b4 <pvPortMalloc+0x174>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 808c 	bne.w	800b082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01c      	beq.n	800afaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af70:	2208      	movs	r2, #8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d013      	beq.n	800afaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	3308      	adds	r3, #8
 800af8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <pvPortMalloc+0x6a>
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e7fe      	b.n	800afa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d068      	beq.n	800b082 <pvPortMalloc+0x142>
 800afb0:	4b41      	ldr	r3, [pc, #260]	; (800b0b8 <pvPortMalloc+0x178>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d863      	bhi.n	800b082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afba:	4b40      	ldr	r3, [pc, #256]	; (800b0bc <pvPortMalloc+0x17c>)
 800afbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afbe:	4b3f      	ldr	r3, [pc, #252]	; (800b0bc <pvPortMalloc+0x17c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afc4:	e004      	b.n	800afd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d903      	bls.n	800afe2 <pvPortMalloc+0xa2>
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f1      	bne.n	800afc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afe2:	4b33      	ldr	r3, [pc, #204]	; (800b0b0 <pvPortMalloc+0x170>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	429a      	cmp	r2, r3
 800afea:	d04a      	beq.n	800b082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4413      	add	r3, r2
 800aff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	2308      	movs	r3, #8
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d91e      	bls.n	800b04c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <pvPortMalloc+0xf4>
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	e7fe      	b.n	800b032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b046:	69b8      	ldr	r0, [r7, #24]
 800b048:	f000 f8f6 	bl	800b238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <pvPortMalloc+0x178>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <pvPortMalloc+0x178>)
 800b058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b05a:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <pvPortMalloc+0x178>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <pvPortMalloc+0x180>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d203      	bcs.n	800b06e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b066:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <pvPortMalloc+0x178>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <pvPortMalloc+0x180>)
 800b06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <pvPortMalloc+0x174>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	431a      	orrs	r2, r3
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b082:	f7fe ff61 	bl	8009f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <pvPortMalloc+0x164>
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e7fe      	b.n	800b0a2 <pvPortMalloc+0x162>
	return pvReturn;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3728      	adds	r7, #40	; 0x28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20002f14 	.word	0x20002f14
 800b0b4:	20002f20 	.word	0x20002f20
 800b0b8:	20002f18 	.word	0x20002f18
 800b0bc:	20002f0c 	.word	0x20002f0c
 800b0c0:	20002f1c 	.word	0x20002f1c

0800b0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d046      	beq.n	800b164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	425b      	negs	r3, r3
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	4b20      	ldr	r3, [pc, #128]	; (800b16c <vPortFree+0xa8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <vPortFree+0x42>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e7fe      	b.n	800b104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <vPortFree+0x5e>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60bb      	str	r3, [r7, #8]
 800b120:	e7fe      	b.n	800b120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b11      	ldr	r3, [pc, #68]	; (800b16c <vPortFree+0xa8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d019      	beq.n	800b164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d115      	bne.n	800b164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <vPortFree+0xa8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	43db      	mvns	r3, r3
 800b142:	401a      	ands	r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b148:	f7fe fef0 	bl	8009f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <vPortFree+0xac>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a06      	ldr	r2, [pc, #24]	; (800b170 <vPortFree+0xac>)
 800b158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f86c 	bl	800b238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b160:	f7fe fef2 	bl	8009f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20002f20 	.word	0x20002f20
 800b170:	20002f18 	.word	0x20002f18

0800b174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b17a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b180:	4b27      	ldr	r3, [pc, #156]	; (800b220 <prvHeapInit+0xac>)
 800b182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00c      	beq.n	800b1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3307      	adds	r3, #7
 800b192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 0307 	bic.w	r3, r3, #7
 800b19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <prvHeapInit+0xac>)
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1ac:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <prvHeapInit+0xb0>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <prvHeapInit+0xb0>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4413      	add	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvHeapInit+0xb4>)
 800b1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvHeapInit+0xb4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <prvHeapInit+0xb4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <prvHeapInit+0xb4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <prvHeapInit+0xb8>)
 800b202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a09      	ldr	r2, [pc, #36]	; (800b230 <prvHeapInit+0xbc>)
 800b20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <prvHeapInit+0xc0>)
 800b20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	200007fc 	.word	0x200007fc
 800b224:	20002f0c 	.word	0x20002f0c
 800b228:	20002f14 	.word	0x20002f14
 800b22c:	20002f1c 	.word	0x20002f1c
 800b230:	20002f18 	.word	0x20002f18
 800b234:	20002f20 	.word	0x20002f20

0800b238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b240:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <prvInsertBlockIntoFreeList+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <prvInsertBlockIntoFreeList+0x14>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d8f7      	bhi.n	800b246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d108      	bne.n	800b27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d118      	bne.n	800b2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d00d      	beq.n	800b2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e008      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e003      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d002      	beq.n	800b2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20002f0c 	.word	0x20002f0c
 800b2e8:	20002f14 	.word	0x20002f14

0800b2ec <__errno>:
 800b2ec:	4b01      	ldr	r3, [pc, #4]	; (800b2f4 <__errno+0x8>)
 800b2ee:	6818      	ldr	r0, [r3, #0]
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200000e0 	.word	0x200000e0

0800b2f8 <__libc_init_array>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	4e0d      	ldr	r6, [pc, #52]	; (800b330 <__libc_init_array+0x38>)
 800b2fc:	4c0d      	ldr	r4, [pc, #52]	; (800b334 <__libc_init_array+0x3c>)
 800b2fe:	1ba4      	subs	r4, r4, r6
 800b300:	10a4      	asrs	r4, r4, #2
 800b302:	2500      	movs	r5, #0
 800b304:	42a5      	cmp	r5, r4
 800b306:	d109      	bne.n	800b31c <__libc_init_array+0x24>
 800b308:	4e0b      	ldr	r6, [pc, #44]	; (800b338 <__libc_init_array+0x40>)
 800b30a:	4c0c      	ldr	r4, [pc, #48]	; (800b33c <__libc_init_array+0x44>)
 800b30c:	f001 fc2a 	bl	800cb64 <_init>
 800b310:	1ba4      	subs	r4, r4, r6
 800b312:	10a4      	asrs	r4, r4, #2
 800b314:	2500      	movs	r5, #0
 800b316:	42a5      	cmp	r5, r4
 800b318:	d105      	bne.n	800b326 <__libc_init_array+0x2e>
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b320:	4798      	blx	r3
 800b322:	3501      	adds	r5, #1
 800b324:	e7ee      	b.n	800b304 <__libc_init_array+0xc>
 800b326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b32a:	4798      	blx	r3
 800b32c:	3501      	adds	r5, #1
 800b32e:	e7f2      	b.n	800b316 <__libc_init_array+0x1e>
 800b330:	0800e7e0 	.word	0x0800e7e0
 800b334:	0800e7e0 	.word	0x0800e7e0
 800b338:	0800e7e0 	.word	0x0800e7e0
 800b33c:	0800e7e4 	.word	0x0800e7e4

0800b340 <malloc>:
 800b340:	4b02      	ldr	r3, [pc, #8]	; (800b34c <malloc+0xc>)
 800b342:	4601      	mov	r1, r0
 800b344:	6818      	ldr	r0, [r3, #0]
 800b346:	f000 b86d 	b.w	800b424 <_malloc_r>
 800b34a:	bf00      	nop
 800b34c:	200000e0 	.word	0x200000e0

0800b350 <free>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <free+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f000 b817 	b.w	800b388 <_free_r>
 800b35a:	bf00      	nop
 800b35c:	200000e0 	.word	0x200000e0

0800b360 <memcpy>:
 800b360:	b510      	push	{r4, lr}
 800b362:	1e43      	subs	r3, r0, #1
 800b364:	440a      	add	r2, r1
 800b366:	4291      	cmp	r1, r2
 800b368:	d100      	bne.n	800b36c <memcpy+0xc>
 800b36a:	bd10      	pop	{r4, pc}
 800b36c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b374:	e7f7      	b.n	800b366 <memcpy+0x6>

0800b376 <memset>:
 800b376:	4402      	add	r2, r0
 800b378:	4603      	mov	r3, r0
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d100      	bne.n	800b380 <memset+0xa>
 800b37e:	4770      	bx	lr
 800b380:	f803 1b01 	strb.w	r1, [r3], #1
 800b384:	e7f9      	b.n	800b37a <memset+0x4>
	...

0800b388 <_free_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4605      	mov	r5, r0
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d045      	beq.n	800b41c <_free_r+0x94>
 800b390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b394:	1f0c      	subs	r4, r1, #4
 800b396:	2b00      	cmp	r3, #0
 800b398:	bfb8      	it	lt
 800b39a:	18e4      	addlt	r4, r4, r3
 800b39c:	f000 fe9c 	bl	800c0d8 <__malloc_lock>
 800b3a0:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <_free_r+0x98>)
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	b933      	cbnz	r3, 800b3b6 <_free_r+0x2e>
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6014      	str	r4, [r2, #0]
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b2:	f000 be92 	b.w	800c0da <__malloc_unlock>
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	d90c      	bls.n	800b3d4 <_free_r+0x4c>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	1862      	adds	r2, r4, r1
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	bf04      	itt	eq
 800b3c2:	681a      	ldreq	r2, [r3, #0]
 800b3c4:	685b      	ldreq	r3, [r3, #4]
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	bf04      	itt	eq
 800b3ca:	1852      	addeq	r2, r2, r1
 800b3cc:	6022      	streq	r2, [r4, #0]
 800b3ce:	6004      	str	r4, [r0, #0]
 800b3d0:	e7ec      	b.n	800b3ac <_free_r+0x24>
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	b10a      	cbz	r2, 800b3dc <_free_r+0x54>
 800b3d8:	42a2      	cmp	r2, r4
 800b3da:	d9fa      	bls.n	800b3d2 <_free_r+0x4a>
 800b3dc:	6819      	ldr	r1, [r3, #0]
 800b3de:	1858      	adds	r0, r3, r1
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d10b      	bne.n	800b3fc <_free_r+0x74>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	4401      	add	r1, r0
 800b3e8:	1858      	adds	r0, r3, r1
 800b3ea:	4282      	cmp	r2, r0
 800b3ec:	6019      	str	r1, [r3, #0]
 800b3ee:	d1dd      	bne.n	800b3ac <_free_r+0x24>
 800b3f0:	6810      	ldr	r0, [r2, #0]
 800b3f2:	6852      	ldr	r2, [r2, #4]
 800b3f4:	605a      	str	r2, [r3, #4]
 800b3f6:	4401      	add	r1, r0
 800b3f8:	6019      	str	r1, [r3, #0]
 800b3fa:	e7d7      	b.n	800b3ac <_free_r+0x24>
 800b3fc:	d902      	bls.n	800b404 <_free_r+0x7c>
 800b3fe:	230c      	movs	r3, #12
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	e7d3      	b.n	800b3ac <_free_r+0x24>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	1821      	adds	r1, r4, r0
 800b408:	428a      	cmp	r2, r1
 800b40a:	bf04      	itt	eq
 800b40c:	6811      	ldreq	r1, [r2, #0]
 800b40e:	6852      	ldreq	r2, [r2, #4]
 800b410:	6062      	str	r2, [r4, #4]
 800b412:	bf04      	itt	eq
 800b414:	1809      	addeq	r1, r1, r0
 800b416:	6021      	streq	r1, [r4, #0]
 800b418:	605c      	str	r4, [r3, #4]
 800b41a:	e7c7      	b.n	800b3ac <_free_r+0x24>
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
 800b41e:	bf00      	nop
 800b420:	20002f24 	.word	0x20002f24

0800b424 <_malloc_r>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	1ccd      	adds	r5, r1, #3
 800b428:	f025 0503 	bic.w	r5, r5, #3
 800b42c:	3508      	adds	r5, #8
 800b42e:	2d0c      	cmp	r5, #12
 800b430:	bf38      	it	cc
 800b432:	250c      	movcc	r5, #12
 800b434:	2d00      	cmp	r5, #0
 800b436:	4606      	mov	r6, r0
 800b438:	db01      	blt.n	800b43e <_malloc_r+0x1a>
 800b43a:	42a9      	cmp	r1, r5
 800b43c:	d903      	bls.n	800b446 <_malloc_r+0x22>
 800b43e:	230c      	movs	r3, #12
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	2000      	movs	r0, #0
 800b444:	bd70      	pop	{r4, r5, r6, pc}
 800b446:	f000 fe47 	bl	800c0d8 <__malloc_lock>
 800b44a:	4a21      	ldr	r2, [pc, #132]	; (800b4d0 <_malloc_r+0xac>)
 800b44c:	6814      	ldr	r4, [r2, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	b991      	cbnz	r1, 800b478 <_malloc_r+0x54>
 800b452:	4c20      	ldr	r4, [pc, #128]	; (800b4d4 <_malloc_r+0xb0>)
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	b91b      	cbnz	r3, 800b460 <_malloc_r+0x3c>
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 f8e7 	bl	800b62c <_sbrk_r>
 800b45e:	6020      	str	r0, [r4, #0]
 800b460:	4629      	mov	r1, r5
 800b462:	4630      	mov	r0, r6
 800b464:	f000 f8e2 	bl	800b62c <_sbrk_r>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d124      	bne.n	800b4b6 <_malloc_r+0x92>
 800b46c:	230c      	movs	r3, #12
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	4630      	mov	r0, r6
 800b472:	f000 fe32 	bl	800c0da <__malloc_unlock>
 800b476:	e7e4      	b.n	800b442 <_malloc_r+0x1e>
 800b478:	680b      	ldr	r3, [r1, #0]
 800b47a:	1b5b      	subs	r3, r3, r5
 800b47c:	d418      	bmi.n	800b4b0 <_malloc_r+0x8c>
 800b47e:	2b0b      	cmp	r3, #11
 800b480:	d90f      	bls.n	800b4a2 <_malloc_r+0x7e>
 800b482:	600b      	str	r3, [r1, #0]
 800b484:	50cd      	str	r5, [r1, r3]
 800b486:	18cc      	adds	r4, r1, r3
 800b488:	4630      	mov	r0, r6
 800b48a:	f000 fe26 	bl	800c0da <__malloc_unlock>
 800b48e:	f104 000b 	add.w	r0, r4, #11
 800b492:	1d23      	adds	r3, r4, #4
 800b494:	f020 0007 	bic.w	r0, r0, #7
 800b498:	1ac3      	subs	r3, r0, r3
 800b49a:	d0d3      	beq.n	800b444 <_malloc_r+0x20>
 800b49c:	425a      	negs	r2, r3
 800b49e:	50e2      	str	r2, [r4, r3]
 800b4a0:	e7d0      	b.n	800b444 <_malloc_r+0x20>
 800b4a2:	428c      	cmp	r4, r1
 800b4a4:	684b      	ldr	r3, [r1, #4]
 800b4a6:	bf16      	itet	ne
 800b4a8:	6063      	strne	r3, [r4, #4]
 800b4aa:	6013      	streq	r3, [r2, #0]
 800b4ac:	460c      	movne	r4, r1
 800b4ae:	e7eb      	b.n	800b488 <_malloc_r+0x64>
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	6849      	ldr	r1, [r1, #4]
 800b4b4:	e7cc      	b.n	800b450 <_malloc_r+0x2c>
 800b4b6:	1cc4      	adds	r4, r0, #3
 800b4b8:	f024 0403 	bic.w	r4, r4, #3
 800b4bc:	42a0      	cmp	r0, r4
 800b4be:	d005      	beq.n	800b4cc <_malloc_r+0xa8>
 800b4c0:	1a21      	subs	r1, r4, r0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 f8b2 	bl	800b62c <_sbrk_r>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d0cf      	beq.n	800b46c <_malloc_r+0x48>
 800b4cc:	6025      	str	r5, [r4, #0]
 800b4ce:	e7db      	b.n	800b488 <_malloc_r+0x64>
 800b4d0:	20002f24 	.word	0x20002f24
 800b4d4:	20002f28 	.word	0x20002f28

0800b4d8 <_perror_r>:
 800b4d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4da:	460d      	mov	r5, r1
 800b4dc:	4604      	mov	r4, r0
 800b4de:	b118      	cbz	r0, 800b4e8 <_perror_r+0x10>
 800b4e0:	6983      	ldr	r3, [r0, #24]
 800b4e2:	b90b      	cbnz	r3, 800b4e8 <_perror_r+0x10>
 800b4e4:	f000 fc8e 	bl	800be04 <__sinit>
 800b4e8:	b14d      	cbz	r5, 800b4fe <_perror_r+0x26>
 800b4ea:	782b      	ldrb	r3, [r5, #0]
 800b4ec:	b13b      	cbz	r3, 800b4fe <_perror_r+0x26>
 800b4ee:	68e1      	ldr	r1, [r4, #12]
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f000 fd67 	bl	800bfc4 <fputs>
 800b4f6:	68e1      	ldr	r1, [r4, #12]
 800b4f8:	4809      	ldr	r0, [pc, #36]	; (800b520 <_perror_r+0x48>)
 800b4fa:	f000 fd63 	bl	800bfc4 <fputs>
 800b4fe:	ab01      	add	r3, sp, #4
 800b500:	2201      	movs	r2, #1
 800b502:	6821      	ldr	r1, [r4, #0]
 800b504:	4620      	mov	r0, r4
 800b506:	f000 f8a1 	bl	800b64c <_strerror_r>
 800b50a:	b110      	cbz	r0, 800b512 <_perror_r+0x3a>
 800b50c:	68e1      	ldr	r1, [r4, #12]
 800b50e:	f000 fd59 	bl	800bfc4 <fputs>
 800b512:	68e1      	ldr	r1, [r4, #12]
 800b514:	200a      	movs	r0, #10
 800b516:	f000 fd05 	bl	800bf24 <fputc>
 800b51a:	b003      	add	sp, #12
 800b51c:	bd30      	pop	{r4, r5, pc}
 800b51e:	bf00      	nop
 800b520:	0800e0a8 	.word	0x0800e0a8

0800b524 <perror>:
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <perror+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f7ff bfd5 	b.w	800b4d8 <_perror_r>
 800b52e:	bf00      	nop
 800b530:	200000e0 	.word	0x200000e0

0800b534 <iprintf>:
 800b534:	b40f      	push	{r0, r1, r2, r3}
 800b536:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <iprintf+0x2c>)
 800b538:	b513      	push	{r0, r1, r4, lr}
 800b53a:	681c      	ldr	r4, [r3, #0]
 800b53c:	b124      	cbz	r4, 800b548 <iprintf+0x14>
 800b53e:	69a3      	ldr	r3, [r4, #24]
 800b540:	b913      	cbnz	r3, 800b548 <iprintf+0x14>
 800b542:	4620      	mov	r0, r4
 800b544:	f000 fc5e 	bl	800be04 <__sinit>
 800b548:	ab05      	add	r3, sp, #20
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	68a1      	ldr	r1, [r4, #8]
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	4620      	mov	r0, r4
 800b552:	f000 ff3f 	bl	800c3d4 <_vfiprintf_r>
 800b556:	b002      	add	sp, #8
 800b558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b55c:	b004      	add	sp, #16
 800b55e:	4770      	bx	lr
 800b560:	200000e0 	.word	0x200000e0

0800b564 <_puts_r>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	460e      	mov	r6, r1
 800b568:	4605      	mov	r5, r0
 800b56a:	b118      	cbz	r0, 800b574 <_puts_r+0x10>
 800b56c:	6983      	ldr	r3, [r0, #24]
 800b56e:	b90b      	cbnz	r3, 800b574 <_puts_r+0x10>
 800b570:	f000 fc48 	bl	800be04 <__sinit>
 800b574:	69ab      	ldr	r3, [r5, #24]
 800b576:	68ac      	ldr	r4, [r5, #8]
 800b578:	b913      	cbnz	r3, 800b580 <_puts_r+0x1c>
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 fc42 	bl	800be04 <__sinit>
 800b580:	4b23      	ldr	r3, [pc, #140]	; (800b610 <_puts_r+0xac>)
 800b582:	429c      	cmp	r4, r3
 800b584:	d117      	bne.n	800b5b6 <_puts_r+0x52>
 800b586:	686c      	ldr	r4, [r5, #4]
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	071b      	lsls	r3, r3, #28
 800b58c:	d51d      	bpl.n	800b5ca <_puts_r+0x66>
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	b1db      	cbz	r3, 800b5ca <_puts_r+0x66>
 800b592:	3e01      	subs	r6, #1
 800b594:	68a3      	ldr	r3, [r4, #8]
 800b596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b59a:	3b01      	subs	r3, #1
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	b9e9      	cbnz	r1, 800b5dc <_puts_r+0x78>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	da2e      	bge.n	800b602 <_puts_r+0x9e>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	210a      	movs	r1, #10
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f000 fa7b 	bl	800baa4 <__swbuf_r>
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d011      	beq.n	800b5d6 <_puts_r+0x72>
 800b5b2:	200a      	movs	r0, #10
 800b5b4:	e011      	b.n	800b5da <_puts_r+0x76>
 800b5b6:	4b17      	ldr	r3, [pc, #92]	; (800b614 <_puts_r+0xb0>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	d101      	bne.n	800b5c0 <_puts_r+0x5c>
 800b5bc:	68ac      	ldr	r4, [r5, #8]
 800b5be:	e7e3      	b.n	800b588 <_puts_r+0x24>
 800b5c0:	4b15      	ldr	r3, [pc, #84]	; (800b618 <_puts_r+0xb4>)
 800b5c2:	429c      	cmp	r4, r3
 800b5c4:	bf08      	it	eq
 800b5c6:	68ec      	ldreq	r4, [r5, #12]
 800b5c8:	e7de      	b.n	800b588 <_puts_r+0x24>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 fabb 	bl	800bb48 <__swsetup_r>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d0dd      	beq.n	800b592 <_puts_r+0x2e>
 800b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	da04      	bge.n	800b5ea <_puts_r+0x86>
 800b5e0:	69a2      	ldr	r2, [r4, #24]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	dc06      	bgt.n	800b5f4 <_puts_r+0x90>
 800b5e6:	290a      	cmp	r1, #10
 800b5e8:	d004      	beq.n	800b5f4 <_puts_r+0x90>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	6022      	str	r2, [r4, #0]
 800b5f0:	7019      	strb	r1, [r3, #0]
 800b5f2:	e7cf      	b.n	800b594 <_puts_r+0x30>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f000 fa54 	bl	800baa4 <__swbuf_r>
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d1c9      	bne.n	800b594 <_puts_r+0x30>
 800b600:	e7e9      	b.n	800b5d6 <_puts_r+0x72>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	200a      	movs	r0, #10
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	6022      	str	r2, [r4, #0]
 800b60a:	7018      	strb	r0, [r3, #0]
 800b60c:	e7e5      	b.n	800b5da <_puts_r+0x76>
 800b60e:	bf00      	nop
 800b610:	0800e764 	.word	0x0800e764
 800b614:	0800e784 	.word	0x0800e784
 800b618:	0800e744 	.word	0x0800e744

0800b61c <puts>:
 800b61c:	4b02      	ldr	r3, [pc, #8]	; (800b628 <puts+0xc>)
 800b61e:	4601      	mov	r1, r0
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	f7ff bf9f 	b.w	800b564 <_puts_r>
 800b626:	bf00      	nop
 800b628:	200000e0 	.word	0x200000e0

0800b62c <_sbrk_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4c06      	ldr	r4, [pc, #24]	; (800b648 <_sbrk_r+0x1c>)
 800b630:	2300      	movs	r3, #0
 800b632:	4605      	mov	r5, r0
 800b634:	4608      	mov	r0, r1
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f7f5 fc90 	bl	8000f5c <_sbrk>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_sbrk_r+0x1a>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	b103      	cbz	r3, 800b646 <_sbrk_r+0x1a>
 800b644:	602b      	str	r3, [r5, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	20003174 	.word	0x20003174

0800b64c <_strerror_r>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	288e      	cmp	r0, #142	; 0x8e
 800b656:	f200 812f 	bhi.w	800b8b8 <_strerror_r+0x26c>
 800b65a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b65e:	0138      	.short	0x0138
 800b660:	0091008f 	.word	0x0091008f
 800b664:	00950093 	.word	0x00950093
 800b668:	00990097 	.word	0x00990097
 800b66c:	009d009b 	.word	0x009d009b
 800b670:	00a300a1 	.word	0x00a300a1
 800b674:	00a900a7 	.word	0x00a900a7
 800b678:	00ad00ab 	.word	0x00ad00ab
 800b67c:	00af012d 	.word	0x00af012d
 800b680:	00b300b1 	.word	0x00b300b1
 800b684:	00b700b5 	.word	0x00b700b5
 800b688:	00bf00bd 	.word	0x00bf00bd
 800b68c:	00c700c5 	.word	0x00c700c5
 800b690:	00cb00c9 	.word	0x00cb00c9
 800b694:	00d100cd 	.word	0x00d100cd
 800b698:	00d700d5 	.word	0x00d700d5
 800b69c:	00db00d9 	.word	0x00db00d9
 800b6a0:	00df00dd 	.word	0x00df00dd
 800b6a4:	00e300e1 	.word	0x00e300e1
 800b6a8:	012d012d 	.word	0x012d012d
 800b6ac:	012d012d 	.word	0x012d012d
 800b6b0:	012d012d 	.word	0x012d012d
 800b6b4:	012d012d 	.word	0x012d012d
 800b6b8:	00eb00e7 	.word	0x00eb00e7
 800b6bc:	012d012d 	.word	0x012d012d
 800b6c0:	012d012d 	.word	0x012d012d
 800b6c4:	012d012d 	.word	0x012d012d
 800b6c8:	012d012d 	.word	0x012d012d
 800b6cc:	012d012d 	.word	0x012d012d
 800b6d0:	012d012d 	.word	0x012d012d
 800b6d4:	00ed012d 	.word	0x00ed012d
 800b6d8:	00ef0107 	.word	0x00ef0107
 800b6dc:	012d00f1 	.word	0x012d00f1
 800b6e0:	012d012d 	.word	0x012d012d
 800b6e4:	012d00f3 	.word	0x012d00f3
 800b6e8:	012d012d 	.word	0x012d012d
 800b6ec:	012d00f5 	.word	0x012d00f5
 800b6f0:	00f9012d 	.word	0x00f9012d
 800b6f4:	012d012d 	.word	0x012d012d
 800b6f8:	012d00fb 	.word	0x012d00fb
 800b6fc:	012d012d 	.word	0x012d012d
 800b700:	012d012d 	.word	0x012d012d
 800b704:	012d012d 	.word	0x012d012d
 800b708:	012d012d 	.word	0x012d012d
 800b70c:	00fd012d 	.word	0x00fd012d
 800b710:	00ff012d 	.word	0x00ff012d
 800b714:	01030101 	.word	0x01030101
 800b718:	012d012d 	.word	0x012d012d
 800b71c:	012d0125 	.word	0x012d0125
 800b720:	012d012d 	.word	0x012d012d
 800b724:	012d012d 	.word	0x012d012d
 800b728:	012d012d 	.word	0x012d012d
 800b72c:	0113012d 	.word	0x0113012d
 800b730:	01090105 	.word	0x01090105
 800b734:	010d010b 	.word	0x010d010b
 800b738:	012d010f 	.word	0x012d010f
 800b73c:	01150111 	.word	0x01150111
 800b740:	00e90119 	.word	0x00e90119
 800b744:	012b00c1 	.word	0x012b00c1
 800b748:	00cf00b9 	.word	0x00cf00b9
 800b74c:	009f00bb 	.word	0x009f00bb
 800b750:	012900a5 	.word	0x012900a5
 800b754:	012d00f7 	.word	0x012d00f7
 800b758:	00c30117 	.word	0x00c30117
 800b75c:	011b011d 	.word	0x011b011d
 800b760:	012d012d 	.word	0x012d012d
 800b764:	012d012d 	.word	0x012d012d
 800b768:	00d3012d 	.word	0x00d3012d
 800b76c:	012d012d 	.word	0x012d012d
 800b770:	00e5012d 	.word	0x00e5012d
 800b774:	011f0127 	.word	0x011f0127
 800b778:	01230121 	.word	0x01230121
 800b77c:	4855      	ldr	r0, [pc, #340]	; (800b8d4 <_strerror_r+0x288>)
 800b77e:	bd10      	pop	{r4, pc}
 800b780:	4855      	ldr	r0, [pc, #340]	; (800b8d8 <_strerror_r+0x28c>)
 800b782:	e7fc      	b.n	800b77e <_strerror_r+0x132>
 800b784:	4855      	ldr	r0, [pc, #340]	; (800b8dc <_strerror_r+0x290>)
 800b786:	e7fa      	b.n	800b77e <_strerror_r+0x132>
 800b788:	4855      	ldr	r0, [pc, #340]	; (800b8e0 <_strerror_r+0x294>)
 800b78a:	e7f8      	b.n	800b77e <_strerror_r+0x132>
 800b78c:	4855      	ldr	r0, [pc, #340]	; (800b8e4 <_strerror_r+0x298>)
 800b78e:	e7f6      	b.n	800b77e <_strerror_r+0x132>
 800b790:	4855      	ldr	r0, [pc, #340]	; (800b8e8 <_strerror_r+0x29c>)
 800b792:	e7f4      	b.n	800b77e <_strerror_r+0x132>
 800b794:	4855      	ldr	r0, [pc, #340]	; (800b8ec <_strerror_r+0x2a0>)
 800b796:	e7f2      	b.n	800b77e <_strerror_r+0x132>
 800b798:	4855      	ldr	r0, [pc, #340]	; (800b8f0 <_strerror_r+0x2a4>)
 800b79a:	e7f0      	b.n	800b77e <_strerror_r+0x132>
 800b79c:	4855      	ldr	r0, [pc, #340]	; (800b8f4 <_strerror_r+0x2a8>)
 800b79e:	e7ee      	b.n	800b77e <_strerror_r+0x132>
 800b7a0:	4855      	ldr	r0, [pc, #340]	; (800b8f8 <_strerror_r+0x2ac>)
 800b7a2:	e7ec      	b.n	800b77e <_strerror_r+0x132>
 800b7a4:	4855      	ldr	r0, [pc, #340]	; (800b8fc <_strerror_r+0x2b0>)
 800b7a6:	e7ea      	b.n	800b77e <_strerror_r+0x132>
 800b7a8:	4855      	ldr	r0, [pc, #340]	; (800b900 <_strerror_r+0x2b4>)
 800b7aa:	e7e8      	b.n	800b77e <_strerror_r+0x132>
 800b7ac:	4855      	ldr	r0, [pc, #340]	; (800b904 <_strerror_r+0x2b8>)
 800b7ae:	e7e6      	b.n	800b77e <_strerror_r+0x132>
 800b7b0:	4855      	ldr	r0, [pc, #340]	; (800b908 <_strerror_r+0x2bc>)
 800b7b2:	e7e4      	b.n	800b77e <_strerror_r+0x132>
 800b7b4:	4855      	ldr	r0, [pc, #340]	; (800b90c <_strerror_r+0x2c0>)
 800b7b6:	e7e2      	b.n	800b77e <_strerror_r+0x132>
 800b7b8:	4855      	ldr	r0, [pc, #340]	; (800b910 <_strerror_r+0x2c4>)
 800b7ba:	e7e0      	b.n	800b77e <_strerror_r+0x132>
 800b7bc:	4855      	ldr	r0, [pc, #340]	; (800b914 <_strerror_r+0x2c8>)
 800b7be:	e7de      	b.n	800b77e <_strerror_r+0x132>
 800b7c0:	4855      	ldr	r0, [pc, #340]	; (800b918 <_strerror_r+0x2cc>)
 800b7c2:	e7dc      	b.n	800b77e <_strerror_r+0x132>
 800b7c4:	4855      	ldr	r0, [pc, #340]	; (800b91c <_strerror_r+0x2d0>)
 800b7c6:	e7da      	b.n	800b77e <_strerror_r+0x132>
 800b7c8:	4855      	ldr	r0, [pc, #340]	; (800b920 <_strerror_r+0x2d4>)
 800b7ca:	e7d8      	b.n	800b77e <_strerror_r+0x132>
 800b7cc:	4855      	ldr	r0, [pc, #340]	; (800b924 <_strerror_r+0x2d8>)
 800b7ce:	e7d6      	b.n	800b77e <_strerror_r+0x132>
 800b7d0:	4855      	ldr	r0, [pc, #340]	; (800b928 <_strerror_r+0x2dc>)
 800b7d2:	e7d4      	b.n	800b77e <_strerror_r+0x132>
 800b7d4:	4855      	ldr	r0, [pc, #340]	; (800b92c <_strerror_r+0x2e0>)
 800b7d6:	e7d2      	b.n	800b77e <_strerror_r+0x132>
 800b7d8:	4855      	ldr	r0, [pc, #340]	; (800b930 <_strerror_r+0x2e4>)
 800b7da:	e7d0      	b.n	800b77e <_strerror_r+0x132>
 800b7dc:	4855      	ldr	r0, [pc, #340]	; (800b934 <_strerror_r+0x2e8>)
 800b7de:	e7ce      	b.n	800b77e <_strerror_r+0x132>
 800b7e0:	4855      	ldr	r0, [pc, #340]	; (800b938 <_strerror_r+0x2ec>)
 800b7e2:	e7cc      	b.n	800b77e <_strerror_r+0x132>
 800b7e4:	4855      	ldr	r0, [pc, #340]	; (800b93c <_strerror_r+0x2f0>)
 800b7e6:	e7ca      	b.n	800b77e <_strerror_r+0x132>
 800b7e8:	4855      	ldr	r0, [pc, #340]	; (800b940 <_strerror_r+0x2f4>)
 800b7ea:	e7c8      	b.n	800b77e <_strerror_r+0x132>
 800b7ec:	4855      	ldr	r0, [pc, #340]	; (800b944 <_strerror_r+0x2f8>)
 800b7ee:	e7c6      	b.n	800b77e <_strerror_r+0x132>
 800b7f0:	4855      	ldr	r0, [pc, #340]	; (800b948 <_strerror_r+0x2fc>)
 800b7f2:	e7c4      	b.n	800b77e <_strerror_r+0x132>
 800b7f4:	4855      	ldr	r0, [pc, #340]	; (800b94c <_strerror_r+0x300>)
 800b7f6:	e7c2      	b.n	800b77e <_strerror_r+0x132>
 800b7f8:	4855      	ldr	r0, [pc, #340]	; (800b950 <_strerror_r+0x304>)
 800b7fa:	e7c0      	b.n	800b77e <_strerror_r+0x132>
 800b7fc:	4855      	ldr	r0, [pc, #340]	; (800b954 <_strerror_r+0x308>)
 800b7fe:	e7be      	b.n	800b77e <_strerror_r+0x132>
 800b800:	4855      	ldr	r0, [pc, #340]	; (800b958 <_strerror_r+0x30c>)
 800b802:	e7bc      	b.n	800b77e <_strerror_r+0x132>
 800b804:	4855      	ldr	r0, [pc, #340]	; (800b95c <_strerror_r+0x310>)
 800b806:	e7ba      	b.n	800b77e <_strerror_r+0x132>
 800b808:	4855      	ldr	r0, [pc, #340]	; (800b960 <_strerror_r+0x314>)
 800b80a:	e7b8      	b.n	800b77e <_strerror_r+0x132>
 800b80c:	4855      	ldr	r0, [pc, #340]	; (800b964 <_strerror_r+0x318>)
 800b80e:	e7b6      	b.n	800b77e <_strerror_r+0x132>
 800b810:	4855      	ldr	r0, [pc, #340]	; (800b968 <_strerror_r+0x31c>)
 800b812:	e7b4      	b.n	800b77e <_strerror_r+0x132>
 800b814:	4855      	ldr	r0, [pc, #340]	; (800b96c <_strerror_r+0x320>)
 800b816:	e7b2      	b.n	800b77e <_strerror_r+0x132>
 800b818:	4855      	ldr	r0, [pc, #340]	; (800b970 <_strerror_r+0x324>)
 800b81a:	e7b0      	b.n	800b77e <_strerror_r+0x132>
 800b81c:	4855      	ldr	r0, [pc, #340]	; (800b974 <_strerror_r+0x328>)
 800b81e:	e7ae      	b.n	800b77e <_strerror_r+0x132>
 800b820:	4855      	ldr	r0, [pc, #340]	; (800b978 <_strerror_r+0x32c>)
 800b822:	e7ac      	b.n	800b77e <_strerror_r+0x132>
 800b824:	4855      	ldr	r0, [pc, #340]	; (800b97c <_strerror_r+0x330>)
 800b826:	e7aa      	b.n	800b77e <_strerror_r+0x132>
 800b828:	4855      	ldr	r0, [pc, #340]	; (800b980 <_strerror_r+0x334>)
 800b82a:	e7a8      	b.n	800b77e <_strerror_r+0x132>
 800b82c:	4855      	ldr	r0, [pc, #340]	; (800b984 <_strerror_r+0x338>)
 800b82e:	e7a6      	b.n	800b77e <_strerror_r+0x132>
 800b830:	4855      	ldr	r0, [pc, #340]	; (800b988 <_strerror_r+0x33c>)
 800b832:	e7a4      	b.n	800b77e <_strerror_r+0x132>
 800b834:	4855      	ldr	r0, [pc, #340]	; (800b98c <_strerror_r+0x340>)
 800b836:	e7a2      	b.n	800b77e <_strerror_r+0x132>
 800b838:	4855      	ldr	r0, [pc, #340]	; (800b990 <_strerror_r+0x344>)
 800b83a:	e7a0      	b.n	800b77e <_strerror_r+0x132>
 800b83c:	4855      	ldr	r0, [pc, #340]	; (800b994 <_strerror_r+0x348>)
 800b83e:	e79e      	b.n	800b77e <_strerror_r+0x132>
 800b840:	4855      	ldr	r0, [pc, #340]	; (800b998 <_strerror_r+0x34c>)
 800b842:	e79c      	b.n	800b77e <_strerror_r+0x132>
 800b844:	4855      	ldr	r0, [pc, #340]	; (800b99c <_strerror_r+0x350>)
 800b846:	e79a      	b.n	800b77e <_strerror_r+0x132>
 800b848:	4855      	ldr	r0, [pc, #340]	; (800b9a0 <_strerror_r+0x354>)
 800b84a:	e798      	b.n	800b77e <_strerror_r+0x132>
 800b84c:	4855      	ldr	r0, [pc, #340]	; (800b9a4 <_strerror_r+0x358>)
 800b84e:	e796      	b.n	800b77e <_strerror_r+0x132>
 800b850:	4855      	ldr	r0, [pc, #340]	; (800b9a8 <_strerror_r+0x35c>)
 800b852:	e794      	b.n	800b77e <_strerror_r+0x132>
 800b854:	4855      	ldr	r0, [pc, #340]	; (800b9ac <_strerror_r+0x360>)
 800b856:	e792      	b.n	800b77e <_strerror_r+0x132>
 800b858:	4855      	ldr	r0, [pc, #340]	; (800b9b0 <_strerror_r+0x364>)
 800b85a:	e790      	b.n	800b77e <_strerror_r+0x132>
 800b85c:	4855      	ldr	r0, [pc, #340]	; (800b9b4 <_strerror_r+0x368>)
 800b85e:	e78e      	b.n	800b77e <_strerror_r+0x132>
 800b860:	4855      	ldr	r0, [pc, #340]	; (800b9b8 <_strerror_r+0x36c>)
 800b862:	e78c      	b.n	800b77e <_strerror_r+0x132>
 800b864:	4855      	ldr	r0, [pc, #340]	; (800b9bc <_strerror_r+0x370>)
 800b866:	e78a      	b.n	800b77e <_strerror_r+0x132>
 800b868:	4855      	ldr	r0, [pc, #340]	; (800b9c0 <_strerror_r+0x374>)
 800b86a:	e788      	b.n	800b77e <_strerror_r+0x132>
 800b86c:	4855      	ldr	r0, [pc, #340]	; (800b9c4 <_strerror_r+0x378>)
 800b86e:	e786      	b.n	800b77e <_strerror_r+0x132>
 800b870:	4855      	ldr	r0, [pc, #340]	; (800b9c8 <_strerror_r+0x37c>)
 800b872:	e784      	b.n	800b77e <_strerror_r+0x132>
 800b874:	4855      	ldr	r0, [pc, #340]	; (800b9cc <_strerror_r+0x380>)
 800b876:	e782      	b.n	800b77e <_strerror_r+0x132>
 800b878:	4855      	ldr	r0, [pc, #340]	; (800b9d0 <_strerror_r+0x384>)
 800b87a:	e780      	b.n	800b77e <_strerror_r+0x132>
 800b87c:	4855      	ldr	r0, [pc, #340]	; (800b9d4 <_strerror_r+0x388>)
 800b87e:	e77e      	b.n	800b77e <_strerror_r+0x132>
 800b880:	4855      	ldr	r0, [pc, #340]	; (800b9d8 <_strerror_r+0x38c>)
 800b882:	e77c      	b.n	800b77e <_strerror_r+0x132>
 800b884:	4855      	ldr	r0, [pc, #340]	; (800b9dc <_strerror_r+0x390>)
 800b886:	e77a      	b.n	800b77e <_strerror_r+0x132>
 800b888:	4855      	ldr	r0, [pc, #340]	; (800b9e0 <_strerror_r+0x394>)
 800b88a:	e778      	b.n	800b77e <_strerror_r+0x132>
 800b88c:	4855      	ldr	r0, [pc, #340]	; (800b9e4 <_strerror_r+0x398>)
 800b88e:	e776      	b.n	800b77e <_strerror_r+0x132>
 800b890:	4855      	ldr	r0, [pc, #340]	; (800b9e8 <_strerror_r+0x39c>)
 800b892:	e774      	b.n	800b77e <_strerror_r+0x132>
 800b894:	4855      	ldr	r0, [pc, #340]	; (800b9ec <_strerror_r+0x3a0>)
 800b896:	e772      	b.n	800b77e <_strerror_r+0x132>
 800b898:	4855      	ldr	r0, [pc, #340]	; (800b9f0 <_strerror_r+0x3a4>)
 800b89a:	e770      	b.n	800b77e <_strerror_r+0x132>
 800b89c:	4855      	ldr	r0, [pc, #340]	; (800b9f4 <_strerror_r+0x3a8>)
 800b89e:	e76e      	b.n	800b77e <_strerror_r+0x132>
 800b8a0:	4855      	ldr	r0, [pc, #340]	; (800b9f8 <_strerror_r+0x3ac>)
 800b8a2:	e76c      	b.n	800b77e <_strerror_r+0x132>
 800b8a4:	4855      	ldr	r0, [pc, #340]	; (800b9fc <_strerror_r+0x3b0>)
 800b8a6:	e76a      	b.n	800b77e <_strerror_r+0x132>
 800b8a8:	4855      	ldr	r0, [pc, #340]	; (800ba00 <_strerror_r+0x3b4>)
 800b8aa:	e768      	b.n	800b77e <_strerror_r+0x132>
 800b8ac:	4855      	ldr	r0, [pc, #340]	; (800ba04 <_strerror_r+0x3b8>)
 800b8ae:	e766      	b.n	800b77e <_strerror_r+0x132>
 800b8b0:	4855      	ldr	r0, [pc, #340]	; (800ba08 <_strerror_r+0x3bc>)
 800b8b2:	e764      	b.n	800b77e <_strerror_r+0x132>
 800b8b4:	4855      	ldr	r0, [pc, #340]	; (800ba0c <_strerror_r+0x3c0>)
 800b8b6:	e762      	b.n	800b77e <_strerror_r+0x132>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	bf14      	ite	ne
 800b8bc:	461a      	movne	r2, r3
 800b8be:	4622      	moveq	r2, r4
 800b8c0:	f000 f8b4 	bl	800ba2c <_user_strerror>
 800b8c4:	4b52      	ldr	r3, [pc, #328]	; (800ba10 <_strerror_r+0x3c4>)
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	bf08      	it	eq
 800b8ca:	4618      	moveq	r0, r3
 800b8cc:	e757      	b.n	800b77e <_strerror_r+0x132>
 800b8ce:	4851      	ldr	r0, [pc, #324]	; (800ba14 <_strerror_r+0x3c8>)
 800b8d0:	e755      	b.n	800b77e <_strerror_r+0x132>
 800b8d2:	bf00      	nop
 800b8d4:	0800e0b3 	.word	0x0800e0b3
 800b8d8:	0800e0bd 	.word	0x0800e0bd
 800b8dc:	0800e0d7 	.word	0x0800e0d7
 800b8e0:	0800e0e7 	.word	0x0800e0e7
 800b8e4:	0800e0ff 	.word	0x0800e0ff
 800b8e8:	0800e109 	.word	0x0800e109
 800b8ec:	0800e123 	.word	0x0800e123
 800b8f0:	0800e135 	.word	0x0800e135
 800b8f4:	0800e147 	.word	0x0800e147
 800b8f8:	0800e160 	.word	0x0800e160
 800b8fc:	0800e170 	.word	0x0800e170
 800b900:	0800e17c 	.word	0x0800e17c
 800b904:	0800e199 	.word	0x0800e199
 800b908:	0800e1ab 	.word	0x0800e1ab
 800b90c:	0800e1bc 	.word	0x0800e1bc
 800b910:	0800e1ce 	.word	0x0800e1ce
 800b914:	0800e1da 	.word	0x0800e1da
 800b918:	0800e1f2 	.word	0x0800e1f2
 800b91c:	0800e1fe 	.word	0x0800e1fe
 800b920:	0800e210 	.word	0x0800e210
 800b924:	0800e21f 	.word	0x0800e21f
 800b928:	0800e22f 	.word	0x0800e22f
 800b92c:	0800e23c 	.word	0x0800e23c
 800b930:	0800e25b 	.word	0x0800e25b
 800b934:	0800e26a 	.word	0x0800e26a
 800b938:	0800e27b 	.word	0x0800e27b
 800b93c:	0800e29f 	.word	0x0800e29f
 800b940:	0800e2bd 	.word	0x0800e2bd
 800b944:	0800e2db 	.word	0x0800e2db
 800b948:	0800e2fb 	.word	0x0800e2fb
 800b94c:	0800e312 	.word	0x0800e312
 800b950:	0800e321 	.word	0x0800e321
 800b954:	0800e330 	.word	0x0800e330
 800b958:	0800e344 	.word	0x0800e344
 800b95c:	0800e35c 	.word	0x0800e35c
 800b960:	0800e36a 	.word	0x0800e36a
 800b964:	0800e377 	.word	0x0800e377
 800b968:	0800e38d 	.word	0x0800e38d
 800b96c:	0800e39c 	.word	0x0800e39c
 800b970:	0800e3a8 	.word	0x0800e3a8
 800b974:	0800e3d7 	.word	0x0800e3d7
 800b978:	0800e3e8 	.word	0x0800e3e8
 800b97c:	0800e403 	.word	0x0800e403
 800b980:	0800e416 	.word	0x0800e416
 800b984:	0800e42c 	.word	0x0800e42c
 800b988:	0800e435 	.word	0x0800e435
 800b98c:	0800e44c 	.word	0x0800e44c
 800b990:	0800e454 	.word	0x0800e454
 800b994:	0800e461 	.word	0x0800e461
 800b998:	0800e476 	.word	0x0800e476
 800b99c:	0800e48a 	.word	0x0800e48a
 800b9a0:	0800e4a2 	.word	0x0800e4a2
 800b9a4:	0800e4b1 	.word	0x0800e4b1
 800b9a8:	0800e4c2 	.word	0x0800e4c2
 800b9ac:	0800e4d5 	.word	0x0800e4d5
 800b9b0:	0800e4e1 	.word	0x0800e4e1
 800b9b4:	0800e4fa 	.word	0x0800e4fa
 800b9b8:	0800e50e 	.word	0x0800e50e
 800b9bc:	0800e529 	.word	0x0800e529
 800b9c0:	0800e541 	.word	0x0800e541
 800b9c4:	0800e55b 	.word	0x0800e55b
 800b9c8:	0800e563 	.word	0x0800e563
 800b9cc:	0800e593 	.word	0x0800e593
 800b9d0:	0800e5b2 	.word	0x0800e5b2
 800b9d4:	0800e5d1 	.word	0x0800e5d1
 800b9d8:	0800e5e8 	.word	0x0800e5e8
 800b9dc:	0800e5fb 	.word	0x0800e5fb
 800b9e0:	0800e614 	.word	0x0800e614
 800b9e4:	0800e62b 	.word	0x0800e62b
 800b9e8:	0800e641 	.word	0x0800e641
 800b9ec:	0800e662 	.word	0x0800e662
 800b9f0:	0800e67a 	.word	0x0800e67a
 800b9f4:	0800e696 	.word	0x0800e696
 800b9f8:	0800e6a9 	.word	0x0800e6a9
 800b9fc:	0800e6bf 	.word	0x0800e6bf
 800ba00:	0800e6d3 	.word	0x0800e6d3
 800ba04:	0800e6f5 	.word	0x0800e6f5
 800ba08:	0800e71b 	.word	0x0800e71b
 800ba0c:	0800e72c 	.word	0x0800e72c
 800ba10:	0800e7a9 	.word	0x0800e7a9
 800ba14:	0800e0ab 	.word	0x0800e0ab

0800ba18 <strerror>:
 800ba18:	4601      	mov	r1, r0
 800ba1a:	4803      	ldr	r0, [pc, #12]	; (800ba28 <strerror+0x10>)
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6800      	ldr	r0, [r0, #0]
 800ba22:	f7ff be13 	b.w	800b64c <_strerror_r>
 800ba26:	bf00      	nop
 800ba28:	200000e0 	.word	0x200000e0

0800ba2c <_user_strerror>:
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	4770      	bx	lr

0800ba30 <_vsniprintf_r>:
 800ba30:	b530      	push	{r4, r5, lr}
 800ba32:	1e14      	subs	r4, r2, #0
 800ba34:	4605      	mov	r5, r0
 800ba36:	b09b      	sub	sp, #108	; 0x6c
 800ba38:	4618      	mov	r0, r3
 800ba3a:	da05      	bge.n	800ba48 <_vsniprintf_r+0x18>
 800ba3c:	238b      	movs	r3, #139	; 0x8b
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f04f 30ff 	mov.w	r0, #4294967295
 800ba44:	b01b      	add	sp, #108	; 0x6c
 800ba46:	bd30      	pop	{r4, r5, pc}
 800ba48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ba4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba50:	bf14      	ite	ne
 800ba52:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba56:	4623      	moveq	r3, r4
 800ba58:	9302      	str	r3, [sp, #8]
 800ba5a:	9305      	str	r3, [sp, #20]
 800ba5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba60:	9100      	str	r1, [sp, #0]
 800ba62:	9104      	str	r1, [sp, #16]
 800ba64:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba68:	4602      	mov	r2, r0
 800ba6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba6c:	4669      	mov	r1, sp
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 fb8e 	bl	800c190 <_svfiprintf_r>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	bfbc      	itt	lt
 800ba78:	238b      	movlt	r3, #139	; 0x8b
 800ba7a:	602b      	strlt	r3, [r5, #0]
 800ba7c:	2c00      	cmp	r4, #0
 800ba7e:	d0e1      	beq.n	800ba44 <_vsniprintf_r+0x14>
 800ba80:	9b00      	ldr	r3, [sp, #0]
 800ba82:	2200      	movs	r2, #0
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	e7dd      	b.n	800ba44 <_vsniprintf_r+0x14>

0800ba88 <vsniprintf>:
 800ba88:	b507      	push	{r0, r1, r2, lr}
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	460a      	mov	r2, r1
 800ba90:	4601      	mov	r1, r0
 800ba92:	4803      	ldr	r0, [pc, #12]	; (800baa0 <vsniprintf+0x18>)
 800ba94:	6800      	ldr	r0, [r0, #0]
 800ba96:	f7ff ffcb 	bl	800ba30 <_vsniprintf_r>
 800ba9a:	b003      	add	sp, #12
 800ba9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800baa0:	200000e0 	.word	0x200000e0

0800baa4 <__swbuf_r>:
 800baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa6:	460e      	mov	r6, r1
 800baa8:	4614      	mov	r4, r2
 800baaa:	4605      	mov	r5, r0
 800baac:	b118      	cbz	r0, 800bab6 <__swbuf_r+0x12>
 800baae:	6983      	ldr	r3, [r0, #24]
 800bab0:	b90b      	cbnz	r3, 800bab6 <__swbuf_r+0x12>
 800bab2:	f000 f9a7 	bl	800be04 <__sinit>
 800bab6:	4b21      	ldr	r3, [pc, #132]	; (800bb3c <__swbuf_r+0x98>)
 800bab8:	429c      	cmp	r4, r3
 800baba:	d12a      	bne.n	800bb12 <__swbuf_r+0x6e>
 800babc:	686c      	ldr	r4, [r5, #4]
 800babe:	69a3      	ldr	r3, [r4, #24]
 800bac0:	60a3      	str	r3, [r4, #8]
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	071a      	lsls	r2, r3, #28
 800bac6:	d52e      	bpl.n	800bb26 <__swbuf_r+0x82>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	b363      	cbz	r3, 800bb26 <__swbuf_r+0x82>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	6820      	ldr	r0, [r4, #0]
 800bad0:	1ac0      	subs	r0, r0, r3
 800bad2:	6963      	ldr	r3, [r4, #20]
 800bad4:	b2f6      	uxtb	r6, r6
 800bad6:	4283      	cmp	r3, r0
 800bad8:	4637      	mov	r7, r6
 800bada:	dc04      	bgt.n	800bae6 <__swbuf_r+0x42>
 800badc:	4621      	mov	r1, r4
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f926 	bl	800bd30 <_fflush_r>
 800bae4:	bb28      	cbnz	r0, 800bb32 <__swbuf_r+0x8e>
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	3b01      	subs	r3, #1
 800baea:	60a3      	str	r3, [r4, #8]
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	6022      	str	r2, [r4, #0]
 800baf2:	701e      	strb	r6, [r3, #0]
 800baf4:	6963      	ldr	r3, [r4, #20]
 800baf6:	3001      	adds	r0, #1
 800baf8:	4283      	cmp	r3, r0
 800bafa:	d004      	beq.n	800bb06 <__swbuf_r+0x62>
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	07db      	lsls	r3, r3, #31
 800bb00:	d519      	bpl.n	800bb36 <__swbuf_r+0x92>
 800bb02:	2e0a      	cmp	r6, #10
 800bb04:	d117      	bne.n	800bb36 <__swbuf_r+0x92>
 800bb06:	4621      	mov	r1, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 f911 	bl	800bd30 <_fflush_r>
 800bb0e:	b190      	cbz	r0, 800bb36 <__swbuf_r+0x92>
 800bb10:	e00f      	b.n	800bb32 <__swbuf_r+0x8e>
 800bb12:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <__swbuf_r+0x9c>)
 800bb14:	429c      	cmp	r4, r3
 800bb16:	d101      	bne.n	800bb1c <__swbuf_r+0x78>
 800bb18:	68ac      	ldr	r4, [r5, #8]
 800bb1a:	e7d0      	b.n	800babe <__swbuf_r+0x1a>
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <__swbuf_r+0xa0>)
 800bb1e:	429c      	cmp	r4, r3
 800bb20:	bf08      	it	eq
 800bb22:	68ec      	ldreq	r4, [r5, #12]
 800bb24:	e7cb      	b.n	800babe <__swbuf_r+0x1a>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 f80d 	bl	800bb48 <__swsetup_r>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d0cc      	beq.n	800bacc <__swbuf_r+0x28>
 800bb32:	f04f 37ff 	mov.w	r7, #4294967295
 800bb36:	4638      	mov	r0, r7
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800e764 	.word	0x0800e764
 800bb40:	0800e784 	.word	0x0800e784
 800bb44:	0800e744 	.word	0x0800e744

0800bb48 <__swsetup_r>:
 800bb48:	4b32      	ldr	r3, [pc, #200]	; (800bc14 <__swsetup_r+0xcc>)
 800bb4a:	b570      	push	{r4, r5, r6, lr}
 800bb4c:	681d      	ldr	r5, [r3, #0]
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	b125      	cbz	r5, 800bb5e <__swsetup_r+0x16>
 800bb54:	69ab      	ldr	r3, [r5, #24]
 800bb56:	b913      	cbnz	r3, 800bb5e <__swsetup_r+0x16>
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f000 f953 	bl	800be04 <__sinit>
 800bb5e:	4b2e      	ldr	r3, [pc, #184]	; (800bc18 <__swsetup_r+0xd0>)
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d10f      	bne.n	800bb84 <__swsetup_r+0x3c>
 800bb64:	686c      	ldr	r4, [r5, #4]
 800bb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	0715      	lsls	r5, r2, #28
 800bb6e:	d42c      	bmi.n	800bbca <__swsetup_r+0x82>
 800bb70:	06d0      	lsls	r0, r2, #27
 800bb72:	d411      	bmi.n	800bb98 <__swsetup_r+0x50>
 800bb74:	2209      	movs	r2, #9
 800bb76:	6032      	str	r2, [r6, #0]
 800bb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb82:	e03e      	b.n	800bc02 <__swsetup_r+0xba>
 800bb84:	4b25      	ldr	r3, [pc, #148]	; (800bc1c <__swsetup_r+0xd4>)
 800bb86:	429c      	cmp	r4, r3
 800bb88:	d101      	bne.n	800bb8e <__swsetup_r+0x46>
 800bb8a:	68ac      	ldr	r4, [r5, #8]
 800bb8c:	e7eb      	b.n	800bb66 <__swsetup_r+0x1e>
 800bb8e:	4b24      	ldr	r3, [pc, #144]	; (800bc20 <__swsetup_r+0xd8>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	bf08      	it	eq
 800bb94:	68ec      	ldreq	r4, [r5, #12]
 800bb96:	e7e6      	b.n	800bb66 <__swsetup_r+0x1e>
 800bb98:	0751      	lsls	r1, r2, #29
 800bb9a:	d512      	bpl.n	800bbc2 <__swsetup_r+0x7a>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	b141      	cbz	r1, 800bbb2 <__swsetup_r+0x6a>
 800bba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba4:	4299      	cmp	r1, r3
 800bba6:	d002      	beq.n	800bbae <__swsetup_r+0x66>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fbed 	bl	800b388 <_free_r>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0308 	orr.w	r3, r3, #8
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	b94b      	cbnz	r3, 800bbe2 <__swsetup_r+0x9a>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd8:	d003      	beq.n	800bbe2 <__swsetup_r+0x9a>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f000 fa3b 	bl	800c058 <__smakebuf_r>
 800bbe2:	89a2      	ldrh	r2, [r4, #12]
 800bbe4:	f012 0301 	ands.w	r3, r2, #1
 800bbe8:	d00c      	beq.n	800bc04 <__swsetup_r+0xbc>
 800bbea:	2300      	movs	r3, #0
 800bbec:	60a3      	str	r3, [r4, #8]
 800bbee:	6963      	ldr	r3, [r4, #20]
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	61a3      	str	r3, [r4, #24]
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	b953      	cbnz	r3, 800bc0e <__swsetup_r+0xc6>
 800bbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bc00:	d1ba      	bne.n	800bb78 <__swsetup_r+0x30>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	0792      	lsls	r2, r2, #30
 800bc06:	bf58      	it	pl
 800bc08:	6963      	ldrpl	r3, [r4, #20]
 800bc0a:	60a3      	str	r3, [r4, #8]
 800bc0c:	e7f2      	b.n	800bbf4 <__swsetup_r+0xac>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e7f7      	b.n	800bc02 <__swsetup_r+0xba>
 800bc12:	bf00      	nop
 800bc14:	200000e0 	.word	0x200000e0
 800bc18:	0800e764 	.word	0x0800e764
 800bc1c:	0800e784 	.word	0x0800e784
 800bc20:	0800e744 	.word	0x0800e744

0800bc24 <__sflush_r>:
 800bc24:	898a      	ldrh	r2, [r1, #12]
 800bc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	0710      	lsls	r0, r2, #28
 800bc2e:	460c      	mov	r4, r1
 800bc30:	d458      	bmi.n	800bce4 <__sflush_r+0xc0>
 800bc32:	684b      	ldr	r3, [r1, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dc05      	bgt.n	800bc44 <__sflush_r+0x20>
 800bc38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dc02      	bgt.n	800bc44 <__sflush_r+0x20>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc46:	2e00      	cmp	r6, #0
 800bc48:	d0f9      	beq.n	800bc3e <__sflush_r+0x1a>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc50:	682f      	ldr	r7, [r5, #0]
 800bc52:	6a21      	ldr	r1, [r4, #32]
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	d032      	beq.n	800bcbe <__sflush_r+0x9a>
 800bc58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	075a      	lsls	r2, r3, #29
 800bc5e:	d505      	bpl.n	800bc6c <__sflush_r+0x48>
 800bc60:	6863      	ldr	r3, [r4, #4]
 800bc62:	1ac0      	subs	r0, r0, r3
 800bc64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc66:	b10b      	cbz	r3, 800bc6c <__sflush_r+0x48>
 800bc68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc6a:	1ac0      	subs	r0, r0, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4602      	mov	r2, r0
 800bc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc72:	6a21      	ldr	r1, [r4, #32]
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b0      	blx	r6
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	d106      	bne.n	800bc8c <__sflush_r+0x68>
 800bc7e:	6829      	ldr	r1, [r5, #0]
 800bc80:	291d      	cmp	r1, #29
 800bc82:	d848      	bhi.n	800bd16 <__sflush_r+0xf2>
 800bc84:	4a29      	ldr	r2, [pc, #164]	; (800bd2c <__sflush_r+0x108>)
 800bc86:	40ca      	lsrs	r2, r1
 800bc88:	07d6      	lsls	r6, r2, #31
 800bc8a:	d544      	bpl.n	800bd16 <__sflush_r+0xf2>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	6062      	str	r2, [r4, #4]
 800bc90:	04d9      	lsls	r1, r3, #19
 800bc92:	6922      	ldr	r2, [r4, #16]
 800bc94:	6022      	str	r2, [r4, #0]
 800bc96:	d504      	bpl.n	800bca2 <__sflush_r+0x7e>
 800bc98:	1c42      	adds	r2, r0, #1
 800bc9a:	d101      	bne.n	800bca0 <__sflush_r+0x7c>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b903      	cbnz	r3, 800bca2 <__sflush_r+0x7e>
 800bca0:	6560      	str	r0, [r4, #84]	; 0x54
 800bca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca4:	602f      	str	r7, [r5, #0]
 800bca6:	2900      	cmp	r1, #0
 800bca8:	d0c9      	beq.n	800bc3e <__sflush_r+0x1a>
 800bcaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcae:	4299      	cmp	r1, r3
 800bcb0:	d002      	beq.n	800bcb8 <__sflush_r+0x94>
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f7ff fb68 	bl	800b388 <_free_r>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	6360      	str	r0, [r4, #52]	; 0x34
 800bcbc:	e7c0      	b.n	800bc40 <__sflush_r+0x1c>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b0      	blx	r6
 800bcc4:	1c41      	adds	r1, r0, #1
 800bcc6:	d1c8      	bne.n	800bc5a <__sflush_r+0x36>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0c5      	beq.n	800bc5a <__sflush_r+0x36>
 800bcce:	2b1d      	cmp	r3, #29
 800bcd0:	d001      	beq.n	800bcd6 <__sflush_r+0xb2>
 800bcd2:	2b16      	cmp	r3, #22
 800bcd4:	d101      	bne.n	800bcda <__sflush_r+0xb6>
 800bcd6:	602f      	str	r7, [r5, #0]
 800bcd8:	e7b1      	b.n	800bc3e <__sflush_r+0x1a>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	e7ad      	b.n	800bc40 <__sflush_r+0x1c>
 800bce4:	690f      	ldr	r7, [r1, #16]
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	d0a9      	beq.n	800bc3e <__sflush_r+0x1a>
 800bcea:	0793      	lsls	r3, r2, #30
 800bcec:	680e      	ldr	r6, [r1, #0]
 800bcee:	bf08      	it	eq
 800bcf0:	694b      	ldreq	r3, [r1, #20]
 800bcf2:	600f      	str	r7, [r1, #0]
 800bcf4:	bf18      	it	ne
 800bcf6:	2300      	movne	r3, #0
 800bcf8:	eba6 0807 	sub.w	r8, r6, r7
 800bcfc:	608b      	str	r3, [r1, #8]
 800bcfe:	f1b8 0f00 	cmp.w	r8, #0
 800bd02:	dd9c      	ble.n	800bc3e <__sflush_r+0x1a>
 800bd04:	4643      	mov	r3, r8
 800bd06:	463a      	mov	r2, r7
 800bd08:	6a21      	ldr	r1, [r4, #32]
 800bd0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	47b0      	blx	r6
 800bd10:	2800      	cmp	r0, #0
 800bd12:	dc06      	bgt.n	800bd22 <__sflush_r+0xfe>
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	e78e      	b.n	800bc40 <__sflush_r+0x1c>
 800bd22:	4407      	add	r7, r0
 800bd24:	eba8 0800 	sub.w	r8, r8, r0
 800bd28:	e7e9      	b.n	800bcfe <__sflush_r+0xda>
 800bd2a:	bf00      	nop
 800bd2c:	20400001 	.word	0x20400001

0800bd30 <_fflush_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	4605      	mov	r5, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	b1db      	cbz	r3, 800bd72 <_fflush_r+0x42>
 800bd3a:	b118      	cbz	r0, 800bd44 <_fflush_r+0x14>
 800bd3c:	6983      	ldr	r3, [r0, #24]
 800bd3e:	b90b      	cbnz	r3, 800bd44 <_fflush_r+0x14>
 800bd40:	f000 f860 	bl	800be04 <__sinit>
 800bd44:	4b0c      	ldr	r3, [pc, #48]	; (800bd78 <_fflush_r+0x48>)
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d109      	bne.n	800bd5e <_fflush_r+0x2e>
 800bd4a:	686c      	ldr	r4, [r5, #4]
 800bd4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd50:	b17b      	cbz	r3, 800bd72 <_fflush_r+0x42>
 800bd52:	4621      	mov	r1, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd5a:	f7ff bf63 	b.w	800bc24 <__sflush_r>
 800bd5e:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <_fflush_r+0x4c>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d101      	bne.n	800bd68 <_fflush_r+0x38>
 800bd64:	68ac      	ldr	r4, [r5, #8]
 800bd66:	e7f1      	b.n	800bd4c <_fflush_r+0x1c>
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <_fflush_r+0x50>)
 800bd6a:	429c      	cmp	r4, r3
 800bd6c:	bf08      	it	eq
 800bd6e:	68ec      	ldreq	r4, [r5, #12]
 800bd70:	e7ec      	b.n	800bd4c <_fflush_r+0x1c>
 800bd72:	2000      	movs	r0, #0
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	bf00      	nop
 800bd78:	0800e764 	.word	0x0800e764
 800bd7c:	0800e784 	.word	0x0800e784
 800bd80:	0800e744 	.word	0x0800e744

0800bd84 <std>:
 800bd84:	2300      	movs	r3, #0
 800bd86:	b510      	push	{r4, lr}
 800bd88:	4604      	mov	r4, r0
 800bd8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd8e:	6083      	str	r3, [r0, #8]
 800bd90:	8181      	strh	r1, [r0, #12]
 800bd92:	6643      	str	r3, [r0, #100]	; 0x64
 800bd94:	81c2      	strh	r2, [r0, #14]
 800bd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd9a:	6183      	str	r3, [r0, #24]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	2208      	movs	r2, #8
 800bda0:	305c      	adds	r0, #92	; 0x5c
 800bda2:	f7ff fae8 	bl	800b376 <memset>
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <std+0x38>)
 800bda8:	6263      	str	r3, [r4, #36]	; 0x24
 800bdaa:	4b05      	ldr	r3, [pc, #20]	; (800bdc0 <std+0x3c>)
 800bdac:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdae:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <std+0x40>)
 800bdb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <std+0x44>)
 800bdb4:	6224      	str	r4, [r4, #32]
 800bdb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	bf00      	nop
 800bdbc:	0800c97d 	.word	0x0800c97d
 800bdc0:	0800c99f 	.word	0x0800c99f
 800bdc4:	0800c9d7 	.word	0x0800c9d7
 800bdc8:	0800c9fb 	.word	0x0800c9fb

0800bdcc <_cleanup_r>:
 800bdcc:	4901      	ldr	r1, [pc, #4]	; (800bdd4 <_cleanup_r+0x8>)
 800bdce:	f000 b901 	b.w	800bfd4 <_fwalk_reent>
 800bdd2:	bf00      	nop
 800bdd4:	0800bd31 	.word	0x0800bd31

0800bdd8 <__sfmoreglue>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	1e4a      	subs	r2, r1, #1
 800bddc:	2568      	movs	r5, #104	; 0x68
 800bdde:	4355      	muls	r5, r2
 800bde0:	460e      	mov	r6, r1
 800bde2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bde6:	f7ff fb1d 	bl	800b424 <_malloc_r>
 800bdea:	4604      	mov	r4, r0
 800bdec:	b140      	cbz	r0, 800be00 <__sfmoreglue+0x28>
 800bdee:	2100      	movs	r1, #0
 800bdf0:	e9c0 1600 	strd	r1, r6, [r0]
 800bdf4:	300c      	adds	r0, #12
 800bdf6:	60a0      	str	r0, [r4, #8]
 800bdf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdfc:	f7ff fabb 	bl	800b376 <memset>
 800be00:	4620      	mov	r0, r4
 800be02:	bd70      	pop	{r4, r5, r6, pc}

0800be04 <__sinit>:
 800be04:	6983      	ldr	r3, [r0, #24]
 800be06:	b510      	push	{r4, lr}
 800be08:	4604      	mov	r4, r0
 800be0a:	bb33      	cbnz	r3, 800be5a <__sinit+0x56>
 800be0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800be10:	6503      	str	r3, [r0, #80]	; 0x50
 800be12:	4b12      	ldr	r3, [pc, #72]	; (800be5c <__sinit+0x58>)
 800be14:	4a12      	ldr	r2, [pc, #72]	; (800be60 <__sinit+0x5c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6282      	str	r2, [r0, #40]	; 0x28
 800be1a:	4298      	cmp	r0, r3
 800be1c:	bf04      	itt	eq
 800be1e:	2301      	moveq	r3, #1
 800be20:	6183      	streq	r3, [r0, #24]
 800be22:	f000 f81f 	bl	800be64 <__sfp>
 800be26:	6060      	str	r0, [r4, #4]
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 f81b 	bl	800be64 <__sfp>
 800be2e:	60a0      	str	r0, [r4, #8]
 800be30:	4620      	mov	r0, r4
 800be32:	f000 f817 	bl	800be64 <__sfp>
 800be36:	2200      	movs	r2, #0
 800be38:	60e0      	str	r0, [r4, #12]
 800be3a:	2104      	movs	r1, #4
 800be3c:	6860      	ldr	r0, [r4, #4]
 800be3e:	f7ff ffa1 	bl	800bd84 <std>
 800be42:	2201      	movs	r2, #1
 800be44:	2109      	movs	r1, #9
 800be46:	68a0      	ldr	r0, [r4, #8]
 800be48:	f7ff ff9c 	bl	800bd84 <std>
 800be4c:	2202      	movs	r2, #2
 800be4e:	2112      	movs	r1, #18
 800be50:	68e0      	ldr	r0, [r4, #12]
 800be52:	f7ff ff97 	bl	800bd84 <std>
 800be56:	2301      	movs	r3, #1
 800be58:	61a3      	str	r3, [r4, #24]
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	0800e0a4 	.word	0x0800e0a4
 800be60:	0800bdcd 	.word	0x0800bdcd

0800be64 <__sfp>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	4b1b      	ldr	r3, [pc, #108]	; (800bed4 <__sfp+0x70>)
 800be68:	681e      	ldr	r6, [r3, #0]
 800be6a:	69b3      	ldr	r3, [r6, #24]
 800be6c:	4607      	mov	r7, r0
 800be6e:	b913      	cbnz	r3, 800be76 <__sfp+0x12>
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ffc7 	bl	800be04 <__sinit>
 800be76:	3648      	adds	r6, #72	; 0x48
 800be78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	d503      	bpl.n	800be88 <__sfp+0x24>
 800be80:	6833      	ldr	r3, [r6, #0]
 800be82:	b133      	cbz	r3, 800be92 <__sfp+0x2e>
 800be84:	6836      	ldr	r6, [r6, #0]
 800be86:	e7f7      	b.n	800be78 <__sfp+0x14>
 800be88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be8c:	b16d      	cbz	r5, 800beaa <__sfp+0x46>
 800be8e:	3468      	adds	r4, #104	; 0x68
 800be90:	e7f4      	b.n	800be7c <__sfp+0x18>
 800be92:	2104      	movs	r1, #4
 800be94:	4638      	mov	r0, r7
 800be96:	f7ff ff9f 	bl	800bdd8 <__sfmoreglue>
 800be9a:	6030      	str	r0, [r6, #0]
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d1f1      	bne.n	800be84 <__sfp+0x20>
 800bea0:	230c      	movs	r3, #12
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	4604      	mov	r4, r0
 800bea6:	4620      	mov	r0, r4
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beaa:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <__sfp+0x74>)
 800beac:	6665      	str	r5, [r4, #100]	; 0x64
 800beae:	e9c4 5500 	strd	r5, r5, [r4]
 800beb2:	60a5      	str	r5, [r4, #8]
 800beb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800beb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bebc:	2208      	movs	r2, #8
 800bebe:	4629      	mov	r1, r5
 800bec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bec4:	f7ff fa57 	bl	800b376 <memset>
 800bec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800becc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bed0:	e7e9      	b.n	800bea6 <__sfp+0x42>
 800bed2:	bf00      	nop
 800bed4:	0800e0a4 	.word	0x0800e0a4
 800bed8:	ffff0001 	.word	0xffff0001

0800bedc <_fputc_r>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	460e      	mov	r6, r1
 800bee0:	4614      	mov	r4, r2
 800bee2:	4605      	mov	r5, r0
 800bee4:	b118      	cbz	r0, 800beee <_fputc_r+0x12>
 800bee6:	6983      	ldr	r3, [r0, #24]
 800bee8:	b90b      	cbnz	r3, 800beee <_fputc_r+0x12>
 800beea:	f7ff ff8b 	bl	800be04 <__sinit>
 800beee:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <_fputc_r+0x3c>)
 800bef0:	429c      	cmp	r4, r3
 800bef2:	d107      	bne.n	800bf04 <_fputc_r+0x28>
 800bef4:	686c      	ldr	r4, [r5, #4]
 800bef6:	4622      	mov	r2, r4
 800bef8:	4631      	mov	r1, r6
 800befa:	4628      	mov	r0, r5
 800befc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf00:	f000 bd06 	b.w	800c910 <_putc_r>
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <_fputc_r+0x40>)
 800bf06:	429c      	cmp	r4, r3
 800bf08:	d101      	bne.n	800bf0e <_fputc_r+0x32>
 800bf0a:	68ac      	ldr	r4, [r5, #8]
 800bf0c:	e7f3      	b.n	800bef6 <_fputc_r+0x1a>
 800bf0e:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <_fputc_r+0x44>)
 800bf10:	429c      	cmp	r4, r3
 800bf12:	bf08      	it	eq
 800bf14:	68ec      	ldreq	r4, [r5, #12]
 800bf16:	e7ee      	b.n	800bef6 <_fputc_r+0x1a>
 800bf18:	0800e764 	.word	0x0800e764
 800bf1c:	0800e784 	.word	0x0800e784
 800bf20:	0800e744 	.word	0x0800e744

0800bf24 <fputc>:
 800bf24:	4b02      	ldr	r3, [pc, #8]	; (800bf30 <fputc+0xc>)
 800bf26:	460a      	mov	r2, r1
 800bf28:	4601      	mov	r1, r0
 800bf2a:	6818      	ldr	r0, [r3, #0]
 800bf2c:	f7ff bfd6 	b.w	800bedc <_fputc_r>
 800bf30:	200000e0 	.word	0x200000e0

0800bf34 <_fputs_r>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	460e      	mov	r6, r1
 800bf38:	4614      	mov	r4, r2
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	b118      	cbz	r0, 800bf46 <_fputs_r+0x12>
 800bf3e:	6983      	ldr	r3, [r0, #24]
 800bf40:	b90b      	cbnz	r3, 800bf46 <_fputs_r+0x12>
 800bf42:	f7ff ff5f 	bl	800be04 <__sinit>
 800bf46:	4b1c      	ldr	r3, [pc, #112]	; (800bfb8 <_fputs_r+0x84>)
 800bf48:	429c      	cmp	r4, r3
 800bf4a:	d10b      	bne.n	800bf64 <_fputs_r+0x30>
 800bf4c:	686c      	ldr	r4, [r5, #4]
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	071b      	lsls	r3, r3, #28
 800bf52:	d511      	bpl.n	800bf78 <_fputs_r+0x44>
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b17b      	cbz	r3, 800bf78 <_fputs_r+0x44>
 800bf58:	3e01      	subs	r6, #1
 800bf5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf5e:	b9a1      	cbnz	r1, 800bf8a <_fputs_r+0x56>
 800bf60:	4608      	mov	r0, r1
 800bf62:	e011      	b.n	800bf88 <_fputs_r+0x54>
 800bf64:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <_fputs_r+0x88>)
 800bf66:	429c      	cmp	r4, r3
 800bf68:	d101      	bne.n	800bf6e <_fputs_r+0x3a>
 800bf6a:	68ac      	ldr	r4, [r5, #8]
 800bf6c:	e7ef      	b.n	800bf4e <_fputs_r+0x1a>
 800bf6e:	4b14      	ldr	r3, [pc, #80]	; (800bfc0 <_fputs_r+0x8c>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	bf08      	it	eq
 800bf74:	68ec      	ldreq	r4, [r5, #12]
 800bf76:	e7ea      	b.n	800bf4e <_fputs_r+0x1a>
 800bf78:	4621      	mov	r1, r4
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7ff fde4 	bl	800bb48 <__swsetup_r>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d0e9      	beq.n	800bf58 <_fputs_r+0x24>
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	60a3      	str	r3, [r4, #8]
 800bf92:	da04      	bge.n	800bf9e <_fputs_r+0x6a>
 800bf94:	69a2      	ldr	r2, [r4, #24]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	db06      	blt.n	800bfa8 <_fputs_r+0x74>
 800bf9a:	290a      	cmp	r1, #10
 800bf9c:	d004      	beq.n	800bfa8 <_fputs_r+0x74>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	1c5a      	adds	r2, r3, #1
 800bfa2:	6022      	str	r2, [r4, #0]
 800bfa4:	7019      	strb	r1, [r3, #0]
 800bfa6:	e7d8      	b.n	800bf5a <_fputs_r+0x26>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7ff fd7a 	bl	800baa4 <__swbuf_r>
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d1d2      	bne.n	800bf5a <_fputs_r+0x26>
 800bfb4:	e7e6      	b.n	800bf84 <_fputs_r+0x50>
 800bfb6:	bf00      	nop
 800bfb8:	0800e764 	.word	0x0800e764
 800bfbc:	0800e784 	.word	0x0800e784
 800bfc0:	0800e744 	.word	0x0800e744

0800bfc4 <fputs>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <fputs+0xc>)
 800bfc6:	460a      	mov	r2, r1
 800bfc8:	4601      	mov	r1, r0
 800bfca:	6818      	ldr	r0, [r3, #0]
 800bfcc:	f7ff bfb2 	b.w	800bf34 <_fputs_r>
 800bfd0:	200000e0 	.word	0x200000e0

0800bfd4 <_fwalk_reent>:
 800bfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4689      	mov	r9, r1
 800bfdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfe0:	2600      	movs	r6, #0
 800bfe2:	b914      	cbnz	r4, 800bfea <_fwalk_reent+0x16>
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bfee:	3f01      	subs	r7, #1
 800bff0:	d501      	bpl.n	800bff6 <_fwalk_reent+0x22>
 800bff2:	6824      	ldr	r4, [r4, #0]
 800bff4:	e7f5      	b.n	800bfe2 <_fwalk_reent+0xe>
 800bff6:	89ab      	ldrh	r3, [r5, #12]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d907      	bls.n	800c00c <_fwalk_reent+0x38>
 800bffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c000:	3301      	adds	r3, #1
 800c002:	d003      	beq.n	800c00c <_fwalk_reent+0x38>
 800c004:	4629      	mov	r1, r5
 800c006:	4640      	mov	r0, r8
 800c008:	47c8      	blx	r9
 800c00a:	4306      	orrs	r6, r0
 800c00c:	3568      	adds	r5, #104	; 0x68
 800c00e:	e7ee      	b.n	800bfee <_fwalk_reent+0x1a>

0800c010 <__swhatbuf_r>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	460e      	mov	r6, r1
 800c014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c018:	2900      	cmp	r1, #0
 800c01a:	b096      	sub	sp, #88	; 0x58
 800c01c:	4614      	mov	r4, r2
 800c01e:	461d      	mov	r5, r3
 800c020:	da07      	bge.n	800c032 <__swhatbuf_r+0x22>
 800c022:	2300      	movs	r3, #0
 800c024:	602b      	str	r3, [r5, #0]
 800c026:	89b3      	ldrh	r3, [r6, #12]
 800c028:	061a      	lsls	r2, r3, #24
 800c02a:	d410      	bmi.n	800c04e <__swhatbuf_r+0x3e>
 800c02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c030:	e00e      	b.n	800c050 <__swhatbuf_r+0x40>
 800c032:	466a      	mov	r2, sp
 800c034:	f000 fd08 	bl	800ca48 <_fstat_r>
 800c038:	2800      	cmp	r0, #0
 800c03a:	dbf2      	blt.n	800c022 <__swhatbuf_r+0x12>
 800c03c:	9a01      	ldr	r2, [sp, #4]
 800c03e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c046:	425a      	negs	r2, r3
 800c048:	415a      	adcs	r2, r3
 800c04a:	602a      	str	r2, [r5, #0]
 800c04c:	e7ee      	b.n	800c02c <__swhatbuf_r+0x1c>
 800c04e:	2340      	movs	r3, #64	; 0x40
 800c050:	2000      	movs	r0, #0
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	b016      	add	sp, #88	; 0x58
 800c056:	bd70      	pop	{r4, r5, r6, pc}

0800c058 <__smakebuf_r>:
 800c058:	898b      	ldrh	r3, [r1, #12]
 800c05a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c05c:	079d      	lsls	r5, r3, #30
 800c05e:	4606      	mov	r6, r0
 800c060:	460c      	mov	r4, r1
 800c062:	d507      	bpl.n	800c074 <__smakebuf_r+0x1c>
 800c064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	2301      	movs	r3, #1
 800c06e:	6163      	str	r3, [r4, #20]
 800c070:	b002      	add	sp, #8
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	ab01      	add	r3, sp, #4
 800c076:	466a      	mov	r2, sp
 800c078:	f7ff ffca 	bl	800c010 <__swhatbuf_r>
 800c07c:	9900      	ldr	r1, [sp, #0]
 800c07e:	4605      	mov	r5, r0
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff f9cf 	bl	800b424 <_malloc_r>
 800c086:	b948      	cbnz	r0, 800c09c <__smakebuf_r+0x44>
 800c088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c08c:	059a      	lsls	r2, r3, #22
 800c08e:	d4ef      	bmi.n	800c070 <__smakebuf_r+0x18>
 800c090:	f023 0303 	bic.w	r3, r3, #3
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	e7e3      	b.n	800c064 <__smakebuf_r+0xc>
 800c09c:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <__smakebuf_r+0x7c>)
 800c09e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	6020      	str	r0, [r4, #0]
 800c0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a8:	81a3      	strh	r3, [r4, #12]
 800c0aa:	9b00      	ldr	r3, [sp, #0]
 800c0ac:	6163      	str	r3, [r4, #20]
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	6120      	str	r0, [r4, #16]
 800c0b2:	b15b      	cbz	r3, 800c0cc <__smakebuf_r+0x74>
 800c0b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f000 fcd7 	bl	800ca6c <_isatty_r>
 800c0be:	b128      	cbz	r0, 800c0cc <__smakebuf_r+0x74>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	431d      	orrs	r5, r3
 800c0d0:	81a5      	strh	r5, [r4, #12]
 800c0d2:	e7cd      	b.n	800c070 <__smakebuf_r+0x18>
 800c0d4:	0800bdcd 	.word	0x0800bdcd

0800c0d8 <__malloc_lock>:
 800c0d8:	4770      	bx	lr

0800c0da <__malloc_unlock>:
 800c0da:	4770      	bx	lr

0800c0dc <__ssputs_r>:
 800c0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e0:	688e      	ldr	r6, [r1, #8]
 800c0e2:	429e      	cmp	r6, r3
 800c0e4:	4682      	mov	sl, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	4690      	mov	r8, r2
 800c0ea:	4699      	mov	r9, r3
 800c0ec:	d837      	bhi.n	800c15e <__ssputs_r+0x82>
 800c0ee:	898a      	ldrh	r2, [r1, #12]
 800c0f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0f4:	d031      	beq.n	800c15a <__ssputs_r+0x7e>
 800c0f6:	6825      	ldr	r5, [r4, #0]
 800c0f8:	6909      	ldr	r1, [r1, #16]
 800c0fa:	1a6f      	subs	r7, r5, r1
 800c0fc:	6965      	ldr	r5, [r4, #20]
 800c0fe:	2302      	movs	r3, #2
 800c100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c104:	fb95 f5f3 	sdiv	r5, r5, r3
 800c108:	f109 0301 	add.w	r3, r9, #1
 800c10c:	443b      	add	r3, r7
 800c10e:	429d      	cmp	r5, r3
 800c110:	bf38      	it	cc
 800c112:	461d      	movcc	r5, r3
 800c114:	0553      	lsls	r3, r2, #21
 800c116:	d530      	bpl.n	800c17a <__ssputs_r+0x9e>
 800c118:	4629      	mov	r1, r5
 800c11a:	f7ff f983 	bl	800b424 <_malloc_r>
 800c11e:	4606      	mov	r6, r0
 800c120:	b950      	cbnz	r0, 800c138 <__ssputs_r+0x5c>
 800c122:	230c      	movs	r3, #12
 800c124:	f8ca 3000 	str.w	r3, [sl]
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	f04f 30ff 	mov.w	r0, #4294967295
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c138:	463a      	mov	r2, r7
 800c13a:	6921      	ldr	r1, [r4, #16]
 800c13c:	f7ff f910 	bl	800b360 <memcpy>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	6126      	str	r6, [r4, #16]
 800c14e:	6165      	str	r5, [r4, #20]
 800c150:	443e      	add	r6, r7
 800c152:	1bed      	subs	r5, r5, r7
 800c154:	6026      	str	r6, [r4, #0]
 800c156:	60a5      	str	r5, [r4, #8]
 800c158:	464e      	mov	r6, r9
 800c15a:	454e      	cmp	r6, r9
 800c15c:	d900      	bls.n	800c160 <__ssputs_r+0x84>
 800c15e:	464e      	mov	r6, r9
 800c160:	4632      	mov	r2, r6
 800c162:	4641      	mov	r1, r8
 800c164:	6820      	ldr	r0, [r4, #0]
 800c166:	f000 fca3 	bl	800cab0 <memmove>
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	1b9b      	subs	r3, r3, r6
 800c16e:	60a3      	str	r3, [r4, #8]
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	441e      	add	r6, r3
 800c174:	6026      	str	r6, [r4, #0]
 800c176:	2000      	movs	r0, #0
 800c178:	e7dc      	b.n	800c134 <__ssputs_r+0x58>
 800c17a:	462a      	mov	r2, r5
 800c17c:	f000 fcb1 	bl	800cae2 <_realloc_r>
 800c180:	4606      	mov	r6, r0
 800c182:	2800      	cmp	r0, #0
 800c184:	d1e2      	bne.n	800c14c <__ssputs_r+0x70>
 800c186:	6921      	ldr	r1, [r4, #16]
 800c188:	4650      	mov	r0, sl
 800c18a:	f7ff f8fd 	bl	800b388 <_free_r>
 800c18e:	e7c8      	b.n	800c122 <__ssputs_r+0x46>

0800c190 <_svfiprintf_r>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	461d      	mov	r5, r3
 800c196:	898b      	ldrh	r3, [r1, #12]
 800c198:	061f      	lsls	r7, r3, #24
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	4680      	mov	r8, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	4616      	mov	r6, r2
 800c1a2:	d50f      	bpl.n	800c1c4 <_svfiprintf_r+0x34>
 800c1a4:	690b      	ldr	r3, [r1, #16]
 800c1a6:	b96b      	cbnz	r3, 800c1c4 <_svfiprintf_r+0x34>
 800c1a8:	2140      	movs	r1, #64	; 0x40
 800c1aa:	f7ff f93b 	bl	800b424 <_malloc_r>
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	6120      	str	r0, [r4, #16]
 800c1b2:	b928      	cbnz	r0, 800c1c0 <_svfiprintf_r+0x30>
 800c1b4:	230c      	movs	r3, #12
 800c1b6:	f8c8 3000 	str.w	r3, [r8]
 800c1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c1be:	e0c8      	b.n	800c352 <_svfiprintf_r+0x1c2>
 800c1c0:	2340      	movs	r3, #64	; 0x40
 800c1c2:	6163      	str	r3, [r4, #20]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c8:	2320      	movs	r3, #32
 800c1ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ce:	2330      	movs	r3, #48	; 0x30
 800c1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d4:	9503      	str	r5, [sp, #12]
 800c1d6:	f04f 0b01 	mov.w	fp, #1
 800c1da:	4637      	mov	r7, r6
 800c1dc:	463d      	mov	r5, r7
 800c1de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1e2:	b10b      	cbz	r3, 800c1e8 <_svfiprintf_r+0x58>
 800c1e4:	2b25      	cmp	r3, #37	; 0x25
 800c1e6:	d13e      	bne.n	800c266 <_svfiprintf_r+0xd6>
 800c1e8:	ebb7 0a06 	subs.w	sl, r7, r6
 800c1ec:	d00b      	beq.n	800c206 <_svfiprintf_r+0x76>
 800c1ee:	4653      	mov	r3, sl
 800c1f0:	4632      	mov	r2, r6
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	f7ff ff71 	bl	800c0dc <__ssputs_r>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f000 80a4 	beq.w	800c348 <_svfiprintf_r+0x1b8>
 800c200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c202:	4453      	add	r3, sl
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	783b      	ldrb	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 809d 	beq.w	800c348 <_svfiprintf_r+0x1b8>
 800c20e:	2300      	movs	r3, #0
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	9307      	str	r3, [sp, #28]
 800c21c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c220:	931a      	str	r3, [sp, #104]	; 0x68
 800c222:	462f      	mov	r7, r5
 800c224:	2205      	movs	r2, #5
 800c226:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c22a:	4850      	ldr	r0, [pc, #320]	; (800c36c <_svfiprintf_r+0x1dc>)
 800c22c:	f7f3 ffe8 	bl	8000200 <memchr>
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	b9d0      	cbnz	r0, 800c26a <_svfiprintf_r+0xda>
 800c234:	06d9      	lsls	r1, r3, #27
 800c236:	bf44      	itt	mi
 800c238:	2220      	movmi	r2, #32
 800c23a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c23e:	071a      	lsls	r2, r3, #28
 800c240:	bf44      	itt	mi
 800c242:	222b      	movmi	r2, #43	; 0x2b
 800c244:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c248:	782a      	ldrb	r2, [r5, #0]
 800c24a:	2a2a      	cmp	r2, #42	; 0x2a
 800c24c:	d015      	beq.n	800c27a <_svfiprintf_r+0xea>
 800c24e:	9a07      	ldr	r2, [sp, #28]
 800c250:	462f      	mov	r7, r5
 800c252:	2000      	movs	r0, #0
 800c254:	250a      	movs	r5, #10
 800c256:	4639      	mov	r1, r7
 800c258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25c:	3b30      	subs	r3, #48	; 0x30
 800c25e:	2b09      	cmp	r3, #9
 800c260:	d94d      	bls.n	800c2fe <_svfiprintf_r+0x16e>
 800c262:	b1b8      	cbz	r0, 800c294 <_svfiprintf_r+0x104>
 800c264:	e00f      	b.n	800c286 <_svfiprintf_r+0xf6>
 800c266:	462f      	mov	r7, r5
 800c268:	e7b8      	b.n	800c1dc <_svfiprintf_r+0x4c>
 800c26a:	4a40      	ldr	r2, [pc, #256]	; (800c36c <_svfiprintf_r+0x1dc>)
 800c26c:	1a80      	subs	r0, r0, r2
 800c26e:	fa0b f000 	lsl.w	r0, fp, r0
 800c272:	4318      	orrs	r0, r3
 800c274:	9004      	str	r0, [sp, #16]
 800c276:	463d      	mov	r5, r7
 800c278:	e7d3      	b.n	800c222 <_svfiprintf_r+0x92>
 800c27a:	9a03      	ldr	r2, [sp, #12]
 800c27c:	1d11      	adds	r1, r2, #4
 800c27e:	6812      	ldr	r2, [r2, #0]
 800c280:	9103      	str	r1, [sp, #12]
 800c282:	2a00      	cmp	r2, #0
 800c284:	db01      	blt.n	800c28a <_svfiprintf_r+0xfa>
 800c286:	9207      	str	r2, [sp, #28]
 800c288:	e004      	b.n	800c294 <_svfiprintf_r+0x104>
 800c28a:	4252      	negs	r2, r2
 800c28c:	f043 0302 	orr.w	r3, r3, #2
 800c290:	9207      	str	r2, [sp, #28]
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	783b      	ldrb	r3, [r7, #0]
 800c296:	2b2e      	cmp	r3, #46	; 0x2e
 800c298:	d10c      	bne.n	800c2b4 <_svfiprintf_r+0x124>
 800c29a:	787b      	ldrb	r3, [r7, #1]
 800c29c:	2b2a      	cmp	r3, #42	; 0x2a
 800c29e:	d133      	bne.n	800c308 <_svfiprintf_r+0x178>
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	1d1a      	adds	r2, r3, #4
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	9203      	str	r2, [sp, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bfb8      	it	lt
 800c2ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2b0:	3702      	adds	r7, #2
 800c2b2:	9305      	str	r3, [sp, #20]
 800c2b4:	4d2e      	ldr	r5, [pc, #184]	; (800c370 <_svfiprintf_r+0x1e0>)
 800c2b6:	7839      	ldrb	r1, [r7, #0]
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7f3 ffa0 	bl	8000200 <memchr>
 800c2c0:	b138      	cbz	r0, 800c2d2 <_svfiprintf_r+0x142>
 800c2c2:	2340      	movs	r3, #64	; 0x40
 800c2c4:	1b40      	subs	r0, r0, r5
 800c2c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	3701      	adds	r7, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	7839      	ldrb	r1, [r7, #0]
 800c2d4:	4827      	ldr	r0, [pc, #156]	; (800c374 <_svfiprintf_r+0x1e4>)
 800c2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2da:	2206      	movs	r2, #6
 800c2dc:	1c7e      	adds	r6, r7, #1
 800c2de:	f7f3 ff8f 	bl	8000200 <memchr>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d038      	beq.n	800c358 <_svfiprintf_r+0x1c8>
 800c2e6:	4b24      	ldr	r3, [pc, #144]	; (800c378 <_svfiprintf_r+0x1e8>)
 800c2e8:	bb13      	cbnz	r3, 800c330 <_svfiprintf_r+0x1a0>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	3307      	adds	r3, #7
 800c2ee:	f023 0307 	bic.w	r3, r3, #7
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	9303      	str	r3, [sp, #12]
 800c2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f8:	444b      	add	r3, r9
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	e76d      	b.n	800c1da <_svfiprintf_r+0x4a>
 800c2fe:	fb05 3202 	mla	r2, r5, r2, r3
 800c302:	2001      	movs	r0, #1
 800c304:	460f      	mov	r7, r1
 800c306:	e7a6      	b.n	800c256 <_svfiprintf_r+0xc6>
 800c308:	2300      	movs	r3, #0
 800c30a:	3701      	adds	r7, #1
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	4619      	mov	r1, r3
 800c310:	250a      	movs	r5, #10
 800c312:	4638      	mov	r0, r7
 800c314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c318:	3a30      	subs	r2, #48	; 0x30
 800c31a:	2a09      	cmp	r2, #9
 800c31c:	d903      	bls.n	800c326 <_svfiprintf_r+0x196>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0c8      	beq.n	800c2b4 <_svfiprintf_r+0x124>
 800c322:	9105      	str	r1, [sp, #20]
 800c324:	e7c6      	b.n	800c2b4 <_svfiprintf_r+0x124>
 800c326:	fb05 2101 	mla	r1, r5, r1, r2
 800c32a:	2301      	movs	r3, #1
 800c32c:	4607      	mov	r7, r0
 800c32e:	e7f0      	b.n	800c312 <_svfiprintf_r+0x182>
 800c330:	ab03      	add	r3, sp, #12
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	4622      	mov	r2, r4
 800c336:	4b11      	ldr	r3, [pc, #68]	; (800c37c <_svfiprintf_r+0x1ec>)
 800c338:	a904      	add	r1, sp, #16
 800c33a:	4640      	mov	r0, r8
 800c33c:	f3af 8000 	nop.w
 800c340:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c344:	4681      	mov	r9, r0
 800c346:	d1d6      	bne.n	800c2f6 <_svfiprintf_r+0x166>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	065b      	lsls	r3, r3, #25
 800c34c:	f53f af35 	bmi.w	800c1ba <_svfiprintf_r+0x2a>
 800c350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c352:	b01d      	add	sp, #116	; 0x74
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	ab03      	add	r3, sp, #12
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	4622      	mov	r2, r4
 800c35e:	4b07      	ldr	r3, [pc, #28]	; (800c37c <_svfiprintf_r+0x1ec>)
 800c360:	a904      	add	r1, sp, #16
 800c362:	4640      	mov	r0, r8
 800c364:	f000 f9c2 	bl	800c6ec <_printf_i>
 800c368:	e7ea      	b.n	800c340 <_svfiprintf_r+0x1b0>
 800c36a:	bf00      	nop
 800c36c:	0800e7a4 	.word	0x0800e7a4
 800c370:	0800e7aa 	.word	0x0800e7aa
 800c374:	0800e7ae 	.word	0x0800e7ae
 800c378:	00000000 	.word	0x00000000
 800c37c:	0800c0dd 	.word	0x0800c0dd

0800c380 <__sfputc_r>:
 800c380:	6893      	ldr	r3, [r2, #8]
 800c382:	3b01      	subs	r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	b410      	push	{r4}
 800c388:	6093      	str	r3, [r2, #8]
 800c38a:	da08      	bge.n	800c39e <__sfputc_r+0x1e>
 800c38c:	6994      	ldr	r4, [r2, #24]
 800c38e:	42a3      	cmp	r3, r4
 800c390:	db01      	blt.n	800c396 <__sfputc_r+0x16>
 800c392:	290a      	cmp	r1, #10
 800c394:	d103      	bne.n	800c39e <__sfputc_r+0x1e>
 800c396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c39a:	f7ff bb83 	b.w	800baa4 <__swbuf_r>
 800c39e:	6813      	ldr	r3, [r2, #0]
 800c3a0:	1c58      	adds	r0, r3, #1
 800c3a2:	6010      	str	r0, [r2, #0]
 800c3a4:	7019      	strb	r1, [r3, #0]
 800c3a6:	4608      	mov	r0, r1
 800c3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <__sfputs_r>:
 800c3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	460f      	mov	r7, r1
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	18d5      	adds	r5, r2, r3
 800c3b8:	42ac      	cmp	r4, r5
 800c3ba:	d101      	bne.n	800c3c0 <__sfputs_r+0x12>
 800c3bc:	2000      	movs	r0, #0
 800c3be:	e007      	b.n	800c3d0 <__sfputs_r+0x22>
 800c3c0:	463a      	mov	r2, r7
 800c3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f7ff ffda 	bl	800c380 <__sfputc_r>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d1f3      	bne.n	800c3b8 <__sfputs_r+0xa>
 800c3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3d4 <_vfiprintf_r>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	460c      	mov	r4, r1
 800c3da:	b09d      	sub	sp, #116	; 0x74
 800c3dc:	4617      	mov	r7, r2
 800c3de:	461d      	mov	r5, r3
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	b118      	cbz	r0, 800c3ec <_vfiprintf_r+0x18>
 800c3e4:	6983      	ldr	r3, [r0, #24]
 800c3e6:	b90b      	cbnz	r3, 800c3ec <_vfiprintf_r+0x18>
 800c3e8:	f7ff fd0c 	bl	800be04 <__sinit>
 800c3ec:	4b7c      	ldr	r3, [pc, #496]	; (800c5e0 <_vfiprintf_r+0x20c>)
 800c3ee:	429c      	cmp	r4, r3
 800c3f0:	d158      	bne.n	800c4a4 <_vfiprintf_r+0xd0>
 800c3f2:	6874      	ldr	r4, [r6, #4]
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	0718      	lsls	r0, r3, #28
 800c3f8:	d55e      	bpl.n	800c4b8 <_vfiprintf_r+0xe4>
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d05b      	beq.n	800c4b8 <_vfiprintf_r+0xe4>
 800c400:	2300      	movs	r3, #0
 800c402:	9309      	str	r3, [sp, #36]	; 0x24
 800c404:	2320      	movs	r3, #32
 800c406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c40a:	2330      	movs	r3, #48	; 0x30
 800c40c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c410:	9503      	str	r5, [sp, #12]
 800c412:	f04f 0b01 	mov.w	fp, #1
 800c416:	46b8      	mov	r8, r7
 800c418:	4645      	mov	r5, r8
 800c41a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c41e:	b10b      	cbz	r3, 800c424 <_vfiprintf_r+0x50>
 800c420:	2b25      	cmp	r3, #37	; 0x25
 800c422:	d154      	bne.n	800c4ce <_vfiprintf_r+0xfa>
 800c424:	ebb8 0a07 	subs.w	sl, r8, r7
 800c428:	d00b      	beq.n	800c442 <_vfiprintf_r+0x6e>
 800c42a:	4653      	mov	r3, sl
 800c42c:	463a      	mov	r2, r7
 800c42e:	4621      	mov	r1, r4
 800c430:	4630      	mov	r0, r6
 800c432:	f7ff ffbc 	bl	800c3ae <__sfputs_r>
 800c436:	3001      	adds	r0, #1
 800c438:	f000 80c2 	beq.w	800c5c0 <_vfiprintf_r+0x1ec>
 800c43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43e:	4453      	add	r3, sl
 800c440:	9309      	str	r3, [sp, #36]	; 0x24
 800c442:	f898 3000 	ldrb.w	r3, [r8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 80ba 	beq.w	800c5c0 <_vfiprintf_r+0x1ec>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295
 800c452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	9307      	str	r3, [sp, #28]
 800c45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c45e:	931a      	str	r3, [sp, #104]	; 0x68
 800c460:	46a8      	mov	r8, r5
 800c462:	2205      	movs	r2, #5
 800c464:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c468:	485e      	ldr	r0, [pc, #376]	; (800c5e4 <_vfiprintf_r+0x210>)
 800c46a:	f7f3 fec9 	bl	8000200 <memchr>
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	bb78      	cbnz	r0, 800c4d2 <_vfiprintf_r+0xfe>
 800c472:	06d9      	lsls	r1, r3, #27
 800c474:	bf44      	itt	mi
 800c476:	2220      	movmi	r2, #32
 800c478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c47c:	071a      	lsls	r2, r3, #28
 800c47e:	bf44      	itt	mi
 800c480:	222b      	movmi	r2, #43	; 0x2b
 800c482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c486:	782a      	ldrb	r2, [r5, #0]
 800c488:	2a2a      	cmp	r2, #42	; 0x2a
 800c48a:	d02a      	beq.n	800c4e2 <_vfiprintf_r+0x10e>
 800c48c:	9a07      	ldr	r2, [sp, #28]
 800c48e:	46a8      	mov	r8, r5
 800c490:	2000      	movs	r0, #0
 800c492:	250a      	movs	r5, #10
 800c494:	4641      	mov	r1, r8
 800c496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c49a:	3b30      	subs	r3, #48	; 0x30
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d969      	bls.n	800c574 <_vfiprintf_r+0x1a0>
 800c4a0:	b360      	cbz	r0, 800c4fc <_vfiprintf_r+0x128>
 800c4a2:	e024      	b.n	800c4ee <_vfiprintf_r+0x11a>
 800c4a4:	4b50      	ldr	r3, [pc, #320]	; (800c5e8 <_vfiprintf_r+0x214>)
 800c4a6:	429c      	cmp	r4, r3
 800c4a8:	d101      	bne.n	800c4ae <_vfiprintf_r+0xda>
 800c4aa:	68b4      	ldr	r4, [r6, #8]
 800c4ac:	e7a2      	b.n	800c3f4 <_vfiprintf_r+0x20>
 800c4ae:	4b4f      	ldr	r3, [pc, #316]	; (800c5ec <_vfiprintf_r+0x218>)
 800c4b0:	429c      	cmp	r4, r3
 800c4b2:	bf08      	it	eq
 800c4b4:	68f4      	ldreq	r4, [r6, #12]
 800c4b6:	e79d      	b.n	800c3f4 <_vfiprintf_r+0x20>
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff fb44 	bl	800bb48 <__swsetup_r>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d09d      	beq.n	800c400 <_vfiprintf_r+0x2c>
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	b01d      	add	sp, #116	; 0x74
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	46a8      	mov	r8, r5
 800c4d0:	e7a2      	b.n	800c418 <_vfiprintf_r+0x44>
 800c4d2:	4a44      	ldr	r2, [pc, #272]	; (800c5e4 <_vfiprintf_r+0x210>)
 800c4d4:	1a80      	subs	r0, r0, r2
 800c4d6:	fa0b f000 	lsl.w	r0, fp, r0
 800c4da:	4318      	orrs	r0, r3
 800c4dc:	9004      	str	r0, [sp, #16]
 800c4de:	4645      	mov	r5, r8
 800c4e0:	e7be      	b.n	800c460 <_vfiprintf_r+0x8c>
 800c4e2:	9a03      	ldr	r2, [sp, #12]
 800c4e4:	1d11      	adds	r1, r2, #4
 800c4e6:	6812      	ldr	r2, [r2, #0]
 800c4e8:	9103      	str	r1, [sp, #12]
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	db01      	blt.n	800c4f2 <_vfiprintf_r+0x11e>
 800c4ee:	9207      	str	r2, [sp, #28]
 800c4f0:	e004      	b.n	800c4fc <_vfiprintf_r+0x128>
 800c4f2:	4252      	negs	r2, r2
 800c4f4:	f043 0302 	orr.w	r3, r3, #2
 800c4f8:	9207      	str	r2, [sp, #28]
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	f898 3000 	ldrb.w	r3, [r8]
 800c500:	2b2e      	cmp	r3, #46	; 0x2e
 800c502:	d10e      	bne.n	800c522 <_vfiprintf_r+0x14e>
 800c504:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c508:	2b2a      	cmp	r3, #42	; 0x2a
 800c50a:	d138      	bne.n	800c57e <_vfiprintf_r+0x1aa>
 800c50c:	9b03      	ldr	r3, [sp, #12]
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	9203      	str	r2, [sp, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfb8      	it	lt
 800c518:	f04f 33ff 	movlt.w	r3, #4294967295
 800c51c:	f108 0802 	add.w	r8, r8, #2
 800c520:	9305      	str	r3, [sp, #20]
 800c522:	4d33      	ldr	r5, [pc, #204]	; (800c5f0 <_vfiprintf_r+0x21c>)
 800c524:	f898 1000 	ldrb.w	r1, [r8]
 800c528:	2203      	movs	r2, #3
 800c52a:	4628      	mov	r0, r5
 800c52c:	f7f3 fe68 	bl	8000200 <memchr>
 800c530:	b140      	cbz	r0, 800c544 <_vfiprintf_r+0x170>
 800c532:	2340      	movs	r3, #64	; 0x40
 800c534:	1b40      	subs	r0, r0, r5
 800c536:	fa03 f000 	lsl.w	r0, r3, r0
 800c53a:	9b04      	ldr	r3, [sp, #16]
 800c53c:	4303      	orrs	r3, r0
 800c53e:	f108 0801 	add.w	r8, r8, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	f898 1000 	ldrb.w	r1, [r8]
 800c548:	482a      	ldr	r0, [pc, #168]	; (800c5f4 <_vfiprintf_r+0x220>)
 800c54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c54e:	2206      	movs	r2, #6
 800c550:	f108 0701 	add.w	r7, r8, #1
 800c554:	f7f3 fe54 	bl	8000200 <memchr>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d037      	beq.n	800c5cc <_vfiprintf_r+0x1f8>
 800c55c:	4b26      	ldr	r3, [pc, #152]	; (800c5f8 <_vfiprintf_r+0x224>)
 800c55e:	bb1b      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x1d4>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	3307      	adds	r3, #7
 800c564:	f023 0307 	bic.w	r3, r3, #7
 800c568:	3308      	adds	r3, #8
 800c56a:	9303      	str	r3, [sp, #12]
 800c56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56e:	444b      	add	r3, r9
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	e750      	b.n	800c416 <_vfiprintf_r+0x42>
 800c574:	fb05 3202 	mla	r2, r5, r2, r3
 800c578:	2001      	movs	r0, #1
 800c57a:	4688      	mov	r8, r1
 800c57c:	e78a      	b.n	800c494 <_vfiprintf_r+0xc0>
 800c57e:	2300      	movs	r3, #0
 800c580:	f108 0801 	add.w	r8, r8, #1
 800c584:	9305      	str	r3, [sp, #20]
 800c586:	4619      	mov	r1, r3
 800c588:	250a      	movs	r5, #10
 800c58a:	4640      	mov	r0, r8
 800c58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c590:	3a30      	subs	r2, #48	; 0x30
 800c592:	2a09      	cmp	r2, #9
 800c594:	d903      	bls.n	800c59e <_vfiprintf_r+0x1ca>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0c3      	beq.n	800c522 <_vfiprintf_r+0x14e>
 800c59a:	9105      	str	r1, [sp, #20]
 800c59c:	e7c1      	b.n	800c522 <_vfiprintf_r+0x14e>
 800c59e:	fb05 2101 	mla	r1, r5, r1, r2
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4680      	mov	r8, r0
 800c5a6:	e7f0      	b.n	800c58a <_vfiprintf_r+0x1b6>
 800c5a8:	ab03      	add	r3, sp, #12
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	4b13      	ldr	r3, [pc, #76]	; (800c5fc <_vfiprintf_r+0x228>)
 800c5b0:	a904      	add	r1, sp, #16
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f3af 8000 	nop.w
 800c5b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c5bc:	4681      	mov	r9, r0
 800c5be:	d1d5      	bne.n	800c56c <_vfiprintf_r+0x198>
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	065b      	lsls	r3, r3, #25
 800c5c4:	f53f af7e 	bmi.w	800c4c4 <_vfiprintf_r+0xf0>
 800c5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ca:	e77d      	b.n	800c4c8 <_vfiprintf_r+0xf4>
 800c5cc:	ab03      	add	r3, sp, #12
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <_vfiprintf_r+0x228>)
 800c5d4:	a904      	add	r1, sp, #16
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f000 f888 	bl	800c6ec <_printf_i>
 800c5dc:	e7ec      	b.n	800c5b8 <_vfiprintf_r+0x1e4>
 800c5de:	bf00      	nop
 800c5e0:	0800e764 	.word	0x0800e764
 800c5e4:	0800e7a4 	.word	0x0800e7a4
 800c5e8:	0800e784 	.word	0x0800e784
 800c5ec:	0800e744 	.word	0x0800e744
 800c5f0:	0800e7aa 	.word	0x0800e7aa
 800c5f4:	0800e7ae 	.word	0x0800e7ae
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	0800c3af 	.word	0x0800c3af

0800c600 <_printf_common>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	4691      	mov	r9, r2
 800c606:	461f      	mov	r7, r3
 800c608:	688a      	ldr	r2, [r1, #8]
 800c60a:	690b      	ldr	r3, [r1, #16]
 800c60c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c610:	4293      	cmp	r3, r2
 800c612:	bfb8      	it	lt
 800c614:	4613      	movlt	r3, r2
 800c616:	f8c9 3000 	str.w	r3, [r9]
 800c61a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c61e:	4606      	mov	r6, r0
 800c620:	460c      	mov	r4, r1
 800c622:	b112      	cbz	r2, 800c62a <_printf_common+0x2a>
 800c624:	3301      	adds	r3, #1
 800c626:	f8c9 3000 	str.w	r3, [r9]
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	0699      	lsls	r1, r3, #26
 800c62e:	bf42      	ittt	mi
 800c630:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c634:	3302      	addmi	r3, #2
 800c636:	f8c9 3000 	strmi.w	r3, [r9]
 800c63a:	6825      	ldr	r5, [r4, #0]
 800c63c:	f015 0506 	ands.w	r5, r5, #6
 800c640:	d107      	bne.n	800c652 <_printf_common+0x52>
 800c642:	f104 0a19 	add.w	sl, r4, #25
 800c646:	68e3      	ldr	r3, [r4, #12]
 800c648:	f8d9 2000 	ldr.w	r2, [r9]
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	42ab      	cmp	r3, r5
 800c650:	dc28      	bgt.n	800c6a4 <_printf_common+0xa4>
 800c652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c656:	6822      	ldr	r2, [r4, #0]
 800c658:	3300      	adds	r3, #0
 800c65a:	bf18      	it	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	0692      	lsls	r2, r2, #26
 800c660:	d42d      	bmi.n	800c6be <_printf_common+0xbe>
 800c662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c666:	4639      	mov	r1, r7
 800c668:	4630      	mov	r0, r6
 800c66a:	47c0      	blx	r8
 800c66c:	3001      	adds	r0, #1
 800c66e:	d020      	beq.n	800c6b2 <_printf_common+0xb2>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	68e5      	ldr	r5, [r4, #12]
 800c674:	f8d9 2000 	ldr.w	r2, [r9]
 800c678:	f003 0306 	and.w	r3, r3, #6
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	bf08      	it	eq
 800c680:	1aad      	subeq	r5, r5, r2
 800c682:	68a3      	ldr	r3, [r4, #8]
 800c684:	6922      	ldr	r2, [r4, #16]
 800c686:	bf0c      	ite	eq
 800c688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c68c:	2500      	movne	r5, #0
 800c68e:	4293      	cmp	r3, r2
 800c690:	bfc4      	itt	gt
 800c692:	1a9b      	subgt	r3, r3, r2
 800c694:	18ed      	addgt	r5, r5, r3
 800c696:	f04f 0900 	mov.w	r9, #0
 800c69a:	341a      	adds	r4, #26
 800c69c:	454d      	cmp	r5, r9
 800c69e:	d11a      	bne.n	800c6d6 <_printf_common+0xd6>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e008      	b.n	800c6b6 <_printf_common+0xb6>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4652      	mov	r2, sl
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	47c0      	blx	r8
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	d103      	bne.n	800c6ba <_printf_common+0xba>
 800c6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	3501      	adds	r5, #1
 800c6bc:	e7c3      	b.n	800c646 <_printf_common+0x46>
 800c6be:	18e1      	adds	r1, r4, r3
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	2030      	movs	r0, #48	; 0x30
 800c6c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6c8:	4422      	add	r2, r4
 800c6ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6d2:	3302      	adds	r3, #2
 800c6d4:	e7c5      	b.n	800c662 <_printf_common+0x62>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4622      	mov	r2, r4
 800c6da:	4639      	mov	r1, r7
 800c6dc:	4630      	mov	r0, r6
 800c6de:	47c0      	blx	r8
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d0e6      	beq.n	800c6b2 <_printf_common+0xb2>
 800c6e4:	f109 0901 	add.w	r9, r9, #1
 800c6e8:	e7d8      	b.n	800c69c <_printf_common+0x9c>
	...

0800c6ec <_printf_i>:
 800c6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	7e09      	ldrb	r1, [r1, #24]
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	296e      	cmp	r1, #110	; 0x6e
 800c6fc:	4617      	mov	r7, r2
 800c6fe:	4606      	mov	r6, r0
 800c700:	4698      	mov	r8, r3
 800c702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c704:	f000 80b3 	beq.w	800c86e <_printf_i+0x182>
 800c708:	d822      	bhi.n	800c750 <_printf_i+0x64>
 800c70a:	2963      	cmp	r1, #99	; 0x63
 800c70c:	d036      	beq.n	800c77c <_printf_i+0x90>
 800c70e:	d80a      	bhi.n	800c726 <_printf_i+0x3a>
 800c710:	2900      	cmp	r1, #0
 800c712:	f000 80b9 	beq.w	800c888 <_printf_i+0x19c>
 800c716:	2958      	cmp	r1, #88	; 0x58
 800c718:	f000 8083 	beq.w	800c822 <_printf_i+0x136>
 800c71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c724:	e032      	b.n	800c78c <_printf_i+0xa0>
 800c726:	2964      	cmp	r1, #100	; 0x64
 800c728:	d001      	beq.n	800c72e <_printf_i+0x42>
 800c72a:	2969      	cmp	r1, #105	; 0x69
 800c72c:	d1f6      	bne.n	800c71c <_printf_i+0x30>
 800c72e:	6820      	ldr	r0, [r4, #0]
 800c730:	6813      	ldr	r3, [r2, #0]
 800c732:	0605      	lsls	r5, r0, #24
 800c734:	f103 0104 	add.w	r1, r3, #4
 800c738:	d52a      	bpl.n	800c790 <_printf_i+0xa4>
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6011      	str	r1, [r2, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da03      	bge.n	800c74a <_printf_i+0x5e>
 800c742:	222d      	movs	r2, #45	; 0x2d
 800c744:	425b      	negs	r3, r3
 800c746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c74a:	486f      	ldr	r0, [pc, #444]	; (800c908 <_printf_i+0x21c>)
 800c74c:	220a      	movs	r2, #10
 800c74e:	e039      	b.n	800c7c4 <_printf_i+0xd8>
 800c750:	2973      	cmp	r1, #115	; 0x73
 800c752:	f000 809d 	beq.w	800c890 <_printf_i+0x1a4>
 800c756:	d808      	bhi.n	800c76a <_printf_i+0x7e>
 800c758:	296f      	cmp	r1, #111	; 0x6f
 800c75a:	d020      	beq.n	800c79e <_printf_i+0xb2>
 800c75c:	2970      	cmp	r1, #112	; 0x70
 800c75e:	d1dd      	bne.n	800c71c <_printf_i+0x30>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	f043 0320 	orr.w	r3, r3, #32
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	e003      	b.n	800c772 <_printf_i+0x86>
 800c76a:	2975      	cmp	r1, #117	; 0x75
 800c76c:	d017      	beq.n	800c79e <_printf_i+0xb2>
 800c76e:	2978      	cmp	r1, #120	; 0x78
 800c770:	d1d4      	bne.n	800c71c <_printf_i+0x30>
 800c772:	2378      	movs	r3, #120	; 0x78
 800c774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c778:	4864      	ldr	r0, [pc, #400]	; (800c90c <_printf_i+0x220>)
 800c77a:	e055      	b.n	800c828 <_printf_i+0x13c>
 800c77c:	6813      	ldr	r3, [r2, #0]
 800c77e:	1d19      	adds	r1, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6011      	str	r1, [r2, #0]
 800c784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c78c:	2301      	movs	r3, #1
 800c78e:	e08c      	b.n	800c8aa <_printf_i+0x1be>
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6011      	str	r1, [r2, #0]
 800c794:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c798:	bf18      	it	ne
 800c79a:	b21b      	sxthne	r3, r3
 800c79c:	e7cf      	b.n	800c73e <_printf_i+0x52>
 800c79e:	6813      	ldr	r3, [r2, #0]
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	1d18      	adds	r0, r3, #4
 800c7a4:	6010      	str	r0, [r2, #0]
 800c7a6:	0628      	lsls	r0, r5, #24
 800c7a8:	d501      	bpl.n	800c7ae <_printf_i+0xc2>
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	e002      	b.n	800c7b4 <_printf_i+0xc8>
 800c7ae:	0668      	lsls	r0, r5, #25
 800c7b0:	d5fb      	bpl.n	800c7aa <_printf_i+0xbe>
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	4854      	ldr	r0, [pc, #336]	; (800c908 <_printf_i+0x21c>)
 800c7b6:	296f      	cmp	r1, #111	; 0x6f
 800c7b8:	bf14      	ite	ne
 800c7ba:	220a      	movne	r2, #10
 800c7bc:	2208      	moveq	r2, #8
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7c4:	6865      	ldr	r5, [r4, #4]
 800c7c6:	60a5      	str	r5, [r4, #8]
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	f2c0 8095 	blt.w	800c8f8 <_printf_i+0x20c>
 800c7ce:	6821      	ldr	r1, [r4, #0]
 800c7d0:	f021 0104 	bic.w	r1, r1, #4
 800c7d4:	6021      	str	r1, [r4, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d13d      	bne.n	800c856 <_printf_i+0x16a>
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	f040 808e 	bne.w	800c8fc <_printf_i+0x210>
 800c7e0:	4665      	mov	r5, ip
 800c7e2:	2a08      	cmp	r2, #8
 800c7e4:	d10b      	bne.n	800c7fe <_printf_i+0x112>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	07db      	lsls	r3, r3, #31
 800c7ea:	d508      	bpl.n	800c7fe <_printf_i+0x112>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	6862      	ldr	r2, [r4, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	bfde      	ittt	le
 800c7f4:	2330      	movle	r3, #48	; 0x30
 800c7f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7fe:	ebac 0305 	sub.w	r3, ip, r5
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	f8cd 8000 	str.w	r8, [sp]
 800c808:	463b      	mov	r3, r7
 800c80a:	aa03      	add	r2, sp, #12
 800c80c:	4621      	mov	r1, r4
 800c80e:	4630      	mov	r0, r6
 800c810:	f7ff fef6 	bl	800c600 <_printf_common>
 800c814:	3001      	adds	r0, #1
 800c816:	d14d      	bne.n	800c8b4 <_printf_i+0x1c8>
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	b005      	add	sp, #20
 800c81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c822:	4839      	ldr	r0, [pc, #228]	; (800c908 <_printf_i+0x21c>)
 800c824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c828:	6813      	ldr	r3, [r2, #0]
 800c82a:	6821      	ldr	r1, [r4, #0]
 800c82c:	1d1d      	adds	r5, r3, #4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6015      	str	r5, [r2, #0]
 800c832:	060a      	lsls	r2, r1, #24
 800c834:	d50b      	bpl.n	800c84e <_printf_i+0x162>
 800c836:	07ca      	lsls	r2, r1, #31
 800c838:	bf44      	itt	mi
 800c83a:	f041 0120 	orrmi.w	r1, r1, #32
 800c83e:	6021      	strmi	r1, [r4, #0]
 800c840:	b91b      	cbnz	r3, 800c84a <_printf_i+0x15e>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	f022 0220 	bic.w	r2, r2, #32
 800c848:	6022      	str	r2, [r4, #0]
 800c84a:	2210      	movs	r2, #16
 800c84c:	e7b7      	b.n	800c7be <_printf_i+0xd2>
 800c84e:	064d      	lsls	r5, r1, #25
 800c850:	bf48      	it	mi
 800c852:	b29b      	uxthmi	r3, r3
 800c854:	e7ef      	b.n	800c836 <_printf_i+0x14a>
 800c856:	4665      	mov	r5, ip
 800c858:	fbb3 f1f2 	udiv	r1, r3, r2
 800c85c:	fb02 3311 	mls	r3, r2, r1, r3
 800c860:	5cc3      	ldrb	r3, [r0, r3]
 800c862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c866:	460b      	mov	r3, r1
 800c868:	2900      	cmp	r1, #0
 800c86a:	d1f5      	bne.n	800c858 <_printf_i+0x16c>
 800c86c:	e7b9      	b.n	800c7e2 <_printf_i+0xf6>
 800c86e:	6813      	ldr	r3, [r2, #0]
 800c870:	6825      	ldr	r5, [r4, #0]
 800c872:	6961      	ldr	r1, [r4, #20]
 800c874:	1d18      	adds	r0, r3, #4
 800c876:	6010      	str	r0, [r2, #0]
 800c878:	0628      	lsls	r0, r5, #24
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	d501      	bpl.n	800c882 <_printf_i+0x196>
 800c87e:	6019      	str	r1, [r3, #0]
 800c880:	e002      	b.n	800c888 <_printf_i+0x19c>
 800c882:	066a      	lsls	r2, r5, #25
 800c884:	d5fb      	bpl.n	800c87e <_printf_i+0x192>
 800c886:	8019      	strh	r1, [r3, #0]
 800c888:	2300      	movs	r3, #0
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	4665      	mov	r5, ip
 800c88e:	e7b9      	b.n	800c804 <_printf_i+0x118>
 800c890:	6813      	ldr	r3, [r2, #0]
 800c892:	1d19      	adds	r1, r3, #4
 800c894:	6011      	str	r1, [r2, #0]
 800c896:	681d      	ldr	r5, [r3, #0]
 800c898:	6862      	ldr	r2, [r4, #4]
 800c89a:	2100      	movs	r1, #0
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7f3 fcaf 	bl	8000200 <memchr>
 800c8a2:	b108      	cbz	r0, 800c8a8 <_printf_i+0x1bc>
 800c8a4:	1b40      	subs	r0, r0, r5
 800c8a6:	6060      	str	r0, [r4, #4]
 800c8a8:	6863      	ldr	r3, [r4, #4]
 800c8aa:	6123      	str	r3, [r4, #16]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8b2:	e7a7      	b.n	800c804 <_printf_i+0x118>
 800c8b4:	6923      	ldr	r3, [r4, #16]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	47c0      	blx	r8
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d0aa      	beq.n	800c818 <_printf_i+0x12c>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	079b      	lsls	r3, r3, #30
 800c8c6:	d413      	bmi.n	800c8f0 <_printf_i+0x204>
 800c8c8:	68e0      	ldr	r0, [r4, #12]
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	4298      	cmp	r0, r3
 800c8ce:	bfb8      	it	lt
 800c8d0:	4618      	movlt	r0, r3
 800c8d2:	e7a3      	b.n	800c81c <_printf_i+0x130>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	464a      	mov	r2, r9
 800c8d8:	4639      	mov	r1, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d09a      	beq.n	800c818 <_printf_i+0x12c>
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	68e3      	ldr	r3, [r4, #12]
 800c8e6:	9a03      	ldr	r2, [sp, #12]
 800c8e8:	1a9b      	subs	r3, r3, r2
 800c8ea:	42ab      	cmp	r3, r5
 800c8ec:	dcf2      	bgt.n	800c8d4 <_printf_i+0x1e8>
 800c8ee:	e7eb      	b.n	800c8c8 <_printf_i+0x1dc>
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	f104 0919 	add.w	r9, r4, #25
 800c8f6:	e7f5      	b.n	800c8e4 <_printf_i+0x1f8>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1ac      	bne.n	800c856 <_printf_i+0x16a>
 800c8fc:	7803      	ldrb	r3, [r0, #0]
 800c8fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c902:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c906:	e76c      	b.n	800c7e2 <_printf_i+0xf6>
 800c908:	0800e7b5 	.word	0x0800e7b5
 800c90c:	0800e7c6 	.word	0x0800e7c6

0800c910 <_putc_r>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	460d      	mov	r5, r1
 800c914:	4614      	mov	r4, r2
 800c916:	4606      	mov	r6, r0
 800c918:	b118      	cbz	r0, 800c922 <_putc_r+0x12>
 800c91a:	6983      	ldr	r3, [r0, #24]
 800c91c:	b90b      	cbnz	r3, 800c922 <_putc_r+0x12>
 800c91e:	f7ff fa71 	bl	800be04 <__sinit>
 800c922:	4b13      	ldr	r3, [pc, #76]	; (800c970 <_putc_r+0x60>)
 800c924:	429c      	cmp	r4, r3
 800c926:	d112      	bne.n	800c94e <_putc_r+0x3e>
 800c928:	6874      	ldr	r4, [r6, #4]
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	2b00      	cmp	r3, #0
 800c930:	60a3      	str	r3, [r4, #8]
 800c932:	da16      	bge.n	800c962 <_putc_r+0x52>
 800c934:	69a2      	ldr	r2, [r4, #24]
 800c936:	4293      	cmp	r3, r2
 800c938:	db02      	blt.n	800c940 <_putc_r+0x30>
 800c93a:	b2eb      	uxtb	r3, r5
 800c93c:	2b0a      	cmp	r3, #10
 800c93e:	d110      	bne.n	800c962 <_putc_r+0x52>
 800c940:	4622      	mov	r2, r4
 800c942:	4629      	mov	r1, r5
 800c944:	4630      	mov	r0, r6
 800c946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c94a:	f7ff b8ab 	b.w	800baa4 <__swbuf_r>
 800c94e:	4b09      	ldr	r3, [pc, #36]	; (800c974 <_putc_r+0x64>)
 800c950:	429c      	cmp	r4, r3
 800c952:	d101      	bne.n	800c958 <_putc_r+0x48>
 800c954:	68b4      	ldr	r4, [r6, #8]
 800c956:	e7e8      	b.n	800c92a <_putc_r+0x1a>
 800c958:	4b07      	ldr	r3, [pc, #28]	; (800c978 <_putc_r+0x68>)
 800c95a:	429c      	cmp	r4, r3
 800c95c:	bf08      	it	eq
 800c95e:	68f4      	ldreq	r4, [r6, #12]
 800c960:	e7e3      	b.n	800c92a <_putc_r+0x1a>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	6022      	str	r2, [r4, #0]
 800c968:	701d      	strb	r5, [r3, #0]
 800c96a:	b2e8      	uxtb	r0, r5
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	bf00      	nop
 800c970:	0800e764 	.word	0x0800e764
 800c974:	0800e784 	.word	0x0800e784
 800c978:	0800e744 	.word	0x0800e744

0800c97c <__sread>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	460c      	mov	r4, r1
 800c980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c984:	f000 f8d4 	bl	800cb30 <_read_r>
 800c988:	2800      	cmp	r0, #0
 800c98a:	bfab      	itete	ge
 800c98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c98e:	89a3      	ldrhlt	r3, [r4, #12]
 800c990:	181b      	addge	r3, r3, r0
 800c992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c996:	bfac      	ite	ge
 800c998:	6563      	strge	r3, [r4, #84]	; 0x54
 800c99a:	81a3      	strhlt	r3, [r4, #12]
 800c99c:	bd10      	pop	{r4, pc}

0800c99e <__swrite>:
 800c99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a2:	461f      	mov	r7, r3
 800c9a4:	898b      	ldrh	r3, [r1, #12]
 800c9a6:	05db      	lsls	r3, r3, #23
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	4616      	mov	r6, r2
 800c9ae:	d505      	bpl.n	800c9bc <__swrite+0x1e>
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b8:	f000 f868 	bl	800ca8c <_lseek_r>
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9c6:	81a3      	strh	r3, [r4, #12]
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	463b      	mov	r3, r7
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d2:	f000 b817 	b.w	800ca04 <_write_r>

0800c9d6 <__sseek>:
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	460c      	mov	r4, r1
 800c9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9de:	f000 f855 	bl	800ca8c <_lseek_r>
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	bf15      	itete	ne
 800c9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9f2:	81a3      	strheq	r3, [r4, #12]
 800c9f4:	bf18      	it	ne
 800c9f6:	81a3      	strhne	r3, [r4, #12]
 800c9f8:	bd10      	pop	{r4, pc}

0800c9fa <__sclose>:
 800c9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fe:	f000 b813 	b.w	800ca28 <_close_r>
	...

0800ca04 <_write_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4c07      	ldr	r4, [pc, #28]	; (800ca24 <_write_r+0x20>)
 800ca08:	4605      	mov	r5, r0
 800ca0a:	4608      	mov	r0, r1
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	6022      	str	r2, [r4, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	f7f4 fa51 	bl	8000eba <_write>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_write_r+0x1e>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_write_r+0x1e>
 800ca20:	602b      	str	r3, [r5, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	20003174 	.word	0x20003174

0800ca28 <_close_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4c06      	ldr	r4, [pc, #24]	; (800ca44 <_close_r+0x1c>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4605      	mov	r5, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	6023      	str	r3, [r4, #0]
 800ca34:	f7f4 fa5d 	bl	8000ef2 <_close>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	d102      	bne.n	800ca42 <_close_r+0x1a>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	b103      	cbz	r3, 800ca42 <_close_r+0x1a>
 800ca40:	602b      	str	r3, [r5, #0]
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	20003174 	.word	0x20003174

0800ca48 <_fstat_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4c07      	ldr	r4, [pc, #28]	; (800ca68 <_fstat_r+0x20>)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4605      	mov	r5, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	4611      	mov	r1, r2
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	f7f4 fa58 	bl	8000f0a <_fstat>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d102      	bne.n	800ca64 <_fstat_r+0x1c>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	b103      	cbz	r3, 800ca64 <_fstat_r+0x1c>
 800ca62:	602b      	str	r3, [r5, #0]
 800ca64:	bd38      	pop	{r3, r4, r5, pc}
 800ca66:	bf00      	nop
 800ca68:	20003174 	.word	0x20003174

0800ca6c <_isatty_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4c06      	ldr	r4, [pc, #24]	; (800ca88 <_isatty_r+0x1c>)
 800ca70:	2300      	movs	r3, #0
 800ca72:	4605      	mov	r5, r0
 800ca74:	4608      	mov	r0, r1
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	f7f4 fa57 	bl	8000f2a <_isatty>
 800ca7c:	1c43      	adds	r3, r0, #1
 800ca7e:	d102      	bne.n	800ca86 <_isatty_r+0x1a>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	b103      	cbz	r3, 800ca86 <_isatty_r+0x1a>
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
 800ca88:	20003174 	.word	0x20003174

0800ca8c <_lseek_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4c07      	ldr	r4, [pc, #28]	; (800caac <_lseek_r+0x20>)
 800ca90:	4605      	mov	r5, r0
 800ca92:	4608      	mov	r0, r1
 800ca94:	4611      	mov	r1, r2
 800ca96:	2200      	movs	r2, #0
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f7f4 fa50 	bl	8000f40 <_lseek>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d102      	bne.n	800caaa <_lseek_r+0x1e>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	b103      	cbz	r3, 800caaa <_lseek_r+0x1e>
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
 800caac:	20003174 	.word	0x20003174

0800cab0 <memmove>:
 800cab0:	4288      	cmp	r0, r1
 800cab2:	b510      	push	{r4, lr}
 800cab4:	eb01 0302 	add.w	r3, r1, r2
 800cab8:	d807      	bhi.n	800caca <memmove+0x1a>
 800caba:	1e42      	subs	r2, r0, #1
 800cabc:	4299      	cmp	r1, r3
 800cabe:	d00a      	beq.n	800cad6 <memmove+0x26>
 800cac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cac4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cac8:	e7f8      	b.n	800cabc <memmove+0xc>
 800caca:	4283      	cmp	r3, r0
 800cacc:	d9f5      	bls.n	800caba <memmove+0xa>
 800cace:	1881      	adds	r1, r0, r2
 800cad0:	1ad2      	subs	r2, r2, r3
 800cad2:	42d3      	cmn	r3, r2
 800cad4:	d100      	bne.n	800cad8 <memmove+0x28>
 800cad6:	bd10      	pop	{r4, pc}
 800cad8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cadc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cae0:	e7f7      	b.n	800cad2 <memmove+0x22>

0800cae2 <_realloc_r>:
 800cae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae4:	4607      	mov	r7, r0
 800cae6:	4614      	mov	r4, r2
 800cae8:	460e      	mov	r6, r1
 800caea:	b921      	cbnz	r1, 800caf6 <_realloc_r+0x14>
 800caec:	4611      	mov	r1, r2
 800caee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800caf2:	f7fe bc97 	b.w	800b424 <_malloc_r>
 800caf6:	b922      	cbnz	r2, 800cb02 <_realloc_r+0x20>
 800caf8:	f7fe fc46 	bl	800b388 <_free_r>
 800cafc:	4625      	mov	r5, r4
 800cafe:	4628      	mov	r0, r5
 800cb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb02:	f000 f827 	bl	800cb54 <_malloc_usable_size_r>
 800cb06:	42a0      	cmp	r0, r4
 800cb08:	d20f      	bcs.n	800cb2a <_realloc_r+0x48>
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f7fe fc89 	bl	800b424 <_malloc_r>
 800cb12:	4605      	mov	r5, r0
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d0f2      	beq.n	800cafe <_realloc_r+0x1c>
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	f7fe fc20 	bl	800b360 <memcpy>
 800cb20:	4631      	mov	r1, r6
 800cb22:	4638      	mov	r0, r7
 800cb24:	f7fe fc30 	bl	800b388 <_free_r>
 800cb28:	e7e9      	b.n	800cafe <_realloc_r+0x1c>
 800cb2a:	4635      	mov	r5, r6
 800cb2c:	e7e7      	b.n	800cafe <_realloc_r+0x1c>
	...

0800cb30 <_read_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4c07      	ldr	r4, [pc, #28]	; (800cb50 <_read_r+0x20>)
 800cb34:	4605      	mov	r5, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f4 f99e 	bl	8000e80 <_read>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_read_r+0x1e>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_read_r+0x1e>
 800cb4c:	602b      	str	r3, [r5, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20003174 	.word	0x20003174

0800cb54 <_malloc_usable_size_r>:
 800cb54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb58:	1f18      	subs	r0, r3, #4
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bfbc      	itt	lt
 800cb5e:	580b      	ldrlt	r3, [r1, r0]
 800cb60:	18c0      	addlt	r0, r0, r3
 800cb62:	4770      	bx	lr

0800cb64 <_init>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr

0800cb70 <_fini>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	bf00      	nop
 800cb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb76:	bc08      	pop	{r3}
 800cb78:	469e      	mov	lr, r3
 800cb7a:	4770      	bx	lr
