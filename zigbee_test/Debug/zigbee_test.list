
zigbee_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cecc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0800d07c  0800d07c  0001d07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee94  0800ee94  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee94  0800ee94  0001ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee9c  0800ee9c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee9c  0800ee9c  0001ee9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800eea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003054  20000150  0800eff4  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031a4  0800eff4  000231a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029425  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c0d  00000000  00000000  000495a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c18  00000000  00000000  0004e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fc50  00000000  00000000  000517c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001743b  00000000  00000000  00081418  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111c14  00000000  00000000  00098853  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aa467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf0  00000000  00000000  001aa4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d064 	.word	0x0800d064

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800d064 	.word	0x0800d064

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000016c 	.word	0x2000016c
 80005f0:	200001cc 	.word	0x200001cc

080005f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x5c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800063a:	f006 fba7 	bl	8006d8c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_GPIO_Init+0x5c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <log_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static SemaphoreHandle_t dbg_sem;

void log_print(const char *fmt, ...) {
 8000664:	b40f      	push	{r0, r1, r2, r3}
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
	// small local working buffer
	static char working_buffer[256];

	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800066c:	f00a fb54 	bl	800ad18 <xTaskGetSchedulerState>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d025      	beq.n	80006c2 <log_print+0x5e>
		// take semaphore
		if (xSemaphoreTake(dbg_sem, 1000) == pdFALSE)
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <log_print+0x98>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800067e:	4618      	mov	r0, r3
 8000680:	f009 fab8 	bl	8009bf4 <xQueueSemaphoreTake>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d030      	beq.n	80006ec <log_print+0x88>
			return;

		// Create vaarg list
		va_list args;
		va_start(args, fmt);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	607b      	str	r3, [r7, #4]
		vsnprintf(working_buffer, 256, fmt, args);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4819      	ldr	r0, [pc, #100]	; (8000700 <log_print+0x9c>)
 800069a:	f00b fd27 	bl	800c0ec <vsniprintf>
		va_end(args);

		// send data
		HAL_UART_Transmit(&huart2, (char*) working_buffer, strlen(working_buffer), 100);
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <log_print+0x9c>)
 80006a0:	f7ff fda6 	bl	80001f0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	4915      	ldr	r1, [pc, #84]	; (8000700 <log_print+0x9c>)
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <log_print+0xa0>)
 80006ae:	f008 f949 	bl	8008944 <HAL_UART_Transmit>

		// Give semaphore back
		xSemaphoreGive(dbg_sem);
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <log_print+0x98>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f009 f830 	bl	8009720 <xQueueGenericSend>
 80006c0:	e015      	b.n	80006ee <log_print+0x8a>
	}
	else {
		// Create vaarg list
		va_list args;
		va_start(args, fmt);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	603b      	str	r3, [r7, #0]
		vsnprintf(working_buffer, 256, fmt, args);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <log_print+0x9c>)
 80006d2:	f00b fd0b 	bl	800c0ec <vsniprintf>
		va_end(args);

		// send data
		HAL_UART_Transmit(&huart2, (char*) working_buffer, strlen(working_buffer), 100);
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <log_print+0x9c>)
 80006d8:	f7ff fd8a 	bl	80001f0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <log_print+0x9c>)
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <log_print+0xa0>)
 80006e6:	f008 f92d 	bl	8008944 <HAL_UART_Transmit>
 80006ea:	e000      	b.n	80006ee <log_print+0x8a>
			return;
 80006ec:	bf00      	nop
	}
}
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200003cc 	.word	0x200003cc
 8000700:	200003d0 	.word	0x200003d0
 8000704:	20003018 	.word	0x20003018

08000708 <mtSysResetIndCb>:

/********************************************************************
 * START OF SYS CALL BACK FUNCTIONS
 */
static uint8_t mtSysResetIndCb(ResetIndFormat_t *msg) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	log_print("ZNP Version: %d.%d.%d\n", msg->MajorRel, msg->MinorRel, msg->HwRev);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <mtSysResetIndCb+0x28>)
 8000722:	f7ff ff9f 	bl	8000664 <log_print>
	return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0800d07c 	.word	0x0800d07c

08000734 <mtVersionIndCb>:

static uint8_t mtVersionIndCb(VersionSrspFormat_t *msg) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af02      	add	r7, sp, #8
 800073a:	6078      	str	r0, [r7, #4]
	log_print("Version: %d %d %d %d %d %d\n", msg->MaintRel, msg->MajorRel, msg->MinorRel, msg->Product, msg->TransportRev);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	4618      	mov	r0, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	78db      	ldrb	r3, [r3, #3]
 800074c:	461c      	mov	r4, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	9200      	str	r2, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	4602      	mov	r2, r0
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <mtVersionIndCb+0x3c>)
 8000762:	f7ff ff7f 	bl	8000664 <log_print>
	return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	0800d094 	.word	0x0800d094

08000774 <mtZdoStateChangeIndCb>:
 *
 * @param  uint8 zdoState
 *
 * @return SUCCESS or FAILURE
 */
static uint8_t mtZdoStateChangeIndCb(uint8_t newDevState) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	switch (newDevState) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d86b      	bhi.n	800085c <mtZdoStateChangeIndCb+0xe8>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <mtZdoStateChangeIndCb+0x18>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007b9 	.word	0x080007b9
 8000790:	080007c3 	.word	0x080007c3
 8000794:	080007cd 	.word	0x080007cd
 8000798:	080007dd 	.word	0x080007dd
 800079c:	080007ed 	.word	0x080007ed
 80007a0:	080007fd 	.word	0x080007fd
 80007a4:	0800080d 	.word	0x0800080d
 80007a8:	0800081d 	.word	0x0800081d
 80007ac:	0800082d 	.word	0x0800082d
 80007b0:	0800083d 	.word	0x0800083d
 80007b4:	0800084d 	.word	0x0800084d
		case DEV_HOLD:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not started automatically\n");
 80007b8:	492d      	ldr	r1, [pc, #180]	; (8000870 <mtZdoStateChangeIndCb+0xfc>)
 80007ba:	2002      	movs	r0, #2
 80007bc:	f005 fb4a 	bl	8005e54 <dbg_print>
			break;
 80007c0:	e051      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_INIT:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not connected to anything\n");
 80007c2:	492c      	ldr	r1, [pc, #176]	; (8000874 <mtZdoStateChangeIndCb+0x100>)
 80007c4:	2002      	movs	r0, #2
 80007c6:	f005 fb45 	bl	8005e54 <dbg_print>
			break;
 80007ca:	e04c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_DISC:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Discovering PAN's to join\n");
 80007cc:	492a      	ldr	r1, [pc, #168]	; (8000878 <mtZdoStateChangeIndCb+0x104>)
 80007ce:	2002      	movs	r0, #2
 80007d0:	f005 fb40 	bl	8005e54 <dbg_print>
			log_print("Network Discovering\n");
 80007d4:	4829      	ldr	r0, [pc, #164]	; (800087c <mtZdoStateChangeIndCb+0x108>)
 80007d6:	f7ff ff45 	bl	8000664 <log_print>
			break;
 80007da:	e044      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_JOINING:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joining a PAN\n");
 80007dc:	4928      	ldr	r1, [pc, #160]	; (8000880 <mtZdoStateChangeIndCb+0x10c>)
 80007de:	2002      	movs	r0, #2
 80007e0:	f005 fb38 	bl	8005e54 <dbg_print>
			log_print("Network Joining\n");
 80007e4:	4827      	ldr	r0, [pc, #156]	; (8000884 <mtZdoStateChangeIndCb+0x110>)
 80007e6:	f7ff ff3d 	bl	8000664 <log_print>
			break;
 80007ea:	e03c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_REJOIN:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: ReJoining a PAN, only for end devices\n");
 80007ec:	4926      	ldr	r1, [pc, #152]	; (8000888 <mtZdoStateChangeIndCb+0x114>)
 80007ee:	2002      	movs	r0, #2
 80007f0:	f005 fb30 	bl	8005e54 <dbg_print>
			log_print("Network Rejoining\n");
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <mtZdoStateChangeIndCb+0x118>)
 80007f6:	f7ff ff35 	bl	8000664 <log_print>
			break;
 80007fa:	e034      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE_UNAUTH:
			log_print("Network Authenticating\n");
 80007fc:	4824      	ldr	r0, [pc, #144]	; (8000890 <mtZdoStateChangeIndCb+0x11c>)
 80007fe:	f7ff ff31 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joined but not yet authenticated by trust center\n");
 8000802:	4924      	ldr	r1, [pc, #144]	; (8000894 <mtZdoStateChangeIndCb+0x120>)
 8000804:	2002      	movs	r0, #2
 8000806:	f005 fb25 	bl	8005e54 <dbg_print>
			break;
 800080a:	e02c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE:
			log_print("Network Joined\n");
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <mtZdoStateChangeIndCb+0x124>)
 800080e:	f7ff ff29 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as device after authentication\n");
 8000812:	4922      	ldr	r1, [pc, #136]	; (800089c <mtZdoStateChangeIndCb+0x128>)
 8000814:	2002      	movs	r0, #2
 8000816:	f005 fb1d 	bl	8005e54 <dbg_print>
			break;
 800081a:	e024      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ROUTER:
			log_print("Network Joined\n");
 800081c:	481e      	ldr	r0, [pc, #120]	; (8000898 <mtZdoStateChangeIndCb+0x124>)
 800081e:	f7ff ff21 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device joined, authenticated and is a router\n");
 8000822:	491f      	ldr	r1, [pc, #124]	; (80008a0 <mtZdoStateChangeIndCb+0x12c>)
 8000824:	2002      	movs	r0, #2
 8000826:	f005 fb15 	bl	8005e54 <dbg_print>
			break;
 800082a:	e01c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_COORD_STARTING:
			log_print("Network Starting\n");
 800082c:	481d      	ldr	r0, [pc, #116]	; (80008a4 <mtZdoStateChangeIndCb+0x130>)
 800082e:	f7ff ff19 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 8000832:	491d      	ldr	r1, [pc, #116]	; (80008a8 <mtZdoStateChangeIndCb+0x134>)
 8000834:	2002      	movs	r0, #2
 8000836:	f005 fb0d 	bl	8005e54 <dbg_print>
			break;
 800083a:	e014      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ZB_COORD:
			log_print("Network Started\n");
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <mtZdoStateChangeIndCb+0x138>)
 800083e:	f7ff ff11 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 8000842:	4919      	ldr	r1, [pc, #100]	; (80008a8 <mtZdoStateChangeIndCb+0x134>)
 8000844:	2002      	movs	r0, #2
 8000846:	f005 fb05 	bl	8005e54 <dbg_print>
			break;
 800084a:	e00c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_ORPHAN:
			log_print("Network Orphaned\n");
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <mtZdoStateChangeIndCb+0x13c>)
 800084e:	f7ff ff09 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device has lost information about its parent\n");
 8000852:	4918      	ldr	r1, [pc, #96]	; (80008b4 <mtZdoStateChangeIndCb+0x140>)
 8000854:	2002      	movs	r0, #2
 8000856:	f005 fafd 	bl	8005e54 <dbg_print>
			break;
 800085a:	e004      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		default:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: unknown state");
 800085c:	4916      	ldr	r1, [pc, #88]	; (80008b8 <mtZdoStateChangeIndCb+0x144>)
 800085e:	2002      	movs	r0, #2
 8000860:	f005 faf8 	bl	8005e54 <dbg_print>
			break;
 8000864:	bf00      	nop
	}

	//devState = (devStates_t) newDevState;

	return SUCCESS;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800d0b0 	.word	0x0800d0b0
 8000874:	0800d0f0 	.word	0x0800d0f0
 8000878:	0800d130 	.word	0x0800d130
 800087c:	0800d164 	.word	0x0800d164
 8000880:	0800d17c 	.word	0x0800d17c
 8000884:	0800d1a4 	.word	0x0800d1a4
 8000888:	0800d1b8 	.word	0x0800d1b8
 800088c:	0800d1f8 	.word	0x0800d1f8
 8000890:	0800d20c 	.word	0x0800d20c
 8000894:	0800d224 	.word	0x0800d224
 8000898:	0800d270 	.word	0x0800d270
 800089c:	0800d280 	.word	0x0800d280
 80008a0:	0800d2c0 	.word	0x0800d2c0
 80008a4:	0800d308 	.word	0x0800d308
 80008a8:	0800d31c 	.word	0x0800d31c
 80008ac:	0800d354 	.word	0x0800d354
 80008b0:	0800d368 	.word	0x0800d368
 80008b4:	0800d37c 	.word	0x0800d37c
 80008b8:	0800d3c4 	.word	0x0800d3c4

080008bc <mtZdoSimpleDescRspCb>:

static uint8_t mtZdoSimpleDescRspCb(SimpleDescRspFormat_t *msg) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d156      	bne.n	800097a <mtZdoSimpleDescRspCb+0xbe>
		log_print("\tEndpoint: 0x%02X\n", msg->Endpoint);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	79db      	ldrb	r3, [r3, #7]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4830      	ldr	r0, [pc, #192]	; (8000994 <mtZdoSimpleDescRspCb+0xd8>)
 80008d4:	f7ff fec6 	bl	8000664 <log_print>
		log_print("\tProfileID: 0x%04X\n", msg->ProfileID);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	891b      	ldrh	r3, [r3, #8]
 80008dc:	4619      	mov	r1, r3
 80008de:	482e      	ldr	r0, [pc, #184]	; (8000998 <mtZdoSimpleDescRspCb+0xdc>)
 80008e0:	f7ff fec0 	bl	8000664 <log_print>
		log_print("\tDeviceID: 0x%04X\n", msg->DeviceID);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	895b      	ldrh	r3, [r3, #10]
 80008e8:	4619      	mov	r1, r3
 80008ea:	482c      	ldr	r0, [pc, #176]	; (800099c <mtZdoSimpleDescRspCb+0xe0>)
 80008ec:	f7ff feba 	bl	8000664 <log_print>
		log_print("\tDeviceVersion: 0x%02X\n", msg->DeviceVersion);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7b1b      	ldrb	r3, [r3, #12]
 80008f4:	4619      	mov	r1, r3
 80008f6:	482a      	ldr	r0, [pc, #168]	; (80009a0 <mtZdoSimpleDescRspCb+0xe4>)
 80008f8:	f7ff feb4 	bl	8000664 <log_print>
		log_print("\tNumInClusters: %d\n", msg->NumInClusters);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7b5b      	ldrb	r3, [r3, #13]
 8000900:	4619      	mov	r1, r3
 8000902:	4828      	ldr	r0, [pc, #160]	; (80009a4 <mtZdoSimpleDescRspCb+0xe8>)
 8000904:	f7ff feae 	bl	8000664 <log_print>
		uint32_t i;
		for (i = 0; i < msg->NumInClusters; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e00d      	b.n	800092a <mtZdoSimpleDescRspCb+0x6e>
			log_print("\t\tInClusterList[%d]: 0x%04X\n", i, msg->InClusterList[i]);
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3304      	adds	r3, #4
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	88db      	ldrh	r3, [r3, #6]
 800091a:	461a      	mov	r2, r3
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	4822      	ldr	r0, [pc, #136]	; (80009a8 <mtZdoSimpleDescRspCb+0xec>)
 8000920:	f7ff fea0 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumInClusters; i++) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7b5b      	ldrb	r3, [r3, #13]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4293      	cmp	r3, r2
 8000934:	d3eb      	bcc.n	800090e <mtZdoSimpleDescRspCb+0x52>
		}
		log_print("\tNumOutClusters: %d\n", msg->NumOutClusters);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800093c:	4619      	mov	r1, r3
 800093e:	481b      	ldr	r0, [pc, #108]	; (80009ac <mtZdoSimpleDescRspCb+0xf0>)
 8000940:	f7ff fe90 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e00c      	b.n	8000964 <mtZdoSimpleDescRspCb+0xa8>
			log_print("\t\tOutClusterList[%d]: 0x%04X\n", i, msg->OutClusterList[i]);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	3218      	adds	r2, #24
 8000950:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000954:	461a      	mov	r2, r3
 8000956:	68f9      	ldr	r1, [r7, #12]
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <mtZdoSimpleDescRspCb+0xf4>)
 800095a:	f7ff fe83 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4293      	cmp	r3, r2
 8000970:	d3eb      	bcc.n	800094a <mtZdoSimpleDescRspCb+0x8e>
		}
		log_print("\n");
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <mtZdoSimpleDescRspCb+0xf8>)
 8000974:	f7ff fe76 	bl	8000664 <log_print>
 8000978:	e005      	b.n	8000986 <mtZdoSimpleDescRspCb+0xca>
	}
	else {
		log_print("SimpleDescRsp Status: FAIL 0x%02X\n", msg->Status);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	789b      	ldrb	r3, [r3, #2]
 800097e:	4619      	mov	r1, r3
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <mtZdoSimpleDescRspCb+0xfc>)
 8000982:	f7ff fe6f 	bl	8000664 <log_print>
	}

	return msg->Status;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	789b      	ldrb	r3, [r3, #2]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	0800d3ec 	.word	0x0800d3ec
 8000998:	0800d400 	.word	0x0800d400
 800099c:	0800d414 	.word	0x0800d414
 80009a0:	0800d428 	.word	0x0800d428
 80009a4:	0800d440 	.word	0x0800d440
 80009a8:	0800d454 	.word	0x0800d454
 80009ac:	0800d474 	.word	0x0800d474
 80009b0:	0800d48c 	.word	0x0800d48c
 80009b4:	0800d4ac 	.word	0x0800d4ac
 80009b8:	0800d4b0 	.word	0x0800d4b0

080009bc <mtZdoMgmtLqiRspCb>:

static uint8_t mtZdoMgmtLqiRspCb(MgmtLqiRspFormat_t *msg) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	 else {
	 log_print("MgmtLqiRsp Status: FAIL 0x%02X\n", msg->Status);
	 }

	 return msg->Status;*/
	return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <mtZdoActiveEpRspCb>:

static uint8_t mtZdoActiveEpRspCb(ActiveEpRspFormat_t *msg) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	//SimpleDescReqFormat_t simReq;
	log_print("NwkAddr: 0x%04X\n", msg->NwkAddr);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	; (8000a48 <mtZdoActiveEpRspCb+0x74>)
 80009e4:	f7ff fe3e 	bl	8000664 <log_print>
	if (msg->Status == MT_RPC_SUCCESS) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	789b      	ldrb	r3, [r3, #2]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11e      	bne.n	8000a2e <mtZdoActiveEpRspCb+0x5a>
		log_print("Number of Endpoints: %d\nActive Endpoints: ", msg->ActiveEPCount);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	799b      	ldrb	r3, [r3, #6]
 80009f4:	4619      	mov	r1, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <mtZdoActiveEpRspCb+0x78>)
 80009f8:	f7ff fe34 	bl	8000664 <log_print>
		uint32_t i;
		for (i = 0; i < msg->ActiveEPCount; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e00b      	b.n	8000a1a <mtZdoActiveEpRspCb+0x46>
			log_print("0x%02X\t", msg->ActiveEPList[i]);
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	3307      	adds	r3, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4810      	ldr	r0, [pc, #64]	; (8000a50 <mtZdoActiveEpRspCb+0x7c>)
 8000a10:	f7ff fe28 	bl	8000664 <log_print>
		for (i = 0; i < msg->ActiveEPCount; i++) {
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d3ed      	bcc.n	8000a02 <mtZdoActiveEpRspCb+0x2e>

		}
		log_print("\n");
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <mtZdoActiveEpRspCb+0x80>)
 8000a28:	f7ff fe1c 	bl	8000664 <log_print>
 8000a2c:	e005      	b.n	8000a3a <mtZdoActiveEpRspCb+0x66>
	}
	else {
		log_print("ActiveEpRsp Status: FAIL 0x%02X\n", msg->Status);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <mtZdoActiveEpRspCb+0x84>)
 8000a36:	f7ff fe15 	bl	8000664 <log_print>
	}

	return msg->Status;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	789b      	ldrb	r3, [r3, #2]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d4d4 	.word	0x0800d4d4
 8000a4c:	0800d4e8 	.word	0x0800d4e8
 8000a50:	0800d514 	.word	0x0800d514
 8000a54:	0800d4ac 	.word	0x0800d4ac
 8000a58:	0800d51c 	.word	0x0800d51c

08000a5c <mtZdoEndDeviceAnnceIndCb>:

static uint8_t mtZdoEndDeviceAnnceIndCb(EndDeviceAnnceIndFormat_t *msg) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	ActiveEpReqFormat_t actReq;
	actReq.DstAddr = msg->NwkAddr;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	885b      	ldrh	r3, [r3, #2]
 8000a68:	81bb      	strh	r3, [r7, #12]
	actReq.NwkAddrOfInterest = msg->NwkAddr;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	885b      	ldrh	r3, [r3, #2]
 8000a6e:	81fb      	strh	r3, [r7, #14]

	log_print("\nNew device joined network.\n");
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <mtZdoEndDeviceAnnceIndCb+0x30>)
 8000a72:	f7ff fdf7 	bl	8000664 <log_print>
	zdoActiveEpReq(&actReq);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fb10 	bl	80030a0 <zdoActiveEpReq>
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800d540 	.word	0x0800d540

08000a90 <mtAfDataConfirmCb>:
				NULL, NULL };
/********************************************************************
 * AF CALL BACK FUNCTIONS
 */

static uint8_t mtAfDataConfirmCb(DataConfirmFormat_t *msg) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <mtAfDataConfirmCb+0x18>
		log_print("Message transmited Succesfully!\n");
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <mtAfDataConfirmCb+0x2c>)
 8000aa2:	f7ff fddf 	bl	8000664 <log_print>
 8000aa6:	e002      	b.n	8000aae <mtAfDataConfirmCb+0x1e>
	}
	else {
		log_print("Message failed to transmit\n");
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <mtAfDataConfirmCb+0x30>)
 8000aaa:	f7ff fddb 	bl	8000664 <log_print>
	}
	return msg->Status;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0800d560 	.word	0x0800d560
 8000ac0:	0800d584 	.word	0x0800d584

08000ac4 <mtAfIncomingMsgCb>:

static uint8_t mtAfIncomingMsgCb(IncomingMsgFormat_t *msg) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	log_print("\nIncoming Message from Endpoint 0x%02X and Address 0x%04X:\n", msg->SrcEndpoint, msg->SrcAddr);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	799b      	ldrb	r3, [r3, #6]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	889b      	ldrh	r3, [r3, #4]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <mtAfIncomingMsgCb+0x44>)
 8000ada:	f7ff fdc3 	bl	8000664 <log_print>
	msg->Data[msg->Len] = '\0';
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7c5b      	ldrb	r3, [r3, #17]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	749a      	strb	r2, [r3, #18]
	log_print("%s\n", (char*) msg->Data);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3312      	adds	r3, #18
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <mtAfIncomingMsgCb+0x48>)
 8000af4:	f7ff fdb6 	bl	8000664 <log_print>
	log_print("\nEnter message to send or type CHANGE to change the destination \nor QUIT to exit:\n");
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <mtAfIncomingMsgCb+0x4c>)
 8000afa:	f7ff fdb3 	bl	8000664 <log_print>

	return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0800d5a0 	.word	0x0800d5a0
 8000b0c:	0800d5dc 	.word	0x0800d5dc
 8000b10:	0800d5e0 	.word	0x0800d5e0

08000b14 <mtAppCfgCommissioningNotifyCb>:
				NULL,			    //MT_AF_REFLECT_ERROR
		};

////////////////////////////////////////////////////

uint8_t mtAppCfgCommissioningNotifyCb(appCfgCommissioningNotifyFormat_t *msg) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	log_print("Commissioning notify\r\nStatus: %02x\r\nMode: %02x\r\nMode: %02x\r\n", msg->status, msg->commissioningMode1, msg->commissioningMode2);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	461a      	mov	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <mtAppCfgCommissioningNotifyCb+0x28>)
 8000b2e:	f7ff fd99 	bl	8000664 <log_print>
	return 0;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	0800d634 	.word	0x0800d634

08000b40 <mtAppCfgSetChannelCb>:

uint8_t mtAppCfgSetChannelCb(appCfgSetChannelFormat_t *msg) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	log_print("Set channel response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <mtAppCfgSetChannelCb+0x1a>
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <mtAppCfgSetChannelCb+0x30>)
 8000b58:	e000      	b.n	8000b5c <mtAppCfgSetChannelCb+0x1c>
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <mtAppCfgSetChannelCb+0x34>)
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <mtAppCfgSetChannelCb+0x38>)
 8000b60:	f7ff fd80 	bl	8000664 <log_print>
	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	0800d674 	.word	0x0800d674
 8000b74:	0800d67c 	.word	0x0800d67c
 8000b78:	0800d684 	.word	0x0800d684

08000b7c <mtAppCfgCommissioningStartCb>:

uint8_t mtAppCfgCommissioningStartCb(appCfgStartCommissioningStart_t *msg) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	log_print("Commissioning start response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <mtAppCfgCommissioningStartCb+0x1a>
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <mtAppCfgCommissioningStartCb+0x30>)
 8000b94:	e000      	b.n	8000b98 <mtAppCfgCommissioningStartCb+0x1c>
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <mtAppCfgCommissioningStartCb+0x34>)
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <mtAppCfgCommissioningStartCb+0x38>)
 8000b9c:	f7ff fd62 	bl	8000664 <log_print>
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	0800d674 	.word	0x0800d674
 8000bb0:	0800d67c 	.word	0x0800d67c
 8000bb4:	0800d6a8 	.word	0x0800d6a8

08000bb8 <znp_init_coordinator>:
		};
/////////////////////////////////////////////////

// init coordinator
// taken from https://sunmaysky.blogspot.com/2017/02/use-ztool-z-stack-30-znp-to-set-up.html
int znp_init_coordinator(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0c4      	sub	sp, #272	; 0x110
 8000bbc:	af00      	add	r7, sp, #0
	OsalNvWriteFormat_t req;
	setChannelFormat_t chn;
	startCommissioningFormat_t strt;
	ResetReqFormat_t rst;

	vTaskDelay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f009 fc63 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000bc6:	4838      	ldr	r0, [pc, #224]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000bc8:	f7ff fd4c 	bl	8000664 <log_print>

	// write startup option to clear NV when reset
	req.Id = 0x0003;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	82bb      	strh	r3, [r7, #20]
	req.Offset = 0x00;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	75bb      	strb	r3, [r7, #22]
	req.Len = 0x01;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	75fb      	strb	r3, [r7, #23]
	req.Value[0] = 0x03;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	763b      	strb	r3, [r7, #24]
	sysOsalNvWrite(&req);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fecf 	bl	8002984 <sysOsalNvWrite>

	vTaskDelay(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f009 fc4f 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000bee:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000bf0:	f7ff fd38 	bl	8000664 <log_print>

	// hard reset
	rst.Type = 0x00;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	sysResetReq(&rst);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fd63 	bl	80026c8 <sysResetReq>

	vTaskDelay(4000);
 8000c02:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c06:	f009 fc41 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000c0a:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000c0c:	f7ff fd2a 	bl	8000664 <log_print>

	// Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
	req.Id = 0x0087;
 8000c10:	2387      	movs	r3, #135	; 0x87
 8000c12:	82bb      	strh	r3, [r7, #20]
	req.Offset = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75bb      	strb	r3, [r7, #22]
	req.Len = 0x01;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
	req.Value[0] = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	763b      	strb	r3, [r7, #24]
	sysOsalNvWrite(&req);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fead 	bl	8002984 <sysOsalNvWrite>

	vTaskDelay(1000);
 8000c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2e:	f009 fc2d 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000c32:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000c34:	f7ff fd16 	bl	8000664 <log_print>

	// set primary channel to 13
	chn.primaryChannel = 1;
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_0x00002000;
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c48:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f8ec 	bl	8001e2c <appCfgSetChannel>

	vTaskDelay(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f009 fc18 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000c5e:	f7ff fd01 	bl	8000664 <log_print>

	// disable secondary channel
	chn.primaryChannel = 0;
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_NONE;
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f8d8 	bl	8001e2c <appCfgSetChannel>

	vTaskDelay(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c80:	f009 fc04 	bl	800a48c <vTaskDelay>
	log_print("----------------------\r\n");
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <znp_init_coordinator+0xf0>)
 8000c86:	f7ff fced 	bl	8000664 <log_print>

	// start commissioning using network formation
	strt.commissioningMode = CFG_COMM_MODE_NWK_FORMATION;
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2204      	movs	r2, #4
 8000c90:	701a      	strb	r2, [r3, #0]
	appCfgStartCommissioning(&strt);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f8fb 	bl	8001e92 <appCfgStartCommissioning>

	//
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	0800d6d4 	.word	0x0800d6d4

08000cac <vAppTask>:

/////////////////////////////////////////////////
void vAppTask(void *pvParameters) {
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	b0a1      	sub	sp, #132	; 0x84
 8000cb0:	af1e      	add	r7, sp, #120	; 0x78
 8000cb2:	6078      	str	r0, [r7, #4]
	log_print("System started\r\n");
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <vAppTask+0x7c>)
 8000cb6:	f7ff fcd5 	bl	8000664 <log_print>

	//Register callbacks
	sysRegisterCallbacks(mtSysCb);
 8000cba:	4e1c      	ldr	r6, [pc, #112]	; (8000d2c <vAppTask+0x80>)
 8000cbc:	466d      	mov	r5, sp
 8000cbe:	f106 0410 	add.w	r4, r6, #16
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cce:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cd6:	f002 f883 	bl	8002de0 <sysRegisterCallbacks>
	zdoRegisterCallbacks(mtZdoCb);
 8000cda:	4c15      	ldr	r4, [pc, #84]	; (8000d30 <vAppTask+0x84>)
 8000cdc:	4668      	mov	r0, sp
 8000cde:	f104 0310 	add.w	r3, r4, #16
 8000ce2:	2274      	movs	r2, #116	; 0x74
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f00a fe9b 	bl	800ba20 <memcpy>
 8000cea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cee:	f005 f83b 	bl	8005d68 <zdoRegisterCallbacks>
	afRegisterCallbacks(mtAfCb);
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <vAppTask+0x88>)
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfa:	f000 fecd 	bl	8001a98 <afRegisterCallbacks>
	appCfgRegisterCallbacks(mtAppCfgCb);
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <vAppTask+0x8c>)
 8000d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d04:	f000 ff80 	bl	8001c08 <appCfgRegisterCallbacks>

	vTaskDelay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f009 fbbe 	bl	800a48c <vTaskDelay>

	if (sysVersion() == 0) {
 8000d10:	f001 fd74 	bl	80027fc <sysVersion>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <vAppTask+0x72>
		znp_init_coordinator();
 8000d1a:	f7ff ff4d 	bl	8000bb8 <znp_init_coordinator>
		 log_print("Ping ok\r\n");
		 else
		 log_print("Ping failed\r\n");
		 */

		rpcWaitMqClientMsg(50);
 8000d1e:	2032      	movs	r0, #50	; 0x32
 8000d20:	f005 f9c4 	bl	80060ac <rpcWaitMqClientMsg>
 8000d24:	e7fb      	b.n	8000d1e <vAppTask+0x72>
 8000d26:	bf00      	nop
 8000d28:	0800d6f0 	.word	0x0800d6f0
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000038 	.word	0x20000038
 8000d34:	200000bc 	.word	0x200000bc
 8000d38:	200000d0 	.word	0x200000d0

08000d3c <vComTask>:
	}
}

void vComTask(void *pvParameters) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	// init queues
	rpcInitMq();
 8000d44:	f005 f9a8 	bl	8006098 <rpcInitMq>

	// initialize serial port
	rpcOpen();
 8000d48:	f005 f982 	bl	8006050 <rpcOpen>

	// loop
	while (1) {
		// keep procesing packets
		rpcProcess();
 8000d4c:	f005 fa06 	bl	800615c <rpcProcess>

		// always a little loop delay
		vTaskDelay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f009 fb9b 	bl	800a48c <vTaskDelay>
		rpcProcess();
 8000d56:	e7f9      	b.n	8000d4c <vComTask+0x10>

08000d58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d5e:	f005 fd07 	bl	8006770 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d62:	f000 f83b 	bl	8000ddc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d66:	f7ff fc4d 	bl	8000604 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000d6a:	f000 fa41 	bl	80011f0 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8000d6e:	f000 fa73 	bl	8001258 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	dbg_sem = xSemaphoreCreateBinary();
 8000d72:	2203      	movs	r2, #3
 8000d74:	2100      	movs	r1, #0
 8000d76:	2001      	movs	r0, #1
 8000d78:	f008 fc70 	bl	800965c <xQueueGenericCreate>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <main+0x70>)
 8000d80:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(dbg_sem);
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <main+0x70>)
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f008 fcc8 	bl	8009720 <xQueueGenericSend>

	xTaskCreate(vAppTask, "APP", 512, NULL, 6, NULL);
 8000d90:	2300      	movs	r3, #0
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2306      	movs	r3, #6
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9e:	490b      	ldr	r1, [pc, #44]	; (8000dcc <main+0x74>)
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <main+0x78>)
 8000da2:	f009 fa2e 	bl	800a202 <xTaskCreate>
	xTaskCreate(vComTask, "COM", 256, NULL, 5, NULL);
 8000da6:	2300      	movs	r3, #0
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2305      	movs	r3, #5
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <main+0x7c>)
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <main+0x80>)
 8000db8:	f009 fa23 	bl	800a202 <xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000dbc:	f7ff fc1a 	bl	80005f4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000dc0:	f008 fb28 	bl	8009414 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000dc4:	e7fe      	b.n	8000dc4 <main+0x6c>
 8000dc6:	bf00      	nop
 8000dc8:	200003cc 	.word	0x200003cc
 8000dcc:	0800d704 	.word	0x0800d704
 8000dd0:	08000cad 	.word	0x08000cad
 8000dd4:	0800d708 	.word	0x0800d708
 8000dd8:	08000d3d 	.word	0x08000d3d

08000ddc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ba      	sub	sp, #232	; 0xe8
 8000de0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000de2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de6:	2244      	movs	r2, #68	; 0x44
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f00a fe23 	bl	800ba36 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000df0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	228c      	movs	r2, #140	; 0x8c
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00a fe15 	bl	800ba36 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2340      	movs	r3, #64	; 0x40
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000e32:	2314      	movs	r3, #20
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f005 ffac 	bl	8006dac <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x82>
		Error_Handler();
 8000e5a:	f000 f849 	bl	8000ef0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000e7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e80:	2104      	movs	r1, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 fbb8 	bl	80075f8 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xb6>
		Error_Handler();
 8000e8e:	f000 f82f 	bl	8000ef0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1;
 8000e92:	2322      	movs	r3, #34	; 0x22
 8000e94:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fddf 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xd4>
		Error_Handler();
 8000eac:	f000 f820 	bl	8000ef0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000eb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb4:	f005 ff14 	bl	8006ce0 <HAL_PWREx_ControlVoltageScaling>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xe6>
		Error_Handler();
 8000ebe:	f000 f817 	bl	8000ef0 <Error_Handler>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	37e8      	adds	r7, #232	; 0xe8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ede:	f005 fc5f 	bl	80067a0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6613      	str	r3, [r2, #96]	; 0x60
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	210f      	movs	r1, #15
 8000f3a:	f06f 0001 	mvn.w	r0, #1
 8000f3e:	f005 fd05 	bl	800694c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	2019      	movs	r0, #25
 8000f66:	f005 fcf1 	bl	800694c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f005 fd0a 	bl	8006984 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_InitTick+0x9c>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_InitTick+0x9c>)
 8000f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_InitTick+0x9c>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f88:	f107 0210 	add.w	r2, r7, #16
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fcd4 	bl	8007940 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f98:	f006 fcbc 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 8000f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fce:	f007 fa0b 	bl	80083e8 <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d104      	bne.n	8000fe2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fda:	f007 fa3b 	bl	8008454 <HAL_TIM_Base_Start_IT>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3730      	adds	r7, #48	; 0x30
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	431bde83 	.word	0x431bde83
 8000ff4:	20002f58 	.word	0x20002f58
 8000ff8:	40012c00 	.word	0x40012c00

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001036:	f007 fa37 	bl	80084a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20002f58 	.word	0x20002f58

08001044 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
#endif
  rpcTransportISR();
 8001048:	f004 ff56 	bl	8005ef8 <rpcTransportISR>
  /* USER CODE END LPUART1_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001062:	f3af 8000 	nop.w
 8001066:	4601      	mov	r1, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	b2ca      	uxtb	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <_read+0x12>
	}

return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e009      	b.n	80010b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf1      	blt.n	800109c <_write+0x12>
	}
	return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_close>:

int _close(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_isatty>:

int _isatty(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x50>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x16>
		heap_end = &end;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <_sbrk+0x50>)
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <_sbrk+0x54>)
 8001140:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <_sbrk+0x50>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <_sbrk+0x50>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	466a      	mov	r2, sp
 8001152:	4293      	cmp	r3, r2
 8001154:	d907      	bls.n	8001166 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001156:	f00a fc29 	bl	800b9ac <__errno>
 800115a:	4602      	mov	r2, r0
 800115c:	230c      	movs	r3, #12
 800115e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	e006      	b.n	8001174 <_sbrk+0x48>
	}

	heap_end += incr;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <_sbrk+0x50>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <_sbrk+0x50>)
 8001170:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200004d0 	.word	0x200004d0
 8001180:	200031a8 	.word	0x200031a8

08001184 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <SystemInit+0x64>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <SystemInit+0x64>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <SystemInit+0x68>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <SystemInit+0x68>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <SystemInit+0x68>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <SystemInit+0x68>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <SystemInit+0x68>)
 80011b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <SystemInit+0x68>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <SystemInit+0x68>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <SystemInit+0x68>)
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <SystemInit+0x68>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SystemInit+0x64>)
 80011d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011da:	609a      	str	r2, [r3, #8]
#endif
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <MX_LPUART1_UART_Init+0x64>)
 80011f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001228:	2230      	movs	r2, #48	; 0x30
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 800122e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_LPUART1_UART_Init+0x60>)
 800123e:	f007 fb33 	bl	80088a8 <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001248:	f7ff fe52 	bl	8000ef0 <Error_Handler>
  }

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20002f98 	.word	0x20002f98
 8001254:	40008000 	.word	0x40008000

08001258 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <MX_USART2_UART_Init+0x6c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 800129c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 80012a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART2_UART_Init+0x68>)
 80012ac:	f007 fafc 	bl	80088a8 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80012b6:	f7ff fe1b 	bl	8000ef0 <Error_Handler>
  }

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20003018 	.word	0x20003018
 80012c4:	40004400 	.word	0x40004400

080012c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_UART_MspInit+0x128>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d133      	bne.n	8001352 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	4a41      	ldr	r2, [pc, #260]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800131a:	f005 fd37 	bl	8006d8c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800131e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001330:	2308      	movs	r3, #8
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <HAL_UART_MspInit+0x130>)
 800133c:	f005 fb30 	bl	80069a0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2105      	movs	r1, #5
 8001344:	2046      	movs	r0, #70	; 0x46
 8001346:	f005 fb01 	bl	800694c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800134a:	2046      	movs	r0, #70	; 0x46
 800134c:	f005 fb1a 	bl	8006984 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001350:	e049      	b.n	80013e6 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <HAL_UART_MspInit+0x134>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d144      	bne.n	80013e6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_UART_MspInit+0x12c>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a4:	2340      	movs	r3, #64	; 0x40
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b4:	2307      	movs	r3, #7
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <HAL_UART_MspInit+0x138>)
 80013c0:	f005 faee 	bl	80069a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c4:	2304      	movs	r3, #4
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d4:	2307      	movs	r3, #7
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f005 fadd 	bl	80069a0 <HAL_GPIO_Init>
}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40008000 	.word	0x40008000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48001800 	.word	0x48001800
 80013fc:	40004400 	.word	0x40004400
 8001400:	48000c00 	.word	0x48000c00

08001404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001408:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800141a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
	ldr	r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001422:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopForever+0x16>)
	cmp	r2, r3
 800142a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800142e:	f7ff fea9 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f00a fac1 	bl	800b9b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001436:	f7ff fc8f 	bl	8000d58 <main>

0800143a <LoopForever>:

LoopForever:
    b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001440:	0800eea4 	.word	0x0800eea4
	ldr	r0, =_sdata
 8001444:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001448:	20000150 	.word	0x20000150
	ldr	r2, =_sbss
 800144c:	20000150 	.word	0x20000150
	ldr	r3, = _ebss
 8001450:	200031a4 	.word	0x200031a4

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <processDataConfirm>:
		return 1;
	}
}

static void processDataConfirm(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataConfirm)
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <processDataConfirm+0x68>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d025      	beq.n	80014b8 <processDataConfirm+0x60>
	{
		uint8_t msgIdx = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	73fb      	strb	r3, [r7, #15]
		DataConfirmFormat_t rsp;
		if (rpcLen < 3)
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d802      	bhi.n	800147c <processDataConfirm+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <processDataConfirm+0x6c>)
 8001478:	f00a fc02 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	73fa      	strb	r2, [r7, #15]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	733b      	strb	r3, [r7, #12]
		rsp.Endpoint = rpcBuff[msgIdx++];
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	73fa      	strb	r2, [r7, #15]
 8001492:	461a      	mov	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	737b      	strb	r3, [r7, #13]
		rsp.TransId = rpcBuff[msgIdx++];
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	73fa      	strb	r2, [r7, #15]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	73bb      	strb	r3, [r7, #14]

		mtAfCbs.pfnAfDataConfirm(&rsp);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <processDataConfirm+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f107 020c 	add.w	r2, r7, #12
 80014b4:	4610      	mov	r0, r2
 80014b6:	4798      	blx	r3
	}
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200004d4 	.word	0x200004d4
 80014c4:	0800d730 	.word	0x0800d730

080014c8 <processIncomingMsg>:

static void processIncomingMsg(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a2      	sub	sp, #136	; 0x88
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsg)
 80014d4:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <processIncomingMsg+0x1d8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80dc 	beq.w	8001696 <processIncomingMsg+0x1ce>
	{
		uint8_t msgIdx = 2;
 80014de:	2302      	movs	r3, #2
 80014e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		IncomingMsgFormat_t rsp;
		if (rpcLen < 17)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d802      	bhi.n	80014f0 <processIncomingMsg+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80014ea:	486e      	ldr	r0, [pc, #440]	; (80016a4 <processIncomingMsg+0x1dc>)
 80014ec:	f00a fbc8 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80014f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001500:	3301      	adds	r3, #1
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	4413      	add	r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001514:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001518:	3302      	adds	r3, #2
 800151a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800151e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800152e:	3301      	adds	r3, #1
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	440b      	add	r3, r1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001542:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001546:	3302      	adds	r3, #2
 8001548:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800154c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b29a      	uxth	r2, r3
 8001558:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800155c:	3301      	adds	r3, #1
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	440b      	add	r3, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8001570:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001574:	3302      	adds	r3, #2
 8001576:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 800157a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	73bb      	strb	r3, [r7, #14]
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 800158e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	73fb      	strb	r3, [r7, #15]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 80015a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	743b      	strb	r3, [r7, #16]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 80015b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	747b      	strb	r3, [r7, #17]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 80015ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	74bb      	strb	r3, [r7, #18]
		rsp.TimeStamp = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
		uint8_t i;
		for (i = 0; i < 4; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80015e8:	e015      	b.n	8001616 <processIncomingMsg+0x14e>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 80015ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	409a      	lsls	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 4; i++)
 800160c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001616:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800161a:	2b03      	cmp	r3, #3
 800161c:	d9e5      	bls.n	80015ea <processIncomingMsg+0x122>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 800161e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	763b      	strb	r3, [r7, #24]
		rsp.Len = rpcBuff[msgIdx++];
 8001632:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	767b      	strb	r3, [r7, #25]
		if (rpcLen > 17)
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	2b11      	cmp	r3, #17
 800164a:	d91e      	bls.n	800168a <processIncomingMsg+0x1c2>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001652:	e014      	b.n	800167e <processIncomingMsg+0x1b6>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 8001654:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	f107 021a 	add.w	r2, r7, #26
 800166a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800166e:	4413      	add	r3, r2
 8001670:	460a      	mov	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8001674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001678:	3301      	adds	r3, #1
 800167a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800167e:	7e7b      	ldrb	r3, [r7, #25]
 8001680:	461a      	mov	r2, r3
 8001682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001686:	4293      	cmp	r3, r2
 8001688:	d3e4      	bcc.n	8001654 <processIncomingMsg+0x18c>
			}
		}
		mtAfCbs.pfnAfIncomingMsg(&rsp);
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <processIncomingMsg+0x1d8>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f107 0208 	add.w	r2, r7, #8
 8001692:	4610      	mov	r0, r2
 8001694:	4798      	blx	r3
	}
}
 8001696:	bf00      	nop
 8001698:	3788      	adds	r7, #136	; 0x88
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200004d4 	.word	0x200004d4
 80016a4:	0800d730 	.word	0x0800d730

080016a8 <processIncomingMsgExt>:

static void processIncomingMsgExt(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80016a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016ac:	b0a7      	sub	sp, #156	; 0x9c
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsgExt)
 80016b6:	4b99      	ldr	r3, [pc, #612]	; (800191c <processIncomingMsgExt+0x274>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8129 	beq.w	8001912 <processIncomingMsgExt+0x26a>
	{
		uint8_t msgIdx = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		IncomingMsgExtFormat_t rsp;
		if (rpcLen < 27)
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	2b1a      	cmp	r3, #26
 80016ca:	d802      	bhi.n	80016d2 <processIncomingMsgExt+0x2a>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80016cc:	4894      	ldr	r0, [pc, #592]	; (8001920 <processIncomingMsgExt+0x278>)
 80016ce:	f00a fad7 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80016d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016e2:	3301      	adds	r3, #1
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	440b      	add	r3, r1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80016f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016fa:	3302      	adds	r3, #2
 80016fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001700:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001710:	3301      	adds	r3, #1
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	440b      	add	r3, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b29b      	uxth	r3, r3
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001724:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001728:	3302      	adds	r3, #2
 800172a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.SrcAddrMode = rpcBuff[msgIdx++];
 800172e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	733b      	strb	r3, [r7, #12]
		rsp.SrcAddr = 0;
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001754:	e034      	b.n	80017c0 <processIncomingMsgExt+0x118>
		{
			if ((rsp.SrcAddrMode == 2 && i < 2) || rsp.SrcAddrMode == 3)
 8001756:	7b3b      	ldrb	r3, [r7, #12]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d103      	bne.n	8001764 <processIncomingMsgExt+0xbc>
 800175c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001760:	2b01      	cmp	r3, #1
 8001762:	d902      	bls.n	800176a <processIncomingMsgExt+0xc2>
 8001764:	7b3b      	ldrb	r3, [r7, #12]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d120      	bne.n	80017ac <processIncomingMsgExt+0x104>
			{
				rsp.SrcAddr |= ((uint64_t) rpcBuff[msgIdx]) << (i * 8);
 800176a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800176e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 8001782:	00c9      	lsls	r1, r1, #3
 8001784:	f1a1 0620 	sub.w	r6, r1, #32
 8001788:	f1c1 0020 	rsb	r0, r1, #32
 800178c:	fa03 f501 	lsl.w	r5, r3, r1
 8001790:	fa02 f606 	lsl.w	r6, r2, r6
 8001794:	4335      	orrs	r5, r6
 8001796:	fa22 f000 	lsr.w	r0, r2, r0
 800179a:	4305      	orrs	r5, r0
 800179c:	fa02 f401 	lsl.w	r4, r2, r1
 80017a0:	ea48 0204 	orr.w	r2, r8, r4
 80017a4:	ea49 0305 	orr.w	r3, r9, r5
 80017a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
			}
			msgIdx++;
 80017ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		for (i = 0; i < 8; i++)
 80017b6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80017c0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017c4:	2b07      	cmp	r3, #7
 80017c6:	d9c6      	bls.n	8001756 <processIncomingMsgExt+0xae>
		}

		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 80017c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	763b      	strb	r3, [r7, #24]
		rsp.SrcPanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80017dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017ec:	3301      	adds	r3, #1
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	440b      	add	r3, r1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 8001800:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001804:	3302      	adds	r3, #2
 8001806:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 800180a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	773b      	strb	r3, [r7, #28]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 800181e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	777b      	strb	r3, [r7, #29]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 8001832:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	77bb      	strb	r3, [r7, #30]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8001846:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	77fb      	strb	r3, [r7, #31]
		rsp.TimeStamp = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001864:	e015      	b.n	8001892 <processIncomingMsgExt+0x1ea>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8001866:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	409a      	lsls	r2, r3
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	4313      	orrs	r3, r2
 8001886:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8001888:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800188c:	3301      	adds	r3, #1
 800188e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001892:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9e5      	bls.n	8001866 <processIncomingMsgExt+0x1be>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 800189a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rsp.Len = rpcBuff[msgIdx++];
 80018b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t ind;
		for (ind = 0; ind < rsp.Len; ind++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018cc:	e014      	b.n	80018f8 <processIncomingMsgExt+0x250>
		{
			rsp.Data[ind] = rpcBuff[msgIdx++];
 80018ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	7819      	ldrb	r1, [r3, #0]
 80018e0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80018e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e8:	4413      	add	r3, r2
 80018ea:	460a      	mov	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
		for (ind = 0; ind < rsp.Len; ind++)
 80018ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f2:	3301      	adds	r3, #1
 80018f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018fc:	461a      	mov	r2, r3
 80018fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001902:	4293      	cmp	r3, r2
 8001904:	d3e3      	bcc.n	80018ce <processIncomingMsgExt+0x226>
		}

		mtAfCbs.pfnAfIncomingMsgExt(&rsp);
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <processIncomingMsgExt+0x274>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f107 0208 	add.w	r2, r7, #8
 800190e:	4610      	mov	r0, r2
 8001910:	4798      	blx	r3
	}
}
 8001912:	bf00      	nop
 8001914:	379c      	adds	r7, #156	; 0x9c
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800191c:	200004d4 	.word	0x200004d4
 8001920:	0800d730 	.word	0x0800d730

08001924 <processDataRetrieveSrsp>:
		return 1;
	}
}

static void processDataRetrieveSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0c4      	sub	sp, #272	; 0x110
 8001928:	af00      	add	r7, sp, #0
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	6018      	str	r0, [r3, #0]
 800192e:	460a      	mov	r2, r1
 8001930:	1cfb      	adds	r3, r7, #3
 8001932:	701a      	strb	r2, [r3, #0]
	if (mtAfCbs.pfnAfDataRetrieveSrsp)
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <processDataRetrieveSrsp+0xc4>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d050      	beq.n	80019de <processDataRetrieveSrsp+0xba>
	{
		uint8_t msgIdx = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		DataRetrieveSrspFormat_t rsp;
		if (rpcLen < 2)
 8001942:	1cfb      	adds	r3, r7, #3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d802      	bhi.n	8001950 <processDataRetrieveSrsp+0x2c>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800194a:	4828      	ldr	r0, [pc, #160]	; (80019ec <processDataRetrieveSrsp+0xc8>)
 800194c:	f00a f998 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001950:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800195a:	461a      	mov	r2, r3
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4413      	add	r3, r2
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	701a      	strb	r2, [r3, #0]
		rsp.Length = rpcBuff[msgIdx++];
 800196a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001974:	461a      	mov	r2, r3
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2)
 8001984:	1cfb      	adds	r3, r7, #3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d922      	bls.n	80019d2 <processDataRetrieveSrsp+0xae>
		{
			uint32_t i;
			for (i = 0; i < rsp.Length; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001992:	e016      	b.n	80019c2 <processDataRetrieveSrsp+0x9e>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 8001994:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800199e:	461a      	mov	r2, r3
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	7819      	ldrb	r1, [r3, #0]
 80019a8:	f107 020c 	add.w	r2, r7, #12
 80019ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	460a      	mov	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Length; i++)
 80019b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019bc:	3301      	adds	r3, #1
 80019be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	461a      	mov	r2, r3
 80019ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d3e0      	bcc.n	8001994 <processDataRetrieveSrsp+0x70>
			}
		}
		mtAfCbs.pfnAfDataRetrieveSrsp(&rsp);
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <processDataRetrieveSrsp+0xc4>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f107 020c 	add.w	r2, r7, #12
 80019da:	4610      	mov	r0, r2
 80019dc:	4798      	blx	r3
	}
}
 80019de:	bf00      	nop
 80019e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200004d4 	.word	0x200004d4
 80019ec:	0800d730 	.word	0x0800d730

080019f0 <processReflectError>:
		return 1;
	}
}

static void processReflectError(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfReflectError)
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <processReflectError+0xa0>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d040      	beq.n	8001a86 <processReflectError+0x96>
	{
		uint8_t msgIdx = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	73fb      	strb	r3, [r7, #15]
		ReflectErrorFormat_t rsp;
		if (rpcLen < 6)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d802      	bhi.n	8001a14 <processReflectError+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001a0e:	4821      	ldr	r0, [pc, #132]	; (8001a94 <processReflectError+0xa4>)
 8001a10:	f00a f936 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	73fa      	strb	r2, [r7, #15]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	723b      	strb	r3, [r7, #8]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	73fa      	strb	r2, [r7, #15]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	727b      	strb	r3, [r7, #9]
		rsp.TransId = rpcBuff[msgIdx++];
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	73fa      	strb	r2, [r7, #15]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	72bb      	strb	r3, [r7, #10]
		rsp.DstAddrMode = rpcBuff[msgIdx++];
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	73fa      	strb	r2, [r7, #15]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	72fb      	strb	r3, [r7, #11]
		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	3301      	adds	r3, #1
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	440b      	add	r3, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3302      	adds	r3, #2
 8001a78:	73fb      	strb	r3, [r7, #15]

		mtAfCbs.pfnAfReflectError(&rsp);
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <processReflectError+0xa0>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f107 0208 	add.w	r2, r7, #8
 8001a82:	4610      	mov	r0, r2
 8001a84:	4798      	blx	r3
	}
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200004d4 	.word	0x200004d4
 8001a94:	0800d730 	.word	0x0800d730

08001a98 <afRegisterCallbacks>:
 * @param
 *
 * @return
 */
void afRegisterCallbacks(mtAfCb_t cbs)
{
 8001a98:	b084      	sub	sp, #16
 8001a9a:	b4b0      	push	{r4, r5, r7}
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	f107 040c 	add.w	r4, r7, #12
 8001aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtAfCbs, &cbs, sizeof(mtAfCb_t));
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <afRegisterCallbacks+0x28>)
 8001aa8:	461c      	mov	r4, r3
 8001aaa:	f107 050c 	add.w	r5, r7, #12
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	6023      	str	r3, [r4, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bcb0      	pop	{r4, r5, r7}
 8001abc:	b004      	add	sp, #16
 8001abe:	4770      	bx	lr
 8001ac0:	200004d4 	.word	0x200004d4

08001ac4 <afProcess>:
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *
 * @return
 *************************************************************************************************/
void afProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
 8001ad4:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n",
 8001adc:	492c      	ldr	r1, [pc, #176]	; (8001b90 <afProcess+0xcc>)
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f004 f9b8 	bl	8005e54 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001aec:	2b60      	cmp	r3, #96	; 0x60
 8001aee:	d105      	bne.n	8001afc <afProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f857 	bl	8001ba8 <processSrsp>
			        "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 8001afa:	e044      	b.n	8001b86 <afProcess+0xc2>
		switch (rpcBuff[1])
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3b80      	subs	r3, #128	; 0x80
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d833      	bhi.n	8001b70 <afProcess+0xac>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <afProcess+0x4c>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b35 	.word	0x08001b35
 8001b18:	08001b49 	.word	0x08001b49
 8001b1c:	08001b5d 	.word	0x08001b5d
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_CONFIRM\n");
 8001b20:	491c      	ldr	r1, [pc, #112]	; (8001b94 <afProcess+0xd0>)
 8001b22:	2004      	movs	r0, #4
 8001b24:	f004 f996 	bl	8005e54 <dbg_print>
			processDataConfirm(rpcBuff, rpcLen);
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fc93 	bl	8001458 <processDataConfirm>
			break;
 8001b32:	e028      	b.n	8001b86 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_INCOMING_MSG\n");
 8001b34:	4918      	ldr	r1, [pc, #96]	; (8001b98 <afProcess+0xd4>)
 8001b36:	2004      	movs	r0, #4
 8001b38:	f004 f98c 	bl	8005e54 <dbg_print>
			processIncomingMsg(rpcBuff, rpcLen);
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fcc1 	bl	80014c8 <processIncomingMsg>
			break;
 8001b46:	e01e      	b.n	8001b86 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8001b48:	4914      	ldr	r1, [pc, #80]	; (8001b9c <afProcess+0xd8>)
 8001b4a:	2004      	movs	r0, #4
 8001b4c:	f004 f982 	bl	8005e54 <dbg_print>
			processIncomingMsgExt(rpcBuff, rpcLen);
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fda7 	bl	80016a8 <processIncomingMsgExt>
			break;
 8001b5a:	e014      	b.n	8001b86 <afProcess+0xc2>
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_REFLECT_ERROR\n");
 8001b5c:	4910      	ldr	r1, [pc, #64]	; (8001ba0 <afProcess+0xdc>)
 8001b5e:	2004      	movs	r0, #4
 8001b60:	f004 f978 	bl	8005e54 <dbg_print>
			processReflectError(rpcBuff, rpcLen);
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff41 	bl	80019f0 <processReflectError>
			break;
 8001b6e:	e00a      	b.n	8001b86 <afProcess+0xc2>
			        "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8001b74:	461a      	mov	r2, r3
			        rpcBuff[1]);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8001b7c:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <afProcess+0xe0>)
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f004 f968 	bl	8005e54 <dbg_print>
			break;
 8001b84:	bf00      	nop
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800d744 	.word	0x0800d744
 8001b94:	0800d76c 	.word	0x0800d76c
 8001b98:	0800d78c 	.word	0x0800d78c
 8001b9c:	0800d7ac 	.word	0x0800d7ac
 8001ba0:	0800d7d0 	.word	0x0800d7d0
 8001ba4:	0800d7f0 	.word	0x0800d7f0

08001ba8 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <processSrsp+0x54>)
 8001bbc:	f009 ff30 	bl	800ba20 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d109      	bne.n	8001bde <processSrsp+0x36>
	{
	case MT_AF_DATA_RETRIEVE:
		dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_RETRIEVE\n");
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <processSrsp+0x58>)
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f004 f941 	bl	8005e54 <dbg_print>
		processDataRetrieveSrsp(rpcBuff, rpcLen);
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fea4 	bl	8001924 <processDataRetrieveSrsp>
		break;
 8001bdc:	e00a      	b.n	8001bf4 <processSrsp+0x4c>
	default:
		dbg_print(PRINT_LEVEL_INFO,
		        "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0],
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001be2:	461a      	mov	r2, r3
		        rpcBuff[1]);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 8001bea:	4906      	ldr	r1, [pc, #24]	; (8001c04 <processSrsp+0x5c>)
 8001bec:	2002      	movs	r0, #2
 8001bee:	f004 f931 	bl	8005e54 <dbg_print>
		break;
 8001bf2:	bf00      	nop
	}

}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000309c 	.word	0x2000309c
 8001c00:	0800d820 	.word	0x0800d820
 8001c04:	0800d840 	.word	0x0800d840

08001c08 <appCfgRegisterCallbacks>:
#include <string.h>
#include <stdio.h>

static mtAppCfgCb_t mtAppCfgCbs;

void appCfgRegisterCallbacks(mtAppCfgCb_t cbs) {
 8001c08:	b490      	push	{r4, r7}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&mtAppCfgCbs, &cbs, sizeof(mtAppCfgCb_t));
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <appCfgRegisterCallbacks+0x24>)
 8001c16:	461c      	mov	r4, r3
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc90      	pop	{r4, r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	200004e8 	.word	0x200004e8

08001c30 <processCommissioningNotify>:

static void processCommissioningNotify(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t) {
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <processCommissioningNotify+0x68>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d025      	beq.n	8001c90 <processCommissioningNotify+0x60>
		uint8_t msgIdx = 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	73fb      	strb	r3, [r7, #15]
		appCfgCommissioningNotifyFormat_t rsp;

		// size error?
		if (rpcLen < 3) {
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d802      	bhi.n	8001c54 <processCommissioningNotify+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <processCommissioningNotify+0x6c>)
 8001c50:	f00a f816 	bl	800bc80 <puts>
		}

		// copy command
		rsp.status = rpcBuff[msgIdx++];
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	73fa      	strb	r2, [r7, #15]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	733b      	strb	r3, [r7, #12]
		rsp.commissioningMode1 = rpcBuff[msgIdx++];
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	73fa      	strb	r2, [r7, #15]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	737b      	strb	r3, [r7, #13]
		rsp.commissioningMode2 = rpcBuff[msgIdx++];
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	73fa      	strb	r2, [r7, #15]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	73bb      	strb	r3, [r7, #14]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t(&rsp);
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <processCommissioningNotify+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f107 020c 	add.w	r2, r7, #12
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4798      	blx	r3
	}
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200004e8 	.word	0x200004e8
 8001c9c:	0800d86c 	.word	0x0800d86c

08001ca0 <processSetChannel>:

static void processSetChannel(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgSetChannelCb_t) {
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <processSetChannel+0x48>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <processSetChannel+0x40>
		uint8_t msgIdx = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	73fb      	strb	r3, [r7, #15]
		appCfgSetChannelFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <processSetChannel+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <processSetChannel+0x4c>)
 8001cc0:	f009 ffde 	bl	800bc80 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	73fa      	strb	r2, [r7, #15]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgSetChannelCb_t(&rsp);
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <processSetChannel+0x48>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4798      	blx	r3
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200004e8 	.word	0x200004e8
 8001cec:	0800d86c 	.word	0x0800d86c

08001cf0 <processStartCommissioning>:

static void processStartCommissioning(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t) {
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <processStartCommissioning+0x48>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <processStartCommissioning+0x40>
		uint8_t msgIdx = 2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	73fb      	strb	r3, [r7, #15]
		appCfgStartCommissioningStart_t rsp;

		// size error?
		if (rpcLen < 1) {
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <processStartCommissioning+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <processStartCommissioning+0x4c>)
 8001d10:	f009 ffb6 	bl	800bc80 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	73fa      	strb	r2, [r7, #15]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t(&rsp);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <processStartCommissioning+0x48>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4798      	blx	r3
	}
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200004e8 	.word	0x200004e8
 8001d3c:	0800d86c 	.word	0x0800d86c

08001d40 <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	//memcpy(srspRpcBuff, rpcBuff, rpcLen);

	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d00b      	beq.n	8001d6e <processSrsp+0x2e>
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d113      	bne.n	8001d82 <processSrsp+0x42>
		case MT_APP_CFG_SRSP_SET_CHANNEL:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: SET_CHANNEL_SRSP\n");
 8001d5a:	4911      	ldr	r1, [pc, #68]	; (8001da0 <processSrsp+0x60>)
 8001d5c:	2004      	movs	r0, #4
 8001d5e:	f004 f879 	bl	8005e54 <dbg_print>
			processSetChannel(rpcBuff, rpcLen);
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff9a 	bl	8001ca0 <processSetChannel>
			break;
 8001d6c:	e014      	b.n	8001d98 <processSrsp+0x58>
		case MT_APP_CFG_SRSP_START_COMMISSIONING:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: START_COMMISSIONING_SRSP\n");
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <processSrsp+0x64>)
 8001d70:	2004      	movs	r0, #4
 8001d72:	f004 f86f 	bl	8005e54 <dbg_print>
			processStartCommissioning(rpcBuff, rpcLen);
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffb8 	bl	8001cf0 <processStartCommissioning>
			break;
 8001d80:	e00a      	b.n	8001d98 <processSrsp+0x58>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4906      	ldr	r1, [pc, #24]	; (8001da8 <processSrsp+0x68>)
 8001d90:	2002      	movs	r0, #2
 8001d92:	f004 f85f 	bl	8005e54 <dbg_print>
			break;
 8001d96:	bf00      	nop
	}

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0800d880 	.word	0x0800d880
 8001da4:	0800d8a4 	.word	0x0800d8a4
 8001da8:	0800d8d0 	.word	0x0800d8d0

08001dac <appCfgProcess>:

void appCfgProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4916      	ldr	r1, [pc, #88]	; (8001e20 <appCfgProcess+0x74>)
 8001dc6:	2004      	movs	r0, #4
 8001dc8:	f004 f844 	bl	8005e54 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d105      	bne.n	8001de4 <appCfgProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffaf 	bl	8001d40 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8001de2:	e018      	b.n	8001e16 <appCfgProcess+0x6a>
		switch (rpcBuff[1]) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3301      	adds	r3, #1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d108      	bne.n	8001e00 <appCfgProcess+0x54>
				dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: MT_AF_DATA_CONFIRM\n");
 8001dee:	490d      	ldr	r1, [pc, #52]	; (8001e24 <appCfgProcess+0x78>)
 8001df0:	2004      	movs	r0, #4
 8001df2:	f004 f82f 	bl	8005e54 <dbg_print>
				processCommissioningNotify(rpcBuff, rpcLen);
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff18 	bl	8001c30 <processCommissioningNotify>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4906      	ldr	r1, [pc, #24]	; (8001e28 <appCfgProcess+0x7c>)
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f004 f820 	bl	8005e54 <dbg_print>
				break;
 8001e14:	bf00      	nop
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	0800d8fc 	.word	0x0800d8fc
 8001e24:	0800d928 	.word	0x0800d928
 8001e28:	0800d94c 	.word	0x0800d94c

08001e2c <appCfgSetChannel>:

uint8_t appCfgSetChannel(setChannelFormat_t *req) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[5];

	// build command
	payload[0] = (req->primaryChannel) ? 1 : 0;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	723b      	strb	r3, [r7, #8]
	payload[1] = req->channel & 0xFF;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	727b      	strb	r3, [r7, #9]
	payload[2] = (req->channel >> 8) & 0xFF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	72bb      	strb	r3, [r7, #10]
	payload[3] = (req->channel >> 16) & 0xFF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	72fb      	strb	r3, [r7, #11]
	payload[4] = (req->channel >> 24) & 0xFF;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0e1b      	lsrs	r3, r3, #24
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x08, payload, 5);
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2305      	movs	r3, #5
 8001e70:	2108      	movs	r1, #8
 8001e72:	202f      	movs	r0, #47	; 0x2f
 8001e74:	f004 faa6 	bl	80063c4 <rpcSendFrame>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <appCfgSetChannel+0x5c>
		rpcWaitMqClientMsg(50);
 8001e82:	2032      	movs	r0, #50	; 0x32
 8001e84:	f004 f912 	bl	80060ac <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <appCfgStartCommissioning>:

uint8_t appCfgStartCommissioning(startCommissioningFormat_t *req) {
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[1];

	// build command
	payload[0] = req->commissioningMode;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x05, payload, 1);
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	202f      	movs	r0, #47	; 0x2f
 8001eaa:	f004 fa8b 	bl	80063c4 <rpcSendFrame>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <appCfgStartCommissioning+0x2c>
		rpcWaitMqClientMsg(50);
 8001eb8:	2032      	movs	r0, #50	; 0x32
 8001eba:	f004 f8f7 	bl	80060ac <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <processReadConfigurationSrsp>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReadConfigurationSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0a6      	sub	sp, #152	; 0x98
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReadConfigurationSrsp)
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <processReadConfigurationSrsp+0xbc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d04e      	beq.n	8001f7a <processReadConfigurationSrsp+0xb2>
	{
		uint8_t msgIdx = 2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReadConfigurationSrspFormat_t rsp;
		if (rpcLen < 3)
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d802      	bhi.n	8001eee <processReadConfigurationSrsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <processReadConfigurationSrsp+0xc0>)
 8001eea:	f009 fec9 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001eee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	733b      	strb	r3, [r7, #12]
		rsp.ConfigId = rpcBuff[msgIdx++];
 8001f02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	737b      	strb	r3, [r7, #13]
		rsp.Len = rpcBuff[msgIdx++];
 8001f16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 3)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d91e      	bls.n	8001f6e <processReadConfigurationSrsp+0xa6>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f36:	e014      	b.n	8001f62 <processReadConfigurationSrsp+0x9a>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 8001f38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	7819      	ldrb	r1, [r3, #0]
 8001f4a:	f107 020f 	add.w	r2, r7, #15
 8001f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f52:	4413      	add	r3, r2
 8001f54:	460a      	mov	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d3e4      	bcc.n	8001f38 <processReadConfigurationSrsp+0x70>
			}
		}
		mtSapiCbs.pfnSapiReadConfigurationSrsp(&rsp);
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <processReadConfigurationSrsp+0xbc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	4610      	mov	r0, r2
 8001f78:	4798      	blx	r3
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3798      	adds	r7, #152	; 0x98
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200004f4 	.word	0x200004f4
 8001f88:	0800d9a0 	.word	0x0800d9a0

08001f8c <processGetDeviceInfoSrsp>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processGetDeviceInfoSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiGetDeviceInfoSrsp)
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <processGetDeviceInfoSrsp+0x74>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02b      	beq.n	8001ff8 <processGetDeviceInfoSrsp+0x6c>
	{
		uint8_t msgIdx = 2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	75fb      	strb	r3, [r7, #23]
		GetDeviceInfoSrspFormat_t rsp;
		if (rpcLen < 9)
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d802      	bhi.n	8001fb0 <processGetDeviceInfoSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8001faa:	4816      	ldr	r0, [pc, #88]	; (8002004 <processGetDeviceInfoSrsp+0x78>)
 8001fac:	f009 fe68 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Param = rpcBuff[msgIdx++];
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	75fa      	strb	r2, [r7, #23]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	733b      	strb	r3, [r7, #12]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75bb      	strb	r3, [r7, #22]
 8001fc4:	e00f      	b.n	8001fe6 <processGetDeviceInfoSrsp+0x5a>
		{
			rsp.Value[i] = rpcBuff[msgIdx++];
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	75fa      	strb	r2, [r7, #23]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	441a      	add	r2, r3
 8001fd2:	7dbb      	ldrb	r3, [r7, #22]
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	f107 0118 	add.w	r1, r7, #24
 8001fda:	440b      	add	r3, r1
 8001fdc:	f803 2c0b 	strb.w	r2, [r3, #-11]
		for (i = 0; i < 8; i++)
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	75bb      	strb	r3, [r7, #22]
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d9ec      	bls.n	8001fc6 <processGetDeviceInfoSrsp+0x3a>
		}

		mtSapiCbs.pfnSapiGetDeviceInfoSrsp(&rsp);
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <processGetDeviceInfoSrsp+0x74>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4798      	blx	r3
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200004f4 	.word	0x200004f4
 8002004:	0800d9a0 	.word	0x0800d9a0

08002008 <processFindDeviceCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processFindDeviceCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiFindDeviceCnf)
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <processFindDeviceCnf+0xc0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d051      	beq.n	80020c0 <processFindDeviceCnf+0xb8>
	{
		uint8_t msgIdx = 2;
 800201c:	2302      	movs	r3, #2
 800201e:	77fb      	strb	r3, [r7, #31]
		FindDeviceCnfFormat_t rsp;
		if (rpcLen < 11)
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d802      	bhi.n	800202c <processFindDeviceCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002026:	4829      	ldr	r0, [pc, #164]	; (80020cc <processFindDeviceCnf+0xc4>)
 8002028:	f009 fe2a 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SearchKey = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800202c:	7ffb      	ldrb	r3, [r7, #31]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	3301      	adds	r3, #1
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	440b      	add	r3, r1
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	3302      	adds	r3, #2
 8002050:	77fb      	strb	r3, [r7, #31]
		rsp.Result = 0;
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	77bb      	strb	r3, [r7, #30]
 8002062:	e024      	b.n	80020ae <processFindDeviceCnf+0xa6>
			rsp.Result |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8002064:	7ffb      	ldrb	r3, [r7, #31]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	77fa      	strb	r2, [r7, #31]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	7fb9      	ldrb	r1, [r7, #30]
 800207a:	00c9      	lsls	r1, r1, #3
 800207c:	f1a1 0620 	sub.w	r6, r1, #32
 8002080:	f1c1 0020 	rsb	r0, r1, #32
 8002084:	fa03 f501 	lsl.w	r5, r3, r1
 8002088:	fa02 f606 	lsl.w	r6, r2, r6
 800208c:	4335      	orrs	r5, r6
 800208e:	fa22 f000 	lsr.w	r0, r2, r0
 8002092:	4305      	orrs	r5, r0
 8002094:	fa02 f401 	lsl.w	r4, r2, r1
 8002098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800209c:	ea40 0204 	orr.w	r2, r0, r4
 80020a0:	ea41 0305 	orr.w	r3, r1, r5
 80020a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 80020a8:	7fbb      	ldrb	r3, [r7, #30]
 80020aa:	3301      	adds	r3, #1
 80020ac:	77bb      	strb	r3, [r7, #30]
 80020ae:	7fbb      	ldrb	r3, [r7, #30]
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	d9d7      	bls.n	8002064 <processFindDeviceCnf+0x5c>

		mtSapiCbs.pfnSapiFindDeviceCnf(&rsp);
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <processFindDeviceCnf+0xc0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f107 0208 	add.w	r2, r7, #8
 80020bc:	4610      	mov	r0, r2
 80020be:	4798      	blx	r3
	}
}
 80020c0:	bf00      	nop
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	200004f4 	.word	0x200004f4
 80020cc:	0800d9a0 	.word	0x0800d9a0

080020d0 <processSendDataCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processSendDataCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiSendDataCnf)
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <processSendDataCnf+0x58>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01d      	beq.n	8002120 <processSendDataCnf+0x50>
	{
		uint8_t msgIdx = 2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	73fb      	strb	r3, [r7, #15]
		SendDataCnfFormat_t rsp;
		if (rpcLen < 2)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d802      	bhi.n	80020f4 <processSendDataCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80020ee:	480f      	ldr	r0, [pc, #60]	; (800212c <processSendDataCnf+0x5c>)
 80020f0:	f009 fdc6 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Handle = rpcBuff[msgIdx++];
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	73fa      	strb	r2, [r7, #15]
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	733b      	strb	r3, [r7, #12]
		rsp.Status = rpcBuff[msgIdx++];
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	73fa      	strb	r2, [r7, #15]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	737b      	strb	r3, [r7, #13]

		mtSapiCbs.pfnSapiSendDataCnf(&rsp);
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <processSendDataCnf+0x58>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f107 020c 	add.w	r2, r7, #12
 800211c:	4610      	mov	r0, r2
 800211e:	4798      	blx	r3
	}
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200004f4 	.word	0x200004f4
 800212c:	0800d9a0 	.word	0x0800d9a0

08002130 <processReceiveDataInd>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReceiveDataInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b09c      	sub	sp, #112	; 0x70
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReceiveDataInd)
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <processReceiveDataInd+0x100>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d070      	beq.n	8002226 <processReceiveDataInd+0xf6>
	{
		uint8_t msgIdx = 2;
 8002144:	2302      	movs	r3, #2
 8002146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ReceiveDataIndFormat_t rsp;
		if (rpcLen < 6)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d802      	bhi.n	8002156 <processReceiveDataInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002150:	4838      	ldr	r0, [pc, #224]	; (8002234 <processReceiveDataInd+0x104>)
 8002152:	f009 fd95 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002166:	3301      	adds	r3, #1
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	440b      	add	r3, r1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800217a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800217e:	3302      	adds	r3, #2
 8002180:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Command = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b29a      	uxth	r2, r3
 8002190:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002194:	3301      	adds	r3, #1
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	440b      	add	r3, r1
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	81fb      	strh	r3, [r7, #14]
		msgIdx += 2;
 80021a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021ac:	3302      	adds	r3, #2
 80021ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Len = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80021b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021c2:	3301      	adds	r3, #1
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	440b      	add	r3, r1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80021d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021da:	3302      	adds	r3, #2
 80021dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (rpcLen > 6)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d919      	bls.n	800221a <processReceiveDataInd+0xea>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ea:	e011      	b.n	8002210 <processReceiveDataInd+0xe0>
			{
				rsp.Data[i] = rpcBuff[msgIdx++];
 80021ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	7819      	ldrb	r1, [r3, #0]
 80021fe:	f107 0212 	add.w	r2, r7, #18
 8002202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002204:	4413      	add	r3, r2
 8002206:	460a      	mov	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 800220a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220c:	3301      	adds	r3, #1
 800220e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002210:	8a3b      	ldrh	r3, [r7, #16]
 8002212:	461a      	mov	r2, r3
 8002214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002216:	4293      	cmp	r3, r2
 8002218:	d3e8      	bcc.n	80021ec <processReceiveDataInd+0xbc>
			}
		}
		mtSapiCbs.pfnSapiReceiveDataInd(&rsp);
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <processReceiveDataInd+0x100>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f107 020c 	add.w	r2, r7, #12
 8002222:	4610      	mov	r0, r2
 8002224:	4798      	blx	r3
	}
}
 8002226:	bf00      	nop
 8002228:	3770      	adds	r7, #112	; 0x70
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200004f4 	.word	0x200004f4
 8002234:	0800d9a0 	.word	0x0800d9a0

08002238 <processAllowBindCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processAllowBindCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiAllowBindCnf)
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <processAllowBindCnf+0x60>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <processAllowBindCnf+0x56>
	{
		uint8_t msgIdx = 2;
 800224c:	2302      	movs	r3, #2
 800224e:	73fb      	strb	r3, [r7, #15]
		AllowBindCnfFormat_t rsp;
		if (rpcLen < 2)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d802      	bhi.n	800225c <processAllowBindCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002256:	4811      	ldr	r0, [pc, #68]	; (800229c <processAllowBindCnf+0x64>)
 8002258:	f009 fd12 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b29a      	uxth	r2, r3
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3301      	adds	r3, #1
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	440b      	add	r3, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3302      	adds	r3, #2
 8002280:	73fb      	strb	r3, [r7, #15]

		mtSapiCbs.pfnSapiAllowBindCnf(&rsp);
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <processAllowBindCnf+0x60>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	4610      	mov	r0, r2
 800228c:	4798      	blx	r3
	}
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200004f4 	.word	0x200004f4
 800229c:	0800d9a0 	.word	0x0800d9a0

080022a0 <processBindCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processBindCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiBindCnf)
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <processBindCnf+0x70>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d028      	beq.n	8002306 <processBindCnf+0x66>
	{
		uint8_t msgIdx = 2;
 80022b4:	2302      	movs	r3, #2
 80022b6:	73fb      	strb	r3, [r7, #15]
		BindCnfFormat_t rsp;
		if (rpcLen < 3)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d802      	bhi.n	80022c4 <processBindCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80022be:	4815      	ldr	r0, [pc, #84]	; (8002314 <processBindCnf+0x74>)
 80022c0:	f009 fcde 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.CommandId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3301      	adds	r3, #1
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	440b      	add	r3, r1
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4413      	add	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3302      	adds	r3, #2
 80022e8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	73fa      	strb	r2, [r7, #15]
 80022f0:	461a      	mov	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	72bb      	strb	r3, [r7, #10]

		mtSapiCbs.pfnSapiBindCnf(&rsp);
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <processBindCnf+0x70>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	4610      	mov	r0, r2
 8002304:	4798      	blx	r3
	}
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004f4 	.word	0x200004f4
 8002314:	0800d9a0 	.word	0x0800d9a0

08002318 <processStartCnf>:
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processStartCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiStartCnf)
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <processStartCnf+0x48>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <processStartCnf+0x40>
	{
		uint8_t msgIdx = 2;
 800232c:	2302      	movs	r3, #2
 800232e:	73fb      	strb	r3, [r7, #15]
		StartCnfFormat_t rsp;
		if (rpcLen < 1)
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <processStartCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <processStartCnf+0x4c>)
 8002338:	f009 fca2 	bl	800bc80 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	73fa      	strb	r2, [r7, #15]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	733b      	strb	r3, [r7, #12]

		mtSapiCbs.pfnSapiStartCnf(&rsp);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <processStartCnf+0x48>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f107 020c 	add.w	r2, r7, #12
 8002354:	4610      	mov	r0, r2
 8002356:	4798      	blx	r3
	}
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200004f4 	.word	0x200004f4
 8002364:	0800d9a0 	.word	0x0800d9a0

08002368 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	461a      	mov	r2, r3
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4817      	ldr	r0, [pc, #92]	; (80023d8 <processSrsp+0x70>)
 800237c:	f009 fb50 	bl	800ba20 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d002      	beq.n	8002390 <processSrsp+0x28>
 800238a:	2b06      	cmp	r3, #6
 800238c:	d00a      	beq.n	80023a4 <processSrsp+0x3c>
 800238e:	e013      	b.n	80023b8 <processSrsp+0x50>
	{
	case MT_SAPI_READ_CONFIGURATION:
		dbg_print(PRINT_LEVEL_VERBOSE,
 8002390:	4912      	ldr	r1, [pc, #72]	; (80023dc <processSrsp+0x74>)
 8002392:	2004      	movs	r0, #4
 8002394:	f003 fd5e 	bl	8005e54 <dbg_print>
		        "sapiProcess: MT_SAPI_READ_CONFIGURATION\n");
		processReadConfigurationSrsp(rpcBuff, rpcLen);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fd93 	bl	8001ec8 <processReadConfigurationSrsp>
		break;
 80023a2:	e014      	b.n	80023ce <processSrsp+0x66>
	case MT_SAPI_GET_DEVICE_INFO:
		dbg_print(PRINT_LEVEL_VERBOSE,
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <processSrsp+0x78>)
 80023a6:	2004      	movs	r0, #4
 80023a8:	f003 fd54 	bl	8005e54 <dbg_print>
		        "sapiProcess: MT_SAPI_GET_DEVICE_INFO\n");
		processGetDeviceInfoSrsp(rpcBuff, rpcLen);
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fdeb 	bl	8001f8c <processGetDeviceInfoSrsp>
		break;
 80023b6:	e00a      	b.n	80023ce <processSrsp+0x66>
	default:
		dbg_print(PRINT_LEVEL_INFO,
		        "processSrsp: unsupported message  [%x:%x]\n", rpcBuff[0],
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 80023bc:	461a      	mov	r2, r3
		        rpcBuff[1]);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	781b      	ldrb	r3, [r3, #0]
		dbg_print(PRINT_LEVEL_INFO,
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <processSrsp+0x7c>)
 80023c6:	2002      	movs	r0, #2
 80023c8:	f003 fd44 	bl	8005e54 <dbg_print>
		break;
 80023cc:	bf00      	nop
	}

}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000309c 	.word	0x2000309c
 80023dc:	0800d9b4 	.word	0x0800d9b4
 80023e0:	0800d9e0 	.word	0x0800d9e0
 80023e4:	0800da08 	.word	0x0800da08

080023e8 <sapiProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void sapiProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
 80023f8:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3301      	adds	r3, #1
 80023fe:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n",
 8002400:	493a      	ldr	r1, [pc, #232]	; (80024ec <sapiProcess+0x104>)
 8002402:	2004      	movs	r0, #4
 8002404:	f003 fd26 	bl	8005e54 <dbg_print>

//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002410:	2b60      	cmp	r3, #96	; 0x60
 8002412:	d105      	bne.n	8002420 <sapiProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffa5 	bl	8002368 <processSrsp>
			        "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 800241e:	e060      	b.n	80024e2 <sapiProcess+0xfa>
		switch (rpcBuff[1])
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3b80      	subs	r3, #128	; 0x80
 8002428:	2b07      	cmp	r3, #7
 800242a:	d84f      	bhi.n	80024cc <sapiProcess+0xe4>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <sapiProcess+0x4c>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	080024b9 	.word	0x080024b9
 8002438:	080024a5 	.word	0x080024a5
 800243c:	08002491 	.word	0x08002491
 8002440:	08002469 	.word	0x08002469
 8002444:	080024cd 	.word	0x080024cd
 8002448:	08002455 	.word	0x08002455
 800244c:	080024cd 	.word	0x080024cd
 8002450:	0800247d 	.word	0x0800247d
			dbg_print(PRINT_LEVEL_VERBOSE,
 8002454:	4926      	ldr	r1, [pc, #152]	; (80024f0 <sapiProcess+0x108>)
 8002456:	2004      	movs	r0, #4
 8002458:	f003 fcfc 	bl	8005e54 <dbg_print>
			processFindDeviceCnf(rpcBuff, rpcLen);
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fdd1 	bl	8002008 <processFindDeviceCnf>
			break;
 8002466:	e03c      	b.n	80024e2 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8002468:	4922      	ldr	r1, [pc, #136]	; (80024f4 <sapiProcess+0x10c>)
 800246a:	2004      	movs	r0, #4
 800246c:	f003 fcf2 	bl	8005e54 <dbg_print>
			processSendDataCnf(rpcBuff, rpcLen);
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fe2b 	bl	80020d0 <processSendDataCnf>
			break;
 800247a:	e032      	b.n	80024e2 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 800247c:	491e      	ldr	r1, [pc, #120]	; (80024f8 <sapiProcess+0x110>)
 800247e:	2004      	movs	r0, #4
 8002480:	f003 fce8 	bl	8005e54 <dbg_print>
			processReceiveDataInd(rpcBuff, rpcLen);
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fe51 	bl	8002130 <processReceiveDataInd>
			break;
 800248e:	e028      	b.n	80024e2 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8002490:	491a      	ldr	r1, [pc, #104]	; (80024fc <sapiProcess+0x114>)
 8002492:	2004      	movs	r0, #4
 8002494:	f003 fcde 	bl	8005e54 <dbg_print>
			processAllowBindCnf(rpcBuff, rpcLen);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fecb 	bl	8002238 <processAllowBindCnf>
			break;
 80024a2:	e01e      	b.n	80024e2 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_BIND_CNF\n");
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <sapiProcess+0x118>)
 80024a6:	2004      	movs	r0, #4
 80024a8:	f003 fcd4 	bl	8005e54 <dbg_print>
			processBindCnf(rpcBuff, rpcLen);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fef5 	bl	80022a0 <processBindCnf>
			break;
 80024b6:	e014      	b.n	80024e2 <sapiProcess+0xfa>
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_START_CNF\n");
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <sapiProcess+0x11c>)
 80024ba:	2004      	movs	r0, #4
 80024bc:	f003 fcca 	bl	8005e54 <dbg_print>
			processStartCnf(rpcBuff, rpcLen);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff27 	bl	8002318 <processStartCnf>
			break;
 80024ca:	e00a      	b.n	80024e2 <sapiProcess+0xfa>
			        "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_INFO,
 80024d0:	461a      	mov	r2, r3
			        rpcBuff[1]);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_INFO,
 80024d8:	490b      	ldr	r1, [pc, #44]	; (8002508 <sapiProcess+0x120>)
 80024da:	2002      	movs	r0, #2
 80024dc:	f003 fcba 	bl	8005e54 <dbg_print>
			break;
 80024e0:	bf00      	nop
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800da34 	.word	0x0800da34
 80024f0:	0800da60 	.word	0x0800da60
 80024f4:	0800da88 	.word	0x0800da88
 80024f8:	0800daac 	.word	0x0800daac
 80024fc:	0800dad4 	.word	0x0800dad4
 8002500:	0800dafc 	.word	0x0800dafc
 8002504:	0800db1c 	.word	0x0800db1c
 8002508:	0800db3c 	.word	0x0800db3c

0800250c <processPingSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 */
static void processPingSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysPingSrsp)
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <processPingSrsp+0x60>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <processPingSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002520:	2302      	movs	r3, #2
 8002522:	73fb      	strb	r3, [r7, #15]
		PingSrspFormat_t rsp;
		if (rpcLen < 2)
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d802      	bhi.n	8002530 <processPingSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800252a:	4811      	ldr	r0, [pc, #68]	; (8002570 <processPingSrsp+0x64>)
 800252c:	f009 fba8 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Capabilities = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b29a      	uxth	r2, r3
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	440b      	add	r3, r1
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b29b      	uxth	r3, r3
 800254a:	4413      	add	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3302      	adds	r3, #2
 8002554:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysPingSrsp(&rsp);
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <processPingSrsp+0x60>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f107 020c 	add.w	r2, r7, #12
 800255e:	4610      	mov	r0, r2
 8002560:	4798      	blx	r3
	}
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000514 	.word	0x20000514
 8002570:	0800db68 	.word	0x0800db68

08002574 <processGetExtAddrSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetExtAddrSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetExtAddrSrsp)
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <processGetExtAddrSrsp+0x9c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d03e      	beq.n	8002606 <processGetExtAddrSrsp+0x92>
	{
		uint8_t msgIdx = 2;
 8002588:	2302      	movs	r3, #2
 800258a:	75fb      	strb	r3, [r7, #23]
		GetExtAddrSrspFormat_t rsp;
		if (rpcLen < 8)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b07      	cmp	r3, #7
 8002590:	d802      	bhi.n	8002598 <processGetExtAddrSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002592:	4820      	ldr	r0, [pc, #128]	; (8002614 <processGetExtAddrSrsp+0xa0>)
 8002594:	f009 fb74 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ExtAddr = 0;
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	75bb      	strb	r3, [r7, #22]
 80025a8:	e024      	b.n	80025f4 <processGetExtAddrSrsp+0x80>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	75fa      	strb	r2, [r7, #23]
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	7db9      	ldrb	r1, [r7, #22]
 80025c0:	00c9      	lsls	r1, r1, #3
 80025c2:	f1a1 0620 	sub.w	r6, r1, #32
 80025c6:	f1c1 0020 	rsb	r0, r1, #32
 80025ca:	fa03 f501 	lsl.w	r5, r3, r1
 80025ce:	fa02 f606 	lsl.w	r6, r2, r6
 80025d2:	4335      	orrs	r5, r6
 80025d4:	fa22 f000 	lsr.w	r0, r2, r0
 80025d8:	4305      	orrs	r5, r0
 80025da:	fa02 f401 	lsl.w	r4, r2, r1
 80025de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025e2:	ea40 0204 	orr.w	r2, r0, r4
 80025e6:	ea41 0305 	orr.w	r3, r1, r5
 80025ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for (i = 0; i < 8; i++)
 80025ee:	7dbb      	ldrb	r3, [r7, #22]
 80025f0:	3301      	adds	r3, #1
 80025f2:	75bb      	strb	r3, [r7, #22]
 80025f4:	7dbb      	ldrb	r3, [r7, #22]
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d9d7      	bls.n	80025aa <processGetExtAddrSrsp+0x36>

		mtSysCbs.pfnSysGetExtAddrSrsp(&rsp);
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <processGetExtAddrSrsp+0x9c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f107 0208 	add.w	r2, r7, #8
 8002602:	4610      	mov	r0, r2
 8002604:	4798      	blx	r3
	}
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	bf00      	nop
 8002610:	20000514 	.word	0x20000514
 8002614:	0800db68 	.word	0x0800db68

08002618 <processRamReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRamReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0a6      	sub	sp, #152	; 0x98
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRamReadSrsp)
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <processRamReadSrsp+0xa8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d044      	beq.n	80026b6 <processRamReadSrsp+0x9e>
	{
		uint8_t msgIdx = 2;
 800262c:	2302      	movs	r3, #2
 800262e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		RamReadSrspFormat_t rsp;
		if (rpcLen < 2)
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d802      	bhi.n	800263e <processRamReadSrsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002638:	4822      	ldr	r0, [pc, #136]	; (80026c4 <processRamReadSrsp+0xac>)
 800263a:	f009 fb21 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800263e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	733b      	strb	r3, [r7, #12]
		rsp.Len = rpcBuff[msgIdx++];
 8002652:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	737b      	strb	r3, [r7, #13]
		if (rpcLen > 2)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d91e      	bls.n	80026aa <processRamReadSrsp+0x92>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002672:	e014      	b.n	800269e <processRamReadSrsp+0x86>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 8002674:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	7819      	ldrb	r1, [r3, #0]
 8002686:	f107 020e 	add.w	r2, r7, #14
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	4413      	add	r3, r2
 8002690:	460a      	mov	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8002694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002698:	3301      	adds	r3, #1
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800269e:	7b7b      	ldrb	r3, [r7, #13]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d3e4      	bcc.n	8002674 <processRamReadSrsp+0x5c>
			}
		}
		mtSysCbs.pfnSysRamReadSrsp(&rsp);
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <processRamReadSrsp+0xa8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f107 020c 	add.w	r2, r7, #12
 80026b2:	4610      	mov	r0, r2
 80026b4:	4798      	blx	r3
	}
}
 80026b6:	bf00      	nop
 80026b8:	3798      	adds	r7, #152	; 0x98
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000514 	.word	0x20000514
 80026c4:	0800db68 	.word	0x0800db68

080026c8 <sysResetReq>:
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysResetReq(ResetReqFormat_t *req)
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	466b      	mov	r3, sp
 80026d2:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	77fb      	strb	r3, [r7, #31]
	uint32_t cmdLen = 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	61bb      	str	r3, [r7, #24]
	uint8_t cmd[cmdLen];
 80026dc:	69b8      	ldr	r0, [r7, #24]
 80026de:	4603      	mov	r3, r0
 80026e0:	3b01      	subs	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	4601      	mov	r1, r0
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	00d4      	lsls	r4, r2, #3
 80026f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026f8:	00cb      	lsls	r3, r1, #3
 80026fa:	4601      	mov	r1, r0
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f04f 0400 	mov.w	r4, #0
 8002708:	00d4      	lsls	r4, r2, #3
 800270a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800270e:	00cb      	lsls	r3, r1, #3
 8002710:	1dc3      	adds	r3, r0, #7
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	ebad 0d03 	sub.w	sp, sp, r3
 800271a:	466b      	mov	r3, sp
 800271c:	3300      	adds	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

	if (cmd)
	{

		cmd[cmInd++] = req->Type;
 8002720:	7ffb      	ldrb	r3, [r7, #31]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	77fa      	strb	r2, [r7, #31]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7819      	ldrb	r1, [r3, #0]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	5499      	strb	r1, [r3, r2]

		status = rpcSendFrame((MT_RPC_CMD_AREQ | MT_RPC_SYS_SYS),
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2100      	movs	r1, #0
 8002738:	2041      	movs	r0, #65	; 0x41
 800273a:	f003 fe43 	bl	80063c4 <rpcSendFrame>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
		MT_SYS_RESET_REQ, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS)
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <sysResetReq+0x86>
		{
			rpcWaitMqClientMsg(50);
 8002748:	2032      	movs	r0, #50	; 0x32
 800274a:	f003 fcaf 	bl	80060ac <rpcWaitMqClientMsg>
		}
		return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	46ad      	mov	sp, r5
	else
	{
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
		return 1;
	}
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800275c <processResetInd>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processResetInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysResetInd)
 8002768:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <processResetInd+0x98>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03d      	beq.n	80027ec <processResetInd+0x90>
	{
		uint8_t msgIdx = 2;
 8002770:	2302      	movs	r3, #2
 8002772:	73fb      	strb	r3, [r7, #15]
		ResetIndFormat_t rsp;
		if (rpcLen < 6)
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d802      	bhi.n	8002780 <processResetInd+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800277a:	481f      	ldr	r0, [pc, #124]	; (80027f8 <processResetInd+0x9c>)
 800277c:	f009 fa80 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Reason = rpcBuff[msgIdx++];
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	73fa      	strb	r2, [r7, #15]
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	723b      	strb	r3, [r7, #8]
		rsp.TransportRev = rpcBuff[msgIdx++];
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	73fa      	strb	r2, [r7, #15]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	727b      	strb	r3, [r7, #9]
		rsp.ProductId = rpcBuff[msgIdx++];
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	73fa      	strb	r2, [r7, #15]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	72bb      	strb	r3, [r7, #10]
		rsp.MajorRel = rpcBuff[msgIdx++];
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	73fa      	strb	r2, [r7, #15]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	72fb      	strb	r3, [r7, #11]
		rsp.MinorRel = rpcBuff[msgIdx++];
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	73fa      	strb	r2, [r7, #15]
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	733b      	strb	r3, [r7, #12]
		rsp.HwRev = rpcBuff[msgIdx++];
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	73fa      	strb	r2, [r7, #15]
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	737b      	strb	r3, [r7, #13]

		mtSysCbs.pfnSysResetInd(&rsp);
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <processResetInd+0x98>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f107 0208 	add.w	r2, r7, #8
 80027e8:	4610      	mov	r0, r2
 80027ea:	4798      	blx	r3
	}
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000514 	.word	0x20000514
 80027f8:	0800db68 	.word	0x0800db68

080027fc <sysVersion>:
 * @param    -
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysVersion()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
	uint8_t status;

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 8002802:	2300      	movs	r3, #0
 8002804:	2200      	movs	r2, #0
 8002806:	2102      	movs	r1, #2
 8002808:	2021      	movs	r0, #33	; 0x21
 800280a:	f003 fddb 	bl	80063c4 <rpcSendFrame>
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
	MT_SYS_VERSION, NULL, 0);

	if (status == MT_RPC_SUCCESS)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <sysVersion+0x22>
	{
		rpcWaitMqClientMsg(50);
 8002818:	2032      	movs	r0, #50	; 0x32
 800281a:	f003 fc47 	bl	80060ac <rpcWaitMqClientMsg>
	}

	return status;
 800281e:	79fb      	ldrb	r3, [r7, #7]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <processVersionSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processVersionSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysVersionSrsp)
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <processVersionSrsp+0x88>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d035      	beq.n	80028a8 <processVersionSrsp+0x80>
	{
		uint8_t msgIdx = 2;
 800283c:	2302      	movs	r3, #2
 800283e:	73fb      	strb	r3, [r7, #15]
		VersionSrspFormat_t rsp;
		if (rpcLen < 5)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d802      	bhi.n	800284c <processVersionSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002846:	481b      	ldr	r0, [pc, #108]	; (80028b4 <processVersionSrsp+0x8c>)
 8002848:	f009 fa1a 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TransportRev = rpcBuff[msgIdx++];
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	73fa      	strb	r2, [r7, #15]
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	723b      	strb	r3, [r7, #8]
		rsp.Product = rpcBuff[msgIdx++];
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	73fa      	strb	r2, [r7, #15]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	727b      	strb	r3, [r7, #9]
		rsp.MajorRel = rpcBuff[msgIdx++];
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	73fa      	strb	r2, [r7, #15]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	72bb      	strb	r3, [r7, #10]
		rsp.MinorRel = rpcBuff[msgIdx++];
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	73fa      	strb	r2, [r7, #15]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	72fb      	strb	r3, [r7, #11]
		rsp.MaintRel = rpcBuff[msgIdx++];
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	73fa      	strb	r2, [r7, #15]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysVersionSrsp(&rsp);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <processVersionSrsp+0x88>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f107 0208 	add.w	r2, r7, #8
 80028a4:	4610      	mov	r0, r2
 80028a6:	4798      	blx	r3
	}
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000514 	.word	0x20000514
 80028b4:	0800db68 	.word	0x0800db68

080028b8 <processOsalNvReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0c4      	sub	sp, #272	; 0x110
 80028bc:	af00      	add	r7, sp, #0
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	6018      	str	r0, [r3, #0]
 80028c2:	460a      	mov	r2, r1
 80028c4:	1cfb      	adds	r3, r7, #3
 80028c6:	701a      	strb	r2, [r3, #0]
	if (mtSysCbs.pfnSysOsalNvReadSrsp)
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <processOsalNvReadSrsp+0xc4>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d050      	beq.n	8002972 <processOsalNvReadSrsp+0xba>
	{
		uint8_t msgIdx = 2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		OsalNvReadSrspFormat_t rsp;
		if (rpcLen < 2)
 80028d6:	1cfb      	adds	r3, r7, #3
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d802      	bhi.n	80028e4 <processOsalNvReadSrsp+0x2c>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80028de:	4828      	ldr	r0, [pc, #160]	; (8002980 <processOsalNvReadSrsp+0xc8>)
 80028e0:	f009 f9ce 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80028e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80028ee:	461a      	mov	r2, r3
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	701a      	strb	r2, [r3, #0]
		rsp.Len = rpcBuff[msgIdx++];
 80028fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002908:	461a      	mov	r2, r3
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2)
 8002918:	1cfb      	adds	r3, r7, #3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d922      	bls.n	8002966 <processOsalNvReadSrsp+0xae>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002926:	e016      	b.n	8002956 <processOsalNvReadSrsp+0x9e>
			{
				rsp.Value[i] = rpcBuff[msgIdx++];
 8002928:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002932:	461a      	mov	r2, r3
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4413      	add	r3, r2
 800293a:	7819      	ldrb	r1, [r3, #0]
 800293c:	f107 020c 	add.w	r2, r7, #12
 8002940:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002944:	4413      	add	r3, r2
 8002946:	3302      	adds	r3, #2
 8002948:	460a      	mov	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 800294c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002950:	3301      	adds	r3, #1
 8002952:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	461a      	mov	r2, r3
 800295e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002962:	4293      	cmp	r3, r2
 8002964:	d3e0      	bcc.n	8002928 <processOsalNvReadSrsp+0x70>
			}
		}
		mtSysCbs.pfnSysOsalNvReadSrsp(&rsp);
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <processOsalNvReadSrsp+0xc4>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f107 020c 	add.w	r2, r7, #12
 800296e:	4610      	mov	r0, r2
 8002970:	4798      	blx	r3
	}
}
 8002972:	bf00      	nop
 8002974:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000514 	.word	0x20000514
 8002980:	0800db68 	.word	0x0800db68

08002984 <sysOsalNvWrite>:
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysOsalNvWrite(OsalNvWriteFormat_t *req)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	466b      	mov	r3, sp
 800298e:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 4 + req->Len;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	3304      	adds	r3, #4
 800299a:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 800299c:	6978      	ldr	r0, [r7, #20]
 800299e:	4603      	mov	r3, r0
 80029a0:	3b01      	subs	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	4601      	mov	r1, r0
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	f04f 0400 	mov.w	r4, #0
 80029b2:	00d4      	lsls	r4, r2, #3
 80029b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029b8:	00cb      	lsls	r3, r1, #3
 80029ba:	4601      	mov	r1, r0
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	00d4      	lsls	r4, r2, #3
 80029ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029ce:	00cb      	lsls	r3, r1, #3
 80029d0:	1dc3      	adds	r3, r0, #7
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	ebad 0d03 	sub.w	sp, sp, r3
 80029da:	466b      	mov	r3, sp
 80029dc:	3300      	adds	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
	if (cmd)
	{

		int idx;

		cmd[cmInd++] = (uint8_t)(req->Id & 0xFF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8819      	ldrh	r1, [r3, #0]
 80029e4:	7efb      	ldrb	r3, [r7, #27]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	76fa      	strb	r2, [r7, #27]
 80029ea:	461a      	mov	r2, r3
 80029ec:	b2c9      	uxtb	r1, r1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t)((req->Id >> 8) & 0xFF);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b299      	uxth	r1, r3
 80029fa:	7efb      	ldrb	r3, [r7, #27]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	76fa      	strb	r2, [r7, #27]
 8002a00:	461a      	mov	r2, r3
 8002a02:	b2c9      	uxtb	r1, r1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = req->Offset;
 8002a08:	7efb      	ldrb	r3, [r7, #27]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	76fa      	strb	r2, [r7, #27]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7899      	ldrb	r1, [r3, #2]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = req->Len;
 8002a18:	7efb      	ldrb	r3, [r7, #27]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	76fa      	strb	r2, [r7, #27]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	78d9      	ldrb	r1, [r3, #3]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	5499      	strb	r1, [r3, r2]
		for (idx = 0; idx < req->Len; idx++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	e00d      	b.n	8002a4a <sysOsalNvWrite+0xc6>
		{
			cmd[cmInd++] = req->Value[idx];
 8002a2e:	7efb      	ldrb	r3, [r7, #27]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	76fa      	strb	r2, [r7, #27]
 8002a34:	4619      	mov	r1, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	545a      	strb	r2, [r3, r1]
		for (idx = 0; idx < req->Len; idx++)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	78db      	ldrb	r3, [r3, #3]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	dbeb      	blt.n	8002a2e <sysOsalNvWrite+0xaa>
		}

		status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2109      	movs	r1, #9
 8002a5e:	2021      	movs	r0, #33	; 0x21
 8002a60:	f003 fcb0 	bl	80063c4 <rpcSendFrame>
 8002a64:	4603      	mov	r3, r0
 8002a66:	72fb      	strb	r3, [r7, #11]
		MT_SYS_OSAL_NV_WRITE, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS)
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <sysOsalNvWrite+0xf0>
		{
			rpcWaitMqClientMsg(50);
 8002a6e:	2032      	movs	r0, #50	; 0x32
 8002a70:	f003 fb1c 	bl	80060ac <rpcWaitMqClientMsg>
		}

		return status;
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	46ad      	mov	sp, r5
	else
	{
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
		return 1;
	}
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}

08002a80 <processOsalNvLengthSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvLengthSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalNvLengthSrsp)
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <processOsalNvLengthSrsp+0x60>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <processOsalNvLengthSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002a94:	2302      	movs	r3, #2
 8002a96:	73fb      	strb	r3, [r7, #15]
		OsalNvLengthSrspFormat_t rsp;
		if (rpcLen < 2)
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d802      	bhi.n	8002aa4 <processOsalNvLengthSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002a9e:	4811      	ldr	r0, [pc, #68]	; (8002ae4 <processOsalNvLengthSrsp+0x64>)
 8002aa0:	f009 f8ee 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ItemLen = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	440b      	add	r3, r1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysOsalNvLengthSrsp(&rsp);
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <processOsalNvLengthSrsp+0x60>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f107 020c 	add.w	r2, r7, #12
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4798      	blx	r3
	}
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000514 	.word	0x20000514
 8002ae4:	0800db68 	.word	0x0800db68

08002ae8 <processOsalTimerExpired>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalTimerExpired(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalTimerExpired)
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <processOsalTimerExpired+0x48>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <processOsalTimerExpired+0x40>
	{
		uint8_t msgIdx = 2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	73fb      	strb	r3, [r7, #15]
		OsalTimerExpiredFormat_t rsp;
		if (rpcLen < 1)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <processOsalTimerExpired+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <processOsalTimerExpired+0x4c>)
 8002b08:	f009 f8ba 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Id = rpcBuff[msgIdx++];
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	73fa      	strb	r2, [r7, #15]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysOsalTimerExpired(&rsp);
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <processOsalTimerExpired+0x48>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f107 020c 	add.w	r2, r7, #12
 8002b24:	4610      	mov	r0, r2
 8002b26:	4798      	blx	r3
	}
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000514 	.word	0x20000514
 8002b34:	0800db68 	.word	0x0800db68

08002b38 <processStackTuneSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processStackTuneSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysStackTuneSrsp)
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <processStackTuneSrsp+0x48>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <processStackTuneSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	73fb      	strb	r3, [r7, #15]
		StackTuneSrspFormat_t rsp;
		if (rpcLen < 1)
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <processStackTuneSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002b56:	480b      	ldr	r0, [pc, #44]	; (8002b84 <processStackTuneSrsp+0x4c>)
 8002b58:	f009 f892 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	73fa      	strb	r2, [r7, #15]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysStackTuneSrsp(&rsp);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <processStackTuneSrsp+0x48>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f107 020c 	add.w	r2, r7, #12
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
	}
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000514 	.word	0x20000514
 8002b84:	0800db68 	.word	0x0800db68

08002b88 <processAdcReadSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processAdcReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysAdcReadSrsp)
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <processAdcReadSrsp+0x60>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <processAdcReadSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	73fb      	strb	r3, [r7, #15]
		AdcReadSrspFormat_t rsp;
		if (rpcLen < 2)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d802      	bhi.n	8002bac <processAdcReadSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002ba6:	4811      	ldr	r0, [pc, #68]	; (8002bec <processAdcReadSrsp+0x64>)
 8002ba8:	f009 f86a 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysAdcReadSrsp(&rsp);
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <processAdcReadSrsp+0x60>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f107 020c 	add.w	r2, r7, #12
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4798      	blx	r3
	}
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000514 	.word	0x20000514
 8002bec:	0800db68 	.word	0x0800db68

08002bf0 <processGpioSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGpioSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGpioSrsp)
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <processGpioSrsp+0x48>)
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <processGpioSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	73fb      	strb	r3, [r7, #15]
		GpioSrspFormat_t rsp;
		if (rpcLen < 1)
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <processGpioSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002c0e:	480b      	ldr	r0, [pc, #44]	; (8002c3c <processGpioSrsp+0x4c>)
 8002c10:	f009 f836 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	73fa      	strb	r2, [r7, #15]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysGpioSrsp(&rsp);
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <processGpioSrsp+0x48>)
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f107 020c 	add.w	r2, r7, #12
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4798      	blx	r3
	}
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000514 	.word	0x20000514
 8002c3c:	0800db68 	.word	0x0800db68

08002c40 <processRandomSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRandomSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRandomSrsp)
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <processRandomSrsp+0x60>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <processRandomSrsp+0x56>
	{
		uint8_t msgIdx = 2;
 8002c54:	2302      	movs	r3, #2
 8002c56:	73fb      	strb	r3, [r7, #15]
		RandomSrspFormat_t rsp;
		if (rpcLen < 2)
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d802      	bhi.n	8002c64 <processRandomSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002c5e:	4811      	ldr	r0, [pc, #68]	; (8002ca4 <processRandomSrsp+0x64>)
 8002c60:	f009 f80e 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	440b      	add	r3, r1
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	3302      	adds	r3, #2
 8002c88:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysRandomSrsp(&rsp);
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <processRandomSrsp+0x60>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f107 020c 	add.w	r2, r7, #12
 8002c92:	4610      	mov	r0, r2
 8002c94:	4798      	blx	r3
	}
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000514 	.word	0x20000514
 8002ca4:	0800db68 	.word	0x0800db68

08002ca8 <processGetTimeSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetTimeSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetTimeSrsp)
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <processGetTimeSrsp+0xe0>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d061      	beq.n	8002d80 <processGetTimeSrsp+0xd8>
	{
		uint8_t msgIdx = 2;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	75fb      	strb	r3, [r7, #23]
		GetTimeSrspFormat_t rsp;
		if (rpcLen < 11)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	2b0a      	cmp	r3, #10
 8002cc4:	d802      	bhi.n	8002ccc <processGetTimeSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002cc6:	4831      	ldr	r0, [pc, #196]	; (8002d8c <processGetTimeSrsp+0xe4>)
 8002cc8:	f008 ffda 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.UTCTime = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	75bb      	strb	r3, [r7, #22]
 8002cd4:	e010      	b.n	8002cf8 <processGetTimeSrsp+0x50>
			rsp.UTCTime |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	75fa      	strb	r2, [r7, #23]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 4; i++)
 8002cf2:	7dbb      	ldrb	r3, [r7, #22]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	75bb      	strb	r3, [r7, #22]
 8002cf8:	7dbb      	ldrb	r3, [r7, #22]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d9eb      	bls.n	8002cd6 <processGetTimeSrsp+0x2e>
		rsp.Hour = rpcBuff[msgIdx++];
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	75fa      	strb	r2, [r7, #23]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	733b      	strb	r3, [r7, #12]
		rsp.Minute = rpcBuff[msgIdx++];
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	75fa      	strb	r2, [r7, #23]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	737b      	strb	r3, [r7, #13]
		rsp.Second = rpcBuff[msgIdx++];
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	75fa      	strb	r2, [r7, #23]
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	73bb      	strb	r3, [r7, #14]
		rsp.Month = rpcBuff[msgIdx++];
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	75fa      	strb	r2, [r7, #23]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	73fb      	strb	r3, [r7, #15]
		rsp.Day = rpcBuff[msgIdx++];
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	75fa      	strb	r2, [r7, #23]
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	743b      	strb	r3, [r7, #16]
		rsp.Year = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	440b      	add	r3, r1
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	3302      	adds	r3, #2
 8002d72:	75fb      	strb	r3, [r7, #23]

		mtSysCbs.pfnSysGetTimeSrsp(&rsp);
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <processGetTimeSrsp+0xe0>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f107 0208 	add.w	r2, r7, #8
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4798      	blx	r3
	}
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000514 	.word	0x20000514
 8002d8c:	0800db68 	.word	0x0800db68

08002d90 <processSetTxPowerSrsp>:
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processSetTxPowerSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysSetTxPowerSrsp)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <processSetTxPowerSrsp+0x48>)
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <processSetTxPowerSrsp+0x40>
	{
		uint8_t msgIdx = 2;
 8002da4:	2302      	movs	r3, #2
 8002da6:	73fb      	strb	r3, [r7, #15]
		SetTxPowerSrspFormat_t rsp;
		if (rpcLen < 1)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <processSetTxPowerSrsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8002dae:	480b      	ldr	r0, [pc, #44]	; (8002ddc <processSetTxPowerSrsp+0x4c>)
 8002db0:	f008 ff66 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TxPower = rpcBuff[msgIdx++];
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	73fa      	strb	r2, [r7, #15]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysSetTxPowerSrsp(&rsp);
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <processSetTxPowerSrsp+0x48>)
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	f107 020c 	add.w	r2, r7, #12
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4798      	blx	r3
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000514 	.word	0x20000514
 8002ddc:	0800db68 	.word	0x0800db68

08002de0 <sysRegisterCallbacks>:
 *
 * @param
 *
 */
void sysRegisterCallbacks(mtSysCb_t cbs)
{
 8002de0:	b084      	sub	sp, #16
 8002de2:	b4b0      	push	{r4, r5, r7}
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	f107 040c 	add.w	r4, r7, #12
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtSysCbs, &cbs, sizeof(mtSysCb_t));
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <sysRegisterCallbacks+0x34>)
 8002df0:	461c      	mov	r4, r3
 8002df2:	f107 050c 	add.w	r5, r7, #12
 8002df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e06:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bcb0      	pop	{r4, r5, r7}
 8002e10:	b004      	add	sp, #16
 8002e12:	4770      	bx	lr
 8002e14:	20000514 	.word	0x20000514

08002e18 <processSrsp>:
 * @param
 *

 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	485b      	ldr	r0, [pc, #364]	; (8002f98 <processSrsp+0x180>)
 8002e2c:	f008 fdf8 	bl	800ba20 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	2b13      	cmp	r3, #19
 8002e3a:	f200 80a3 	bhi.w	8002f84 <processSrsp+0x16c>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <processSrsp+0x2c>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e95 	.word	0x08002e95
 8002e48:	08002ed1 	.word	0x08002ed1
 8002e4c:	08002f85 	.word	0x08002f85
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ebd 	.word	0x08002ebd
 8002e58:	08002f85 	.word	0x08002f85
 8002e5c:	08002f85 	.word	0x08002f85
 8002e60:	08002ee5 	.word	0x08002ee5
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	08002f85 	.word	0x08002f85
 8002e70:	08002f49 	.word	0x08002f49
 8002e74:	08002f21 	.word	0x08002f21
 8002e78:	08002f35 	.word	0x08002f35
 8002e7c:	08002f0d 	.word	0x08002f0d
 8002e80:	08002f85 	.word	0x08002f85
 8002e84:	08002f5d 	.word	0x08002f5d
 8002e88:	08002f85 	.word	0x08002f85
 8002e8c:	08002ef9 	.word	0x08002ef9
 8002e90:	08002f71 	.word	0x08002f71
	{
	case MT_SYS_PING:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_PING\n");
 8002e94:	4941      	ldr	r1, [pc, #260]	; (8002f9c <processSrsp+0x184>)
 8002e96:	2004      	movs	r0, #4
 8002e98:	f002 ffdc 	bl	8005e54 <dbg_print>
		processPingSrsp(rpcBuff, rpcLen);
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fb33 	bl	800250c <processPingSrsp>
		break;
 8002ea6:	e072      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_GET_EXTADDR:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_EXTADDR\n");
 8002ea8:	493d      	ldr	r1, [pc, #244]	; (8002fa0 <processSrsp+0x188>)
 8002eaa:	2004      	movs	r0, #4
 8002eac:	f002 ffd2 	bl	8005e54 <dbg_print>
		processGetExtAddrSrsp(rpcBuff, rpcLen);
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fb5d 	bl	8002574 <processGetExtAddrSrsp>
		break;
 8002eba:	e068      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_RAM_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RAM_READ\n");
 8002ebc:	4939      	ldr	r1, [pc, #228]	; (8002fa4 <processSrsp+0x18c>)
 8002ebe:	2004      	movs	r0, #4
 8002ec0:	f002 ffc8 	bl	8005e54 <dbg_print>
		processRamReadSrsp(rpcBuff, rpcLen);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fba5 	bl	8002618 <processRamReadSrsp>
		break;
 8002ece:	e05e      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_VERSION:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_VERSION\n");
 8002ed0:	4935      	ldr	r1, [pc, #212]	; (8002fa8 <processSrsp+0x190>)
 8002ed2:	2004      	movs	r0, #4
 8002ed4:	f002 ffbe 	bl	8005e54 <dbg_print>
		processVersionSrsp(rpcBuff, rpcLen);
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff fca3 	bl	8002828 <processVersionSrsp>
		break;
 8002ee2:	e054      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_OSAL_NV_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_READ\n");
 8002ee4:	4931      	ldr	r1, [pc, #196]	; (8002fac <processSrsp+0x194>)
 8002ee6:	2004      	movs	r0, #4
 8002ee8:	f002 ffb4 	bl	8005e54 <dbg_print>
		processOsalNvReadSrsp(rpcBuff, rpcLen);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fce1 	bl	80028b8 <processOsalNvReadSrsp>
		break;
 8002ef6:	e04a      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_OSAL_NV_LENGTH:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_LENGTH\n");
 8002ef8:	492d      	ldr	r1, [pc, #180]	; (8002fb0 <processSrsp+0x198>)
 8002efa:	2004      	movs	r0, #4
 8002efc:	f002 ffaa 	bl	8005e54 <dbg_print>
		processOsalNvLengthSrsp(rpcBuff, rpcLen);
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fdbb 	bl	8002a80 <processOsalNvLengthSrsp>
		break;
 8002f0a:	e040      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_STACK_TUNE:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_STACK_TUNE\n");
 8002f0c:	4929      	ldr	r1, [pc, #164]	; (8002fb4 <processSrsp+0x19c>)
 8002f0e:	2004      	movs	r0, #4
 8002f10:	f002 ffa0 	bl	8005e54 <dbg_print>
		processStackTuneSrsp(rpcBuff, rpcLen);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fe0d 	bl	8002b38 <processStackTuneSrsp>
		break;
 8002f1e:	e036      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_ADC_READ:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_ADC_READ\n");
 8002f20:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <processSrsp+0x1a0>)
 8002f22:	2004      	movs	r0, #4
 8002f24:	f002 ff96 	bl	8005e54 <dbg_print>
		processAdcReadSrsp(rpcBuff, rpcLen);
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fe2b 	bl	8002b88 <processAdcReadSrsp>
		break;
 8002f32:	e02c      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_GPIO:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GPIO\n");
 8002f34:	4921      	ldr	r1, [pc, #132]	; (8002fbc <processSrsp+0x1a4>)
 8002f36:	2004      	movs	r0, #4
 8002f38:	f002 ff8c 	bl	8005e54 <dbg_print>
		processGpioSrsp(rpcBuff, rpcLen);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fe55 	bl	8002bf0 <processGpioSrsp>
		break;
 8002f46:	e022      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_RANDOM:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RANDOM\n");
 8002f48:	491d      	ldr	r1, [pc, #116]	; (8002fc0 <processSrsp+0x1a8>)
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f002 ff82 	bl	8005e54 <dbg_print>
		processRandomSrsp(rpcBuff, rpcLen);
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fe73 	bl	8002c40 <processRandomSrsp>
		break;
 8002f5a:	e018      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_GET_TIME:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_TIME\n");
 8002f5c:	4919      	ldr	r1, [pc, #100]	; (8002fc4 <processSrsp+0x1ac>)
 8002f5e:	2004      	movs	r0, #4
 8002f60:	f002 ff78 	bl	8005e54 <dbg_print>
		processGetTimeSrsp(rpcBuff, rpcLen);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fe9d 	bl	8002ca8 <processGetTimeSrsp>
		break;
 8002f6e:	e00e      	b.n	8002f8e <processSrsp+0x176>
	case MT_SYS_SET_TX_POWER:
		dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_SET_TX_POWER\n");
 8002f70:	4915      	ldr	r1, [pc, #84]	; (8002fc8 <processSrsp+0x1b0>)
 8002f72:	2004      	movs	r0, #4
 8002f74:	f002 ff6e 	bl	8005e54 <dbg_print>
		processSetTxPowerSrsp(rpcBuff, rpcLen);
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff07 	bl	8002d90 <processSetTxPowerSrsp>
		break;
 8002f82:	e004      	b.n	8002f8e <processSrsp+0x176>
	default:
		dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8002f84:	4911      	ldr	r1, [pc, #68]	; (8002fcc <processSrsp+0x1b4>)
 8002f86:	2002      	movs	r0, #2
 8002f88:	f002 ff64 	bl	8005e54 <dbg_print>
		break;
 8002f8c:	bf00      	nop
	}

}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000309c 	.word	0x2000309c
 8002f9c:	0800dba0 	.word	0x0800dba0
 8002fa0:	0800dbbc 	.word	0x0800dbbc
 8002fa4:	0800dbdc 	.word	0x0800dbdc
 8002fa8:	0800dbfc 	.word	0x0800dbfc
 8002fac:	0800dc18 	.word	0x0800dc18
 8002fb0:	0800dc3c 	.word	0x0800dc3c
 8002fb4:	0800dc60 	.word	0x0800dc60
 8002fb8:	0800dc80 	.word	0x0800dc80
 8002fbc:	0800dca0 	.word	0x0800dca0
 8002fc0:	0800dcbc 	.word	0x0800dcbc
 8002fc4:	0800dcd8 	.word	0x0800dcd8
 8002fc8:	0800dcf8 	.word	0x0800dcf8
 8002fcc:	0800dd1c 	.word	0x0800dd1c

08002fd0 <sysProcess>:
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *

 *************************************************************************************************/
void sysProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
 8002fe0:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n",
 8002fe8:	491d      	ldr	r1, [pc, #116]	; (8003060 <sysProcess+0x90>)
 8002fea:	2004      	movs	r0, #4
 8002fec:	f002 ff32 	bl	8005e54 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002ff8:	2b60      	cmp	r3, #96	; 0x60
 8002ffa:	d105      	bne.n	8003008 <sysProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff09 	bl	8002e18 <processSrsp>
			        "processRpcSys: CMD0:%x, CMD1:%x, not handled\n",
			        rpcBuff[0], rpcBuff[1]);
			break;
		}
	}
}
 8003006:	e026      	b.n	8003056 <sysProcess+0x86>
		switch (rpcBuff[1])
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3301      	adds	r3, #1
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d002      	beq.n	8003018 <sysProcess+0x48>
 8003012:	2b81      	cmp	r3, #129	; 0x81
 8003014:	d00a      	beq.n	800302c <sysProcess+0x5c>
 8003016:	e013      	b.n	8003040 <sysProcess+0x70>
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RESET_IND\n");
 8003018:	4912      	ldr	r1, [pc, #72]	; (8003064 <sysProcess+0x94>)
 800301a:	2004      	movs	r0, #4
 800301c:	f002 ff1a 	bl	8005e54 <dbg_print>
			processResetInd(rpcBuff, rpcLen);
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fb99 	bl	800275c <processResetInd>
			break;
 800302a:	e014      	b.n	8003056 <sysProcess+0x86>
			dbg_print(PRINT_LEVEL_VERBOSE,
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <sysProcess+0x98>)
 800302e:	2004      	movs	r0, #4
 8003030:	f002 ff10 	bl	8005e54 <dbg_print>
			processOsalTimerExpired(rpcBuff, rpcLen);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fd55 	bl	8002ae8 <processOsalTimerExpired>
			break;
 800303e:	e00a      	b.n	8003056 <sysProcess+0x86>
			        rpcBuff[0], rpcBuff[1]);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8003044:	461a      	mov	r2, r3
			        rpcBuff[0], rpcBuff[1]);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3301      	adds	r3, #1
 800304a:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <sysProcess+0x9c>)
 800304e:	2001      	movs	r0, #1
 8003050:	f002 ff00 	bl	8005e54 <dbg_print>
			break;
 8003054:	bf00      	nop
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800dd40 	.word	0x0800dd40
 8003064:	0800dd6c 	.word	0x0800dd6c
 8003068:	0800dd8c 	.word	0x0800dd8c
 800306c:	0800ddb4 	.word	0x0800ddb4

08003070 <processStateChange>:
 * @param   uint8_t *rpcBuff
 *
 * @return  none
 */
static void processStateChange(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]

	uint8_t zdoState = rpcBuff[2];
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	789b      	ldrb	r3, [r3, #2]
 8003080:	73fb      	strb	r3, [r7, #15]
	//passes the state to the callback function
	if (mtZdoCbs.pfnmtZdoStateChangeInd)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <processStateChange+0x2c>)
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <processStateChange+0x24>
	{
		mtZdoCbs.pfnmtZdoStateChangeInd(zdoState);
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <processStateChange+0x2c>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	4610      	mov	r0, r2
 8003092:	4798      	blx	r3
	}
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000054c 	.word	0x2000054c

080030a0 <zdoActiveEpReq>:
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoActiveEpReq(ActiveEpReqFormat_t *req)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t cmInd = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 4;
 80030ac:	2304      	movs	r3, #4
 80030ae:	613b      	str	r3, [r7, #16]
	uint8_t *cmd = malloc(cmdLen);
 80030b0:	6938      	ldr	r0, [r7, #16]
 80030b2:	f008 fca5 	bl	800ba00 <malloc>
 80030b6:	4603      	mov	r3, r0
 80030b8:	60fb      	str	r3, [r7, #12]

	if (cmd)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d042      	beq.n	8003146 <zdoActiveEpReq+0xa6>
	{

		cmd[cmInd++] = (uint8_t)(req->DstAddr & 0xFF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	7dbb      	ldrb	r3, [r7, #22]
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	75b9      	strb	r1, [r7, #22]
 80030ca:	4619      	mov	r1, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	440b      	add	r3, r1
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)((req->DstAddr >> 8) & 0xFF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	b29a      	uxth	r2, r3
 80030dc:	7dbb      	ldrb	r3, [r7, #22]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	75b9      	strb	r1, [r7, #22]
 80030e2:	4619      	mov	r1, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	440b      	add	r3, r1
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)(req->NwkAddrOfInterest & 0xFF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	885a      	ldrh	r2, [r3, #2]
 80030f0:	7dbb      	ldrb	r3, [r7, #22]
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	75b9      	strb	r1, [r7, #22]
 80030f6:	4619      	mov	r1, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	440b      	add	r3, r1
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
		cmd[cmInd++] = (uint8_t)((req->NwkAddrOfInterest >> 8) & 0xFF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	885b      	ldrh	r3, [r3, #2]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	b29a      	uxth	r2, r3
 8003108:	7dbb      	ldrb	r3, [r7, #22]
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	75b9      	strb	r1, [r7, #22]
 800310e:	4619      	mov	r1, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	440b      	add	r3, r1
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

		status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO),
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	2105      	movs	r1, #5
 8003120:	2025      	movs	r0, #37	; 0x25
 8003122:	f003 f94f 	bl	80063c4 <rpcSendFrame>
 8003126:	4603      	mov	r3, r0
 8003128:	75fb      	strb	r3, [r7, #23]
		MT_ZDO_ACTIVE_EP_REQ, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS)
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <zdoActiveEpReq+0x9c>
		{
			rpcWaitMqClientMsg(50);
 8003130:	2032      	movs	r0, #50	; 0x32
 8003132:	f002 ffbb 	bl	80060ac <rpcWaitMqClientMsg>
			status = srspRpcBuff[2];
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <zdoActiveEpReq+0xb8>)
 8003138:	789b      	ldrb	r3, [r3, #2]
 800313a:	75fb      	strb	r3, [r7, #23]
		}

		free(cmd);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f008 fc67 	bl	800ba10 <free>
		return status;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	e004      	b.n	8003150 <zdoActiveEpReq+0xb0>
	}
	else
	{
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
 8003146:	4905      	ldr	r1, [pc, #20]	; (800315c <zdoActiveEpReq+0xbc>)
 8003148:	2001      	movs	r0, #1
 800314a:	f002 fe83 	bl	8005e54 <dbg_print>
		return 1;
 800314e:	2301      	movs	r3, #1
	}
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000309c 	.word	0x2000309c
 800315c:	0800dde4 	.word	0x0800dde4

08003160 <processGetLinkKey>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processGetLinkKey(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003162:	b08d      	sub	sp, #52	; 0x34
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoGetLinkKey)
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <processGetLinkKey+0xe4>)
 800316e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d061      	beq.n	800323a <processGetLinkKey+0xda>
	{
		uint8_t msgIdx = 2;
 8003176:	2302      	movs	r3, #2
 8003178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		GetLinkKeySrspFormat_t rsp;
		if (rpcLen < 25)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	2b18      	cmp	r3, #24
 8003180:	d802      	bhi.n	8003188 <processGetLinkKey+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003182:	4831      	ldr	r0, [pc, #196]	; (8003248 <processGetLinkKey+0xe8>)
 8003184:	f008 fd7c 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031ae:	e029      	b.n	8003204 <processGetLinkKey+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80031b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80031cc:	00c9      	lsls	r1, r1, #3
 80031ce:	f1a1 0620 	sub.w	r6, r1, #32
 80031d2:	f1c1 0020 	rsb	r0, r1, #32
 80031d6:	fa03 f501 	lsl.w	r5, r3, r1
 80031da:	fa02 f606 	lsl.w	r6, r2, r6
 80031de:	4335      	orrs	r5, r6
 80031e0:	fa22 f000 	lsr.w	r0, r2, r0
 80031e4:	4305      	orrs	r5, r0
 80031e6:	fa02 f401 	lsl.w	r4, r2, r1
 80031ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ee:	ea40 0204 	orr.w	r2, r0, r4
 80031f2:	ea41 0305 	orr.w	r3, r1, r5
 80031f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 80031fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031fe:	3301      	adds	r3, #1
 8003200:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003204:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003208:	2b07      	cmp	r3, #7
 800320a:	d9d1      	bls.n	80031b0 <processGetLinkKey+0x50>
		memcpy(rsp.LinkKeyData, &rpcBuff[msgIdx], 16);
 800320c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	f107 0418 	add.w	r4, r7, #24
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		msgIdx += 16;
 8003222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003226:	3310      	adds	r3, #16
 8003228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		mtZdoCbs.pfnZdoGetLinkKey(&rsp);
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <processGetLinkKey+0xe4>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	f107 0208 	add.w	r2, r7, #8
 8003236:	4610      	mov	r0, r2
 8003238:	4798      	blx	r3
	}
}
 800323a:	bf00      	nop
 800323c:	3734      	adds	r7, #52	; 0x34
 800323e:	46bd      	mov	sp, r7
 8003240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003242:	bf00      	nop
 8003244:	2000054c 	.word	0x2000054c
 8003248:	0800de08 	.word	0x0800de08

0800324c <processNwkAddrRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b0ad      	sub	sp, #180	; 0xb4
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkAddrRsp)
 8003258:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <processNwkAddrRsp+0x178>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80ad 	beq.w	80033bc <processNwkAddrRsp+0x170>
	{
		uint8_t msgIdx = 2;
 8003262:	2302      	movs	r3, #2
 8003264:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		NwkAddrRspFormat_t rsp;
		if (rpcLen < 13)
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d802      	bhi.n	8003274 <processNwkAddrRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800326e:	4856      	ldr	r0, [pc, #344]	; (80033c8 <processNwkAddrRsp+0x17c>)
 8003270:	f008 fd06 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003274:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800329a:	e029      	b.n	80032f0 <processNwkAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800329c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 80032b8:	00c9      	lsls	r1, r1, #3
 80032ba:	f1a1 0620 	sub.w	r6, r1, #32
 80032be:	f1c1 0020 	rsb	r0, r1, #32
 80032c2:	fa03 f501 	lsl.w	r5, r3, r1
 80032c6:	fa02 f606 	lsl.w	r6, r2, r6
 80032ca:	4335      	orrs	r5, r6
 80032cc:	fa22 f000 	lsr.w	r0, r2, r0
 80032d0:	4305      	orrs	r5, r0
 80032d2:	fa02 f401 	lsl.w	r4, r2, r1
 80032d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032da:	ea40 0204 	orr.w	r2, r0, r4
 80032de:	ea41 0305 	orr.w	r3, r1, r5
 80032e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 80032e6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80032ea:	3301      	adds	r3, #1
 80032ec:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80032f0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	d9d1      	bls.n	800329c <processNwkAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80032f8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b29a      	uxth	r2, r3
 8003304:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003308:	3301      	adds	r3, #1
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	440b      	add	r3, r1
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	4413      	add	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800331c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003320:	3302      	adds	r3, #2
 8003322:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8003326:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 800333a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	76fb      	strb	r3, [r7, #27]
		if (rpcLen > 13)
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	2b0d      	cmp	r3, #13
 8003352:	d92d      	bls.n	80033b0 <processNwkAddrRsp+0x164>
		{
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800335a:	e023      	b.n	80033a4 <processNwkAddrRsp+0x158>
			{
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 800335c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b29a      	uxth	r2, r3
 8003368:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800336c:	3301      	adds	r3, #1
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	440b      	add	r3, r1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b29b      	uxth	r3, r3
 800337a:	4413      	add	r3, r2
 800337c:	b29a      	uxth	r2, r3
 800337e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003382:	3308      	adds	r3, #8
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800338a:	440b      	add	r3, r1
 800338c:	f823 2ca4 	strh.w	r2, [r3, #-164]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8003390:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003394:	3302      	adds	r3, #2
 8003396:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++)
 800339a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800339e:	3301      	adds	r3, #1
 80033a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033a4:	7efb      	ldrb	r3, [r7, #27]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d3d5      	bcc.n	800335c <processNwkAddrRsp+0x110>
			}
		}
		mtZdoCbs.pfnZdoNwkAddrRsp(&rsp);
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <processNwkAddrRsp+0x178>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f107 0208 	add.w	r2, r7, #8
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
	}
}
 80033bc:	bf00      	nop
 80033be:	37b4      	adds	r7, #180	; 0xb4
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	2000054c 	.word	0x2000054c
 80033c8:	0800de08 	.word	0x0800de08

080033cc <processIeeeAddrRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processIeeeAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ce:	b0ad      	sub	sp, #180	; 0xb4
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoIeeeAddrRsp)
 80033d8:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <processIeeeAddrRsp+0x188>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80b4 	beq.w	800354a <processIeeeAddrRsp+0x17e>
	{
		uint8_t msgIdx = 2;
 80033e2:	2302      	movs	r3, #2
 80033e4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		IeeeAddrRspFormat_t rsp;
		if (rpcLen < 13)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d802      	bhi.n	80033f4 <processIeeeAddrRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80033ee:	485a      	ldr	r0, [pc, #360]	; (8003558 <processIeeeAddrRsp+0x18c>)
 80033f0:	f008 fc46 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80033f4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800341a:	e029      	b.n	8003470 <processIeeeAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800341c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8003438:	00c9      	lsls	r1, r1, #3
 800343a:	f1a1 0620 	sub.w	r6, r1, #32
 800343e:	f1c1 0020 	rsb	r0, r1, #32
 8003442:	fa03 f501 	lsl.w	r5, r3, r1
 8003446:	fa02 f606 	lsl.w	r6, r2, r6
 800344a:	4335      	orrs	r5, r6
 800344c:	fa22 f000 	lsr.w	r0, r2, r0
 8003450:	4305      	orrs	r5, r0
 8003452:	fa02 f401 	lsl.w	r4, r2, r1
 8003456:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800345a:	ea40 0204 	orr.w	r2, r0, r4
 800345e:	ea41 0305 	orr.w	r3, r1, r5
 8003462:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8003466:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800346a:	3301      	adds	r3, #1
 800346c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8003470:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003474:	2b07      	cmp	r3, #7
 8003476:	d9d1      	bls.n	800341c <processIeeeAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003478:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b29a      	uxth	r2, r3
 8003484:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003488:	3301      	adds	r3, #1
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	440b      	add	r3, r1
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	4413      	add	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800349c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034a0:	3302      	adds	r3, #2
 80034a2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 80034a6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 80034ba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	76fb      	strb	r3, [r7, #27]
		rsp.StartIndex = (rsp.NumAssocDev == 0 ? 0 : rsp.StartIndex);
 80034ce:	7efb      	ldrb	r3, [r7, #27]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <processIeeeAddrRsp+0x10c>
 80034d4:	7ebb      	ldrb	r3, [r7, #26]
 80034d6:	e000      	b.n	80034da <processIeeeAddrRsp+0x10e>
 80034d8:	2300      	movs	r3, #0
 80034da:	76bb      	strb	r3, [r7, #26]
		if (rpcLen > 13)
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	2b0d      	cmp	r3, #13
 80034e0:	d92d      	bls.n	800353e <processIeeeAddrRsp+0x172>
		{
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034e8:	e023      	b.n	8003532 <processIeeeAddrRsp+0x166>
			{
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 80034ea:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034fa:	3301      	adds	r3, #1
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	440b      	add	r3, r1
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	4413      	add	r3, r2
 800350a:	b29a      	uxth	r2, r3
 800350c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003510:	3308      	adds	r3, #8
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003518:	440b      	add	r3, r1
 800351a:	f823 2ca4 	strh.w	r2, [r3, #-164]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 800351e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003522:	3302      	adds	r3, #2
 8003524:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++)
 8003528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800352c:	3301      	adds	r3, #1
 800352e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003532:	7efb      	ldrb	r3, [r7, #27]
 8003534:	461a      	mov	r2, r3
 8003536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800353a:	4293      	cmp	r3, r2
 800353c:	d3d5      	bcc.n	80034ea <processIeeeAddrRsp+0x11e>
			}
		}
		mtZdoCbs.pfnZdoIeeeAddrRsp(&rsp);
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <processIeeeAddrRsp+0x188>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f107 0208 	add.w	r2, r7, #8
 8003546:	4610      	mov	r0, r2
 8003548:	4798      	blx	r3
	}
}
 800354a:	bf00      	nop
 800354c:	37b4      	adds	r7, #180	; 0xb4
 800354e:	46bd      	mov	sp, r7
 8003550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003552:	bf00      	nop
 8003554:	2000054c 	.word	0x2000054c
 8003558:	0800de08 	.word	0x0800de08

0800355c <processNodeDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNodeDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNodeDescRsp)
 8003568:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <processNodeDescRsp+0x180>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b0 	beq.w	80036d2 <processNodeDescRsp+0x176>
	{
		uint8_t msgIdx = 2;
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
		NodeDescRspFormat_t rsp;
		if (rpcLen < 18)
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	2b11      	cmp	r3, #17
 800357a:	d802      	bhi.n	8003582 <processNodeDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800357c:	4858      	ldr	r0, [pc, #352]	; (80036e0 <processNodeDescRsp+0x184>)
 800357e:	f008 fb7f 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b29a      	uxth	r2, r3
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	3301      	adds	r3, #1
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	440b      	add	r3, r1
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	b29b      	uxth	r3, r3
 800359c:	4413      	add	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	3302      	adds	r3, #2
 80035a6:	77fb      	strb	r3, [r7, #31]
		rsp.Status = rpcBuff[msgIdx++];
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	77fa      	strb	r2, [r7, #31]
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80035b8:	7ffb      	ldrb	r3, [r7, #31]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	3301      	adds	r3, #1
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	440b      	add	r3, r1
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
 80035da:	3302      	adds	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
		rsp.LoTy_ComDescAv_UsrDesAv = rpcBuff[msgIdx++];
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	77fa      	strb	r2, [r7, #31]
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	73bb      	strb	r3, [r7, #14]
		rsp.APSFlg_FrqBnd = rpcBuff[msgIdx++];
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	77fa      	strb	r2, [r7, #31]
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	73fb      	strb	r3, [r7, #15]
		rsp.MACCapFlg = rpcBuff[msgIdx++];
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	77fa      	strb	r2, [r7, #31]
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	743b      	strb	r3, [r7, #16]
		rsp.ManufacturerCode = BUILD_UINT16(rpcBuff[msgIdx],
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b29a      	uxth	r2, r3
 8003618:	7ffb      	ldrb	r3, [r7, #31]
 800361a:	3301      	adds	r3, #1
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	440b      	add	r3, r1
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	b29b      	uxth	r3, r3
 8003628:	4413      	add	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	827b      	strh	r3, [r7, #18]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	3302      	adds	r3, #2
 8003632:	77fb      	strb	r3, [r7, #31]
		rsp.MaxBufferSize = rpcBuff[msgIdx++];
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	77fa      	strb	r2, [r7, #31]
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	753b      	strb	r3, [r7, #20]
		rsp.MaxTransferSize = BUILD_UINT16(rpcBuff[msgIdx],
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b29a      	uxth	r2, r3
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	3301      	adds	r3, #1
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	440b      	add	r3, r1
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	4413      	add	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	82fb      	strh	r3, [r7, #22]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 8003664:	7ffb      	ldrb	r3, [r7, #31]
 8003666:	3302      	adds	r3, #2
 8003668:	77fb      	strb	r3, [r7, #31]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b29a      	uxth	r2, r3
 8003674:	7ffb      	ldrb	r3, [r7, #31]
 8003676:	3301      	adds	r3, #1
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	440b      	add	r3, r1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b29b      	uxth	r3, r3
 8003684:	4413      	add	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	3302      	adds	r3, #2
 800368e:	77fb      	strb	r3, [r7, #31]
		rsp.MaxOutTransferSize = BUILD_UINT16(rpcBuff[msgIdx],
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b29a      	uxth	r2, r3
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	3301      	adds	r3, #1
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	440b      	add	r3, r1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	837b      	strh	r3, [r7, #26]
		        rpcBuff[msgIdx + 1]);
		msgIdx += 2;
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	3302      	adds	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
		rsp.DescriptorCapabilities = rpcBuff[msgIdx++];
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	77fa      	strb	r2, [r7, #31]
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	773b      	strb	r3, [r7, #28]

		mtZdoCbs.pfnZdoNodeDescRsp(&rsp);
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <processNodeDescRsp+0x180>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f107 0208 	add.w	r2, r7, #8
 80036ce:	4610      	mov	r0, r2
 80036d0:	4798      	blx	r3
	}
}
 80036d2:	bf00      	nop
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000054c 	.word	0x2000054c
 80036e0:	0800de08 	.word	0x0800de08

080036e4 <processPowerDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processPowerDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoPowerDescRsp)
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <processPowerDescRsp+0xb4>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d04b      	beq.n	8003790 <processPowerDescRsp+0xac>
	{
		uint8_t msgIdx = 2;
 80036f8:	2302      	movs	r3, #2
 80036fa:	75fb      	strb	r3, [r7, #23]
		PowerDescRspFormat_t rsp;
		if (rpcLen < 7)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d802      	bhi.n	8003708 <processPowerDescRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003702:	4826      	ldr	r0, [pc, #152]	; (800379c <processPowerDescRsp+0xb8>)
 8003704:	f008 fabc 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	3301      	adds	r3, #1
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	440b      	add	r3, r1
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	4413      	add	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	3302      	adds	r3, #2
 800372c:	75fb      	strb	r3, [r7, #23]
		rsp.Status = rpcBuff[msgIdx++];
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	75fa      	strb	r2, [r7, #23]
 8003734:	461a      	mov	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b29a      	uxth	r2, r3
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	3301      	adds	r3, #1
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	440b      	add	r3, r1
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	b29b      	uxth	r3, r3
 8003758:	4413      	add	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	3302      	adds	r3, #2
 8003762:	75fb      	strb	r3, [r7, #23]
		rsp.CurrntPwrMode_AvalPwrSrcs = rpcBuff[msgIdx++];
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	75fa      	strb	r2, [r7, #23]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	74bb      	strb	r3, [r7, #18]
		rsp.CurrntPwrSrc_CurrntPwrSrcLvl = rpcBuff[msgIdx++];
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	75fa      	strb	r2, [r7, #23]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	74fb      	strb	r3, [r7, #19]

		mtZdoCbs.pfnZdoPowerDescRsp(&rsp);
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <processPowerDescRsp+0xb4>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f107 020c 	add.w	r2, r7, #12
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
	}
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	2000054c 	.word	0x2000054c
 800379c:	0800de08 	.word	0x0800de08

080037a0 <processSimpleDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSimpleDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b098      	sub	sp, #96	; 0x60
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoSimpleDescRsp)
 80037ac:	4b83      	ldr	r3, [pc, #524]	; (80039bc <processSimpleDescRsp+0x21c>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80ff 	beq.w	80039b4 <processSimpleDescRsp+0x214>
	{
		uint8_t msgIdx = 2;
 80037b6:	2302      	movs	r3, #2
 80037b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		SimpleDescRspFormat_t rsp;
		if (rpcLen < 6)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d802      	bhi.n	80037c8 <processSimpleDescRsp+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80037c2:	487f      	ldr	r0, [pc, #508]	; (80039c0 <processSimpleDescRsp+0x220>)
 80037c4:	f008 fa5c 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80037c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037d8:	3301      	adds	r3, #1
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	440b      	add	r3, r1
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80037ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f0:	3302      	adds	r3, #2
 80037f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Status = rpcBuff[msgIdx++];
 80037f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800380a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800381a:	3301      	adds	r3, #1
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	440b      	add	r3, r1
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	b29b      	uxth	r3, r3
 8003828:	4413      	add	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800382e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003832:	3302      	adds	r3, #2
 8003834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Len = rpcBuff[msgIdx++];
 8003838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 6)
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b06      	cmp	r3, #6
 8003850:	f240 80aa 	bls.w	80039a8 <processSimpleDescRsp+0x208>
		{
			rsp.Endpoint = rpcBuff[msgIdx++];
 8003854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 800385e:	461a      	mov	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	73fb      	strb	r3, [r7, #15]
			rsp.ProfileID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b29a      	uxth	r2, r3
 8003874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003878:	3301      	adds	r3, #1
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	440b      	add	r3, r1
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	4413      	add	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	823b      	strh	r3, [r7, #16]
			msgIdx += 2;
 800388c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003890:	3302      	adds	r3, #2
 8003892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038a6:	3301      	adds	r3, #1
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	440b      	add	r3, r1
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	827b      	strh	r3, [r7, #18]
			msgIdx += 2;
 80038ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038be:	3302      	adds	r3, #2
 80038c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceVersion = rpcBuff[msgIdx++];
 80038c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	753b      	strb	r3, [r7, #20]
			rsp.NumInClusters = rpcBuff[msgIdx++];
 80038d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80038e2:	461a      	mov	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	757b      	strb	r3, [r7, #21]
			uint32_t i;
			for (i = 0; i < rsp.NumInClusters; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80038f0:	e020      	b.n	8003934 <processSimpleDescRsp+0x194>
			{
				rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 80038f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003902:	3301      	adds	r3, #1
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	440b      	add	r3, r1
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	b29b      	uxth	r3, r3
 8003910:	4413      	add	r3, r2
 8003912:	b29a      	uxth	r2, r3
 8003914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003916:	3304      	adds	r3, #4
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800391e:	440b      	add	r3, r1
 8003920:	f823 2c52 	strh.w	r2, [r3, #-82]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8003924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003928:	3302      	adds	r3, #2
 800392a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumInClusters; i++)
 800392e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003930:	3301      	adds	r3, #1
 8003932:	65bb      	str	r3, [r7, #88]	; 0x58
 8003934:	7d7b      	ldrb	r3, [r7, #21]
 8003936:	461a      	mov	r2, r3
 8003938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800393a:	4293      	cmp	r3, r2
 800393c:	d3d9      	bcc.n	80038f2 <processSimpleDescRsp+0x152>
			}
			rsp.NumOutClusters = rpcBuff[msgIdx++];
 800393e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8003948:	461a      	mov	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for (i = 0; i < rsp.NumOutClusters; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	65bb      	str	r3, [r7, #88]	; 0x58
 8003958:	e020      	b.n	800399c <processSimpleDescRsp+0x1fc>
			{
				rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 800395a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b29a      	uxth	r2, r3
 8003966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800396a:	3301      	adds	r3, #1
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	440b      	add	r3, r1
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	b29b      	uxth	r3, r3
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397e:	3318      	adds	r3, #24
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003986:	440b      	add	r3, r1
 8003988:	f823 2c58 	strh.w	r2, [r3, #-88]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 800398c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003990:	3302      	adds	r3, #2
 8003992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumOutClusters; i++)
 8003996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003998:	3301      	adds	r3, #1
 800399a:	65bb      	str	r3, [r7, #88]	; 0x58
 800399c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80039a0:	461a      	mov	r2, r3
 80039a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d3d8      	bcc.n	800395a <processSimpleDescRsp+0x1ba>
			}
		}
		mtZdoCbs.pfnZdoSimpleDescRsp(&rsp);
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <processSimpleDescRsp+0x21c>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f107 0208 	add.w	r2, r7, #8
 80039b0:	4610      	mov	r0, r2
 80039b2:	4798      	blx	r3
	}
}
 80039b4:	bf00      	nop
 80039b6:	3760      	adds	r7, #96	; 0x60
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000054c 	.word	0x2000054c
 80039c0:	0800de08 	.word	0x0800de08

080039c4 <processActiveEpRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processActiveEpRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09a      	sub	sp, #104	; 0x68
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoActiveEpRsp)
 80039d0:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <processActiveEpRsp+0xf8>)
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d06d      	beq.n	8003ab4 <processActiveEpRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 80039d8:	2302      	movs	r3, #2
 80039da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ActiveEpRspFormat_t rsp;
		if (rpcLen < 6)
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d802      	bhi.n	80039ea <processActiveEpRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80039e4:	4836      	ldr	r0, [pc, #216]	; (8003ac0 <processActiveEpRsp+0xfc>)
 80039e6:	f008 f94b 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80039ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039fa:	3301      	adds	r3, #1
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	440b      	add	r3, r1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003a0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a12:	3302      	adds	r3, #2
 8003a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8003a18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003a2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	440b      	add	r3, r1
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003a50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a54:	3302      	adds	r3, #2
 8003a56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ActiveEPCount = rpcBuff[msgIdx++];
 8003a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003a64:	461a      	mov	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d919      	bls.n	8003aa8 <processActiveEpRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.ActiveEPCount; i++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
 8003a78:	e011      	b.n	8003a9e <processActiveEpRsp+0xda>
			{
				rsp.ActiveEPList[i] = rpcBuff[msgIdx++];
 8003a7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	7819      	ldrb	r1, [r3, #0]
 8003a8c:	f107 0213 	add.w	r2, r7, #19
 8003a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a92:	4413      	add	r3, r2
 8003a94:	460a      	mov	r2, r1
 8003a96:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ActiveEPCount; i++)
 8003a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a9e:	7cbb      	ldrb	r3, [r7, #18]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d3e8      	bcc.n	8003a7a <processActiveEpRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoActiveEpRsp(&rsp);
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <processActiveEpRsp+0xf8>)
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f107 020c 	add.w	r2, r7, #12
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
	}
}
 8003ab4:	bf00      	nop
 8003ab6:	3768      	adds	r7, #104	; 0x68
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000054c 	.word	0x2000054c
 8003ac0:	0800de08 	.word	0x0800de08

08003ac4 <processMatchDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b09a      	sub	sp, #104	; 0x68
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRsp)
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <processMatchDescRsp+0xf8>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d06d      	beq.n	8003bb4 <processMatchDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		MatchDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d802      	bhi.n	8003aea <processMatchDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003ae4:	4836      	ldr	r0, [pc, #216]	; (8003bc0 <processMatchDescRsp+0xfc>)
 8003ae6:	f008 f8cb 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003aea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003afa:	3301      	adds	r3, #1
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	440b      	add	r3, r1
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b12:	3302      	adds	r3, #2
 8003b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8003b18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	440b      	add	r3, r1
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003b50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b54:	3302      	adds	r3, #2
 8003b56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.MatchLength = rpcBuff[msgIdx++];
 8003b5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d919      	bls.n	8003ba8 <processMatchDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.MatchLength; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
 8003b78:	e011      	b.n	8003b9e <processMatchDescRsp+0xda>
			{
				rsp.MatchList[i] = rpcBuff[msgIdx++];
 8003b7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	f107 0213 	add.w	r2, r7, #19
 8003b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b92:	4413      	add	r3, r2
 8003b94:	460a      	mov	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.MatchLength; i++)
 8003b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9e:	7cbb      	ldrb	r3, [r7, #18]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d3e8      	bcc.n	8003b7a <processMatchDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoMatchDescRsp(&rsp);
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <processMatchDescRsp+0xf8>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f107 020c 	add.w	r2, r7, #12
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3768      	adds	r7, #104	; 0x68
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000054c 	.word	0x2000054c
 8003bc0:	0800de08 	.word	0x0800de08

08003bc4 <processComplexDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processComplexDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b09a      	sub	sp, #104	; 0x68
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoComplexDescRsp)
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <processComplexDescRsp+0xf8>)
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06d      	beq.n	8003cb4 <processComplexDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ComplexDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d802      	bhi.n	8003bea <processComplexDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003be4:	4836      	ldr	r0, [pc, #216]	; (8003cc0 <processComplexDescRsp+0xfc>)
 8003be6:	f008 f84b 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003bea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	440b      	add	r3, r1
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003c0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c12:	3302      	adds	r3, #2
 8003c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8003c18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003c2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	440b      	add	r3, r1
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003c50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c54:	3302      	adds	r3, #2
 8003c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ComplexLength = rpcBuff[msgIdx++];
 8003c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003c64:	461a      	mov	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	2b06      	cmp	r3, #6
 8003c72:	d919      	bls.n	8003ca8 <processComplexDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.ComplexLength; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	663b      	str	r3, [r7, #96]	; 0x60
 8003c78:	e011      	b.n	8003c9e <processComplexDescRsp+0xda>
			{
				rsp.ComplexList[i] = rpcBuff[msgIdx++];
 8003c7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003c84:	461a      	mov	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	7819      	ldrb	r1, [r3, #0]
 8003c8c:	f107 0213 	add.w	r2, r7, #19
 8003c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c92:	4413      	add	r3, r2
 8003c94:	460a      	mov	r2, r1
 8003c96:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ComplexLength; i++)
 8003c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9e:	7cbb      	ldrb	r3, [r7, #18]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d3e8      	bcc.n	8003c7a <processComplexDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoComplexDescRsp(&rsp);
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <processComplexDescRsp+0xf8>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f107 020c 	add.w	r2, r7, #12
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4798      	blx	r3
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	3768      	adds	r7, #104	; 0x68
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000054c 	.word	0x2000054c
 8003cc0:	0800de08 	.word	0x0800de08

08003cc4 <processUserDescRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b09a      	sub	sp, #104	; 0x68
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescRsp)
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <processUserDescRsp+0xf8>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d06d      	beq.n	8003db4 <processUserDescRsp+0xf0>
	{
		uint8_t msgIdx = 2;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		UserDescRspFormat_t rsp;
		if (rpcLen < 6)
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d802      	bhi.n	8003cea <processUserDescRsp+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003ce4:	4836      	ldr	r0, [pc, #216]	; (8003dc0 <processUserDescRsp+0xfc>)
 8003ce6:	f007 ffcb 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003cea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	440b      	add	r3, r1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d12:	3302      	adds	r3, #2
 8003d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8003d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	440b      	add	r3, r1
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d54:	3302      	adds	r3, #2
 8003d56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Len = rpcBuff[msgIdx++];
 8003d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003d64:	461a      	mov	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6)
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d919      	bls.n	8003da8 <processUserDescRsp+0xe4>
		{
			uint32_t i;
			for (i = 0; i < rsp.Len; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	663b      	str	r3, [r7, #96]	; 0x60
 8003d78:	e011      	b.n	8003d9e <processUserDescRsp+0xda>
			{
				rsp.CUserDescriptor[i] = rpcBuff[msgIdx++];
 8003d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	7819      	ldrb	r1, [r3, #0]
 8003d8c:	f107 0213 	add.w	r2, r7, #19
 8003d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d92:	4413      	add	r3, r2
 8003d94:	460a      	mov	r2, r1
 8003d96:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++)
 8003d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d9e:	7cbb      	ldrb	r3, [r7, #18]
 8003da0:	461a      	mov	r2, r3
 8003da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d3e8      	bcc.n	8003d7a <processUserDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoUserDescRsp(&rsp);
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <processUserDescRsp+0xf8>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f107 020c 	add.w	r2, r7, #12
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
	}
}
 8003db4:	bf00      	nop
 8003db6:	3768      	adds	r7, #104	; 0x68
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	2000054c 	.word	0x2000054c
 8003dc0:	0800de08 	.word	0x0800de08

08003dc4 <processUserDescConf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescConf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescConf)
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <processUserDescConf+0x94>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03b      	beq.n	8003e50 <processUserDescConf+0x8c>
	{
		uint8_t msgIdx = 2;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	73fb      	strb	r3, [r7, #15]
		UserDescConfFormat_t rsp;
		if (rpcLen < 5)
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d802      	bhi.n	8003de8 <processUserDescConf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003de2:	481e      	ldr	r0, [pc, #120]	; (8003e5c <processUserDescConf+0x98>)
 8003de4:	f007 ff4c 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	3301      	adds	r3, #1
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	440b      	add	r3, r1
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	73fa      	strb	r2, [r7, #15]
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	440b      	add	r3, r1
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	3302      	adds	r3, #2
 8003e42:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoUserDescConf(&rsp);
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <processUserDescConf+0x94>)
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4798      	blx	r3
	}
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000054c 	.word	0x2000054c
 8003e5c:	0800de08 	.word	0x0800de08

08003e60 <processServerDiscRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processServerDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoServerDiscRsp)
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <processServerDiscRsp+0x94>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03b      	beq.n	8003eec <processServerDiscRsp+0x8c>
	{
		uint8_t msgIdx = 2;
 8003e74:	2302      	movs	r3, #2
 8003e76:	73fb      	strb	r3, [r7, #15]
		ServerDiscRspFormat_t rsp;
		if (rpcLen < 5)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d802      	bhi.n	8003e84 <processServerDiscRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003e7e:	481e      	ldr	r0, [pc, #120]	; (8003ef8 <processServerDiscRsp+0x98>)
 8003e80:	f007 fefe 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	440b      	add	r3, r1
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	73fa      	strb	r2, [r7, #15]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	72bb      	strb	r3, [r7, #10]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	440b      	add	r3, r1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	3302      	adds	r3, #2
 8003ede:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoServerDiscRsp(&rsp);
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <processServerDiscRsp+0x94>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f107 0208 	add.w	r2, r7, #8
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
	}
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000054c 	.word	0x2000054c
 8003ef8:	0800de08 	.word	0x0800de08

08003efc <processEndDeviceBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceBindRsp)
 8003f08:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <processEndDeviceBindRsp+0x70>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d028      	beq.n	8003f62 <processEndDeviceBindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8003f10:	2302      	movs	r3, #2
 8003f12:	73fb      	strb	r3, [r7, #15]
		EndDeviceBindRspFormat_t rsp;
		if (rpcLen < 3)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d802      	bhi.n	8003f20 <processEndDeviceBindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003f1a:	4815      	ldr	r0, [pc, #84]	; (8003f70 <processEndDeviceBindRsp+0x74>)
 8003f1c:	f007 feb0 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	440b      	add	r3, r1
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3302      	adds	r3, #2
 8003f44:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	73fa      	strb	r2, [r7, #15]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoEndDeviceBindRsp(&rsp);
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <processEndDeviceBindRsp+0x70>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f107 0208 	add.w	r2, r7, #8
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4798      	blx	r3
	}
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000054c 	.word	0x2000054c
 8003f70:	0800de08 	.word	0x0800de08

08003f74 <processBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoBindRsp)
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <processBindRsp+0x70>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d028      	beq.n	8003fda <processBindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	73fb      	strb	r3, [r7, #15]
		BindRspFormat_t rsp;
		if (rpcLen < 3)
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d802      	bhi.n	8003f98 <processBindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8003f92:	4815      	ldr	r0, [pc, #84]	; (8003fe8 <processBindRsp+0x74>)
 8003f94:	f007 fe74 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	440b      	add	r3, r1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	3302      	adds	r3, #2
 8003fbc:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	73fa      	strb	r2, [r7, #15]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoBindRsp(&rsp);
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <processBindRsp+0x70>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f107 0208 	add.w	r2, r7, #8
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
	}
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000054c 	.word	0x2000054c
 8003fe8:	0800de08 	.word	0x0800de08

08003fec <processUnbindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUnbindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUnbindRsp)
 8003ff8:	4b18      	ldr	r3, [pc, #96]	; (800405c <processUnbindRsp+0x70>)
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d028      	beq.n	8004052 <processUnbindRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004000:	2302      	movs	r3, #2
 8004002:	73fb      	strb	r3, [r7, #15]
		UnbindRspFormat_t rsp;
		if (rpcLen < 3)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d802      	bhi.n	8004010 <processUnbindRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800400a:	4815      	ldr	r0, [pc, #84]	; (8004060 <processUnbindRsp+0x74>)
 800400c:	f007 fe38 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b29a      	uxth	r2, r3
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	3301      	adds	r3, #1
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	440b      	add	r3, r1
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b29b      	uxth	r3, r3
 800402a:	4413      	add	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3302      	adds	r3, #2
 8004034:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	73fa      	strb	r2, [r7, #15]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoUnbindRsp(&rsp);
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <processUnbindRsp+0x70>)
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	f107 0208 	add.w	r2, r7, #8
 800404e:	4610      	mov	r0, r2
 8004050:	4798      	blx	r3
	}
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000054c 	.word	0x2000054c
 8004060:	0800de08 	.word	0x0800de08

08004064 <processMgmtNwkDiscRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtNwkDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004066:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 800406a:	af00      	add	r7, sp, #0
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	6018      	str	r0, [r3, #0]
 8004070:	460a      	mov	r2, r1
 8004072:	1cfb      	adds	r3, r7, #3
 8004074:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtNwkDiscRsp)
 8004076:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <processMgmtNwkDiscRsp+0x250>)
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8114 	beq.w	80042a8 <processMgmtNwkDiscRsp+0x244>
	{
		uint8_t msgIdx = 2;
 8004080:	2302      	movs	r3, #2
 8004082:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		MgmtNwkDiscRspFormat_t rsp;
		if (rpcLen < 6)
 8004086:	1cfb      	adds	r3, r7, #3
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d802      	bhi.n	8004094 <processMgmtNwkDiscRsp+0x30>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800408e:	488a      	ldr	r0, [pc, #552]	; (80042b8 <processMgmtNwkDiscRsp+0x254>)
 8004090:	f007 fdf6 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004094:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004098:	1d3a      	adds	r2, r7, #4
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80040a6:	3301      	adds	r3, #1
 80040a8:	1d39      	adds	r1, r7, #4
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	440b      	add	r3, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80040c0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80040c4:	3302      	adds	r3, #2
 80040c6:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		rsp.Status = rpcBuff[msgIdx++];
 80040ca:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80040d4:	461a      	mov	r2, r3
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	709a      	strb	r2, [r3, #2]
		rsp.NetworkCount = rpcBuff[msgIdx++];
 80040e4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80040ee:	461a      	mov	r2, r3
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4413      	add	r3, r2
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 80040fe:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004108:	461a      	mov	r2, r3
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4413      	add	r3, r2
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	711a      	strb	r2, [r3, #4]
		rsp.NetworkListCount = rpcBuff[msgIdx++];
 8004118:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004122:	461a      	mov	r2, r3
 8004124:	1d3b      	adds	r3, r7, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4413      	add	r3, r2
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	f107 0308 	add.w	r3, r7, #8
 8004130:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 8004132:	1cfb      	adds	r3, r7, #3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b06      	cmp	r3, #6
 8004138:	f240 80b0 	bls.w	800429c <processMgmtNwkDiscRsp+0x238>
		{
			uint32_t i;
			for (i = 0; i < rsp.NetworkListCount; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8004142:	e0a2      	b.n	800428a <processMgmtNwkDiscRsp+0x226>
			{
				rsp.NetworkList[i].PanID = 0;
 8004144:	f107 0208 	add.w	r2, r7, #8
 8004148:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	4413      	add	r3, r2
 8004150:	f103 0108 	add.w	r1, r3, #8
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8004166:	e038      	b.n	80041da <processMgmtNwkDiscRsp+0x176>
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++])
 8004168:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004172:	461a      	mov	r2, r3
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4413      	add	r3, r2
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	f04f 0300 	mov.w	r3, #0
					        << (ind * 8);
 8004182:	f897 1497 	ldrb.w	r1, [r7, #1175]	; 0x497
 8004186:	00c9      	lsls	r1, r1, #3
 8004188:	f1a1 0620 	sub.w	r6, r1, #32
 800418c:	f1c1 0020 	rsb	r0, r1, #32
 8004190:	fa03 f501 	lsl.w	r5, r3, r1
 8004194:	fa02 f606 	lsl.w	r6, r2, r6
 8004198:	4335      	orrs	r5, r6
 800419a:	fa22 f000 	lsr.w	r0, r2, r0
 800419e:	4305      	orrs	r5, r0
 80041a0:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++])
 80041a4:	f107 0208 	add.w	r2, r7, #8
 80041a8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4413      	add	r3, r2
 80041b0:	3308      	adds	r3, #8
 80041b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041b6:	ea40 0204 	orr.w	r2, r0, r4
 80041ba:	ea41 0305 	orr.w	r3, r1, r5
 80041be:	f107 0008 	add.w	r0, r7, #8
 80041c2:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 80041c6:	0109      	lsls	r1, r1, #4
 80041c8:	4401      	add	r1, r0
 80041ca:	3108      	adds	r1, #8
 80041cc:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 80041d0:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80041d4:	3301      	adds	r3, #1
 80041d6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 80041da:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80041de:	2b07      	cmp	r3, #7
 80041e0:	d9c2      	bls.n	8004168 <processMgmtNwkDiscRsp+0x104>
				rsp.NetworkList[i].LogicalChannel = rpcBuff[msgIdx++];
 80041e2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80041ec:	461a      	mov	r2, r3
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	7819      	ldrb	r1, [r3, #0]
 80041f6:	f107 0208 	add.w	r2, r7, #8
 80041fa:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80041fe:	3301      	adds	r3, #1
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	460a      	mov	r2, r1
 8004206:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].StackProf_ZigVer = rpcBuff[msgIdx++];
 8004208:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004212:	461a      	mov	r2, r3
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4413      	add	r3, r2
 800421a:	7819      	ldrb	r1, [r3, #0]
 800421c:	f107 0208 	add.w	r2, r7, #8
 8004220:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004224:	3301      	adds	r3, #1
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	3301      	adds	r3, #1
 800422c:	460a      	mov	r2, r1
 800422e:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].BeacOrd_SupFramOrd = rpcBuff[msgIdx++];
 8004230:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 800423a:	461a      	mov	r2, r3
 800423c:	1d3b      	adds	r3, r7, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4413      	add	r3, r2
 8004242:	7819      	ldrb	r1, [r3, #0]
 8004244:	f107 0208 	add.w	r2, r7, #8
 8004248:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800424c:	3301      	adds	r3, #1
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	3302      	adds	r3, #2
 8004254:	460a      	mov	r2, r1
 8004256:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].PermitJoin = rpcBuff[msgIdx++];
 8004258:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004262:	461a      	mov	r2, r3
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4413      	add	r3, r2
 800426a:	7819      	ldrb	r1, [r3, #0]
 800426c:	f107 0208 	add.w	r2, r7, #8
 8004270:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004274:	3301      	adds	r3, #1
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3303      	adds	r3, #3
 800427c:	460a      	mov	r2, r1
 800427e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NetworkListCount; i++)
 8004280:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004284:	3301      	adds	r3, #1
 8004286:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	795b      	ldrb	r3, [r3, #5]
 8004290:	461a      	mov	r2, r3
 8004292:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004296:	4293      	cmp	r3, r2
 8004298:	f4ff af54 	bcc.w	8004144 <processMgmtNwkDiscRsp+0xe0>
			}
		}
		mtZdoCbs.pfnZdoMgmtNwkDiscRsp(&rsp);
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <processMgmtNwkDiscRsp+0x250>)
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	f107 0208 	add.w	r2, r7, #8
 80042a4:	4610      	mov	r0, r2
 80042a6:	4798      	blx	r3
	}
}
 80042a8:	bf00      	nop
 80042aa:	f207 47a4 	addw	r7, r7, #1188	; 0x4a4
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	2000054c 	.word	0x2000054c
 80042b8:	0800de08 	.word	0x0800de08

080042bc <processMgmtLqiRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLqiRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80042bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042c0:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	6018      	str	r0, [r3, #0]
 80042ca:	460a      	mov	r2, r1
 80042cc:	1cfb      	adds	r3, r7, #3
 80042ce:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtLqiRsp)
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <processMgmtLqiRsp+0x1c4>)
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 81b3 	beq.w	8004640 <processMgmtLqiRsp+0x384>
	{
		uint8_t msgIdx = 2;
 80042da:	2302      	movs	r3, #2
 80042dc:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		MgmtLqiRspFormat_t rsp;
		if (rpcLen < 6)
 80042e0:	1cfb      	adds	r3, r7, #3
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d802      	bhi.n	80042ee <processMgmtLqiRsp+0x32>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80042e8:	4866      	ldr	r0, [pc, #408]	; (8004484 <processMgmtLqiRsp+0x1c8>)
 80042ea:	f007 fcc9 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80042ee:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80042f2:	1d3a      	adds	r2, r7, #4
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004300:	3301      	adds	r3, #1
 8004302:	1d39      	adds	r1, r7, #4
 8004304:	6809      	ldr	r1, [r1, #0]
 8004306:	440b      	add	r3, r1
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	b29b      	uxth	r3, r3
 8004310:	4413      	add	r3, r2
 8004312:	b29a      	uxth	r2, r3
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 800431a:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800431e:	3302      	adds	r3, #2
 8004320:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		rsp.Status = rpcBuff[msgIdx++];
 8004324:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 800432e:	461a      	mov	r2, r3
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4413      	add	r3, r2
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	f107 0308 	add.w	r3, r7, #8
 800433c:	709a      	strb	r2, [r3, #2]
		rsp.NeighborTableEntries = rpcBuff[msgIdx++];
 800433e:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004348:	461a      	mov	r2, r3
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4413      	add	r3, r2
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8004358:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004362:	461a      	mov	r2, r3
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4413      	add	r3, r2
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	711a      	strb	r2, [r3, #4]
		rsp.NeighborLqiListCount = rpcBuff[msgIdx++];
 8004372:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 800437c:	461a      	mov	r2, r3
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	781a      	ldrb	r2, [r3, #0]
 8004386:	f107 0308 	add.w	r3, r7, #8
 800438a:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 800438c:	1cfb      	adds	r3, r7, #3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b06      	cmp	r3, #6
 8004392:	f240 814c 	bls.w	800462e <processMgmtLqiRsp+0x372>
		{
			uint32_t i;
			for (i = 0; i < rsp.NeighborLqiListCount; i++)
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800439c:	e13e      	b.n	800461c <processMgmtLqiRsp+0x360>
			{

				rsp.NeighborLqiList[i].ExtendedPanID = 0;
 800439e:	f107 0108 	add.w	r1, r7, #8
 80043a2:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	f103 0108 	add.w	r1, r3, #8
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 80043c6:	e042      	b.n	800444e <processMgmtLqiRsp+0x192>
					rsp.NeighborLqiList[i].ExtendedPanID |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 80043c8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 80043d2:	461a      	mov	r2, r3
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 80043e6:	00c9      	lsls	r1, r1, #3
 80043e8:	f1a1 0620 	sub.w	r6, r1, #32
 80043ec:	f1c1 0020 	rsb	r0, r1, #32
 80043f0:	fa03 f901 	lsl.w	r9, r3, r1
 80043f4:	fa02 f606 	lsl.w	r6, r2, r6
 80043f8:	ea49 0906 	orr.w	r9, r9, r6
 80043fc:	fa22 f000 	lsr.w	r0, r2, r0
 8004400:	ea49 0900 	orr.w	r9, r9, r0
 8004404:	fa02 f801 	lsl.w	r8, r2, r1
					rsp.NeighborLqiList[i].ExtendedPanID |=
 8004408:	f107 0108 	add.w	r1, r7, #8
 800440c:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	3308      	adds	r3, #8
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	ea48 0002 	orr.w	r0, r8, r2
 8004424:	ea49 0103 	orr.w	r1, r9, r3
 8004428:	460a      	mov	r2, r1
 800442a:	4601      	mov	r1, r0
 800442c:	f107 0608 	add.w	r6, r7, #8
 8004430:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8004434:	4603      	mov	r3, r0
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4403      	add	r3, r0
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4433      	add	r3, r6
 800443e:	3308      	adds	r3, #8
 8004440:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8004444:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004448:	3301      	adds	r3, #1
 800444a:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 800444e:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004452:	2b07      	cmp	r3, #7
 8004454:	d9b8      	bls.n	80043c8 <processMgmtLqiRsp+0x10c>
				rsp.NeighborLqiList[i].ExtendedAddress = 0;
 8004456:	f107 0108 	add.w	r1, r7, #8
 800445a:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	f103 0110 	add.w	r1, r3, #16
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 800447e:	e044      	b.n	800450a <processMgmtLqiRsp+0x24e>
 8004480:	2000054c 	.word	0x2000054c
 8004484:	0800de08 	.word	0x0800de08
					rsp.NeighborLqiList[i].ExtendedAddress |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8004488:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004492:	461a      	mov	r2, r3
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4413      	add	r3, r2
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 80044a6:	00c9      	lsls	r1, r1, #3
 80044a8:	f1a1 0620 	sub.w	r6, r1, #32
 80044ac:	f1c1 0020 	rsb	r0, r1, #32
 80044b0:	fa03 f501 	lsl.w	r5, r3, r1
 80044b4:	fa02 f606 	lsl.w	r6, r2, r6
 80044b8:	4335      	orrs	r5, r6
 80044ba:	fa22 f000 	lsr.w	r0, r2, r0
 80044be:	4305      	orrs	r5, r0
 80044c0:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.NeighborLqiList[i].ExtendedAddress |=
 80044c4:	f107 0108 	add.w	r1, r7, #8
 80044c8:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	3310      	adds	r3, #16
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	ea44 0002 	orr.w	r0, r4, r2
 80044e0:	ea45 0103 	orr.w	r1, r5, r3
 80044e4:	460a      	mov	r2, r1
 80044e6:	4601      	mov	r1, r0
 80044e8:	f107 0608 	add.w	r6, r7, #8
 80044ec:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 80044f0:	4603      	mov	r3, r0
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4403      	add	r3, r0
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4433      	add	r3, r6
 80044fa:	3310      	adds	r3, #16
 80044fc:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8004500:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004504:	3301      	adds	r3, #1
 8004506:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 800450a:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 800450e:	2b07      	cmp	r3, #7
 8004510:	d9ba      	bls.n	8004488 <processMgmtLqiRsp+0x1cc>
				rsp.NeighborLqiList[i].NetworkAddress = BUILD_UINT16(
 8004512:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004516:	1d3a      	adds	r2, r7, #4
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b29a      	uxth	r2, r3
 8004520:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004524:	3301      	adds	r3, #1
 8004526:	1d39      	adds	r1, r7, #4
 8004528:	6809      	ldr	r1, [r1, #0]
 800452a:	440b      	add	r3, r1
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	b29b      	uxth	r3, r3
 8004534:	4413      	add	r3, r2
 8004536:	b298      	uxth	r0, r3
 8004538:	f107 0108 	add.w	r1, r7, #8
 800453c:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	4602      	mov	r2, r0
 800454e:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8004550:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004554:	3302      	adds	r3, #2
 8004556:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat =
				        rpcBuff[msgIdx++];
 800455a:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004564:	461a      	mov	r2, r3
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4413      	add	r3, r2
 800456c:	7818      	ldrb	r0, [r3, #0]
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat =
 800456e:	f107 0108 	add.w	r1, r7, #8
 8004572:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	4613      	mov	r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	3302      	adds	r3, #2
 8004584:	4602      	mov	r2, r0
 8004586:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].PermitJoining = rpcBuff[msgIdx++];
 8004588:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004592:	461a      	mov	r2, r3
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4413      	add	r3, r2
 800459a:	7818      	ldrb	r0, [r3, #0]
 800459c:	f107 0108 	add.w	r1, r7, #8
 80045a0:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	3303      	adds	r3, #3
 80045b2:	4602      	mov	r2, r0
 80045b4:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].Depth = rpcBuff[msgIdx++];
 80045b6:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 80045c0:	461a      	mov	r2, r3
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	7818      	ldrb	r0, [r3, #0]
 80045ca:	f107 0108 	add.w	r1, r7, #8
 80045ce:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	440b      	add	r3, r1
 80045de:	3304      	adds	r3, #4
 80045e0:	4602      	mov	r2, r0
 80045e2:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].LQI = rpcBuff[msgIdx++];
 80045e4:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 80045ee:	461a      	mov	r2, r3
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	7818      	ldrb	r0, [r3, #0]
 80045f8:	f107 0108 	add.w	r1, r7, #8
 80045fc:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	3305      	adds	r3, #5
 800460e:	4602      	mov	r2, r0
 8004610:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NeighborLqiListCount; i++)
 8004612:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004616:	3301      	adds	r3, #1
 8004618:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	795b      	ldrb	r3, [r3, #5]
 8004622:	461a      	mov	r2, r3
 8004624:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004628:	4293      	cmp	r3, r2
 800462a:	f4ff aeb8 	bcc.w	800439e <processMgmtLqiRsp+0xe2>

			}
		}
		MgmtLqiRspFormat_t *copyy = &rsp;
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
		mtZdoCbs.pfnZdoMgmtLqiRsp(copyy);
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <processMgmtLqiRsp+0x390>)
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
 800463e:	4798      	blx	r3
	}
}
 8004640:	bf00      	nop
 8004642:	f207 6754 	addw	r7, r7, #1620	; 0x654
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800464c:	2000054c 	.word	0x2000054c

08004650 <processMgmtRtgRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtRtgRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0f6      	sub	sp, #472	; 0x1d8
 8004654:	af00      	add	r7, sp, #0
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	6018      	str	r0, [r3, #0]
 800465a:	460a      	mov	r2, r1
 800465c:	1cfb      	adds	r3, r7, #3
 800465e:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtRtgRsp)
 8004660:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <processMgmtRtgRsp+0x1c8>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80d2 	beq.w	800480e <processMgmtRtgRsp+0x1be>
	{
		uint8_t msgIdx = 2;
 800466a:	2302      	movs	r3, #2
 800466c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		MgmtRtgRspFormat_t rsp;
		if (rpcLen < 6)
 8004670:	1cfb      	adds	r3, r7, #3
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b05      	cmp	r3, #5
 8004676:	d802      	bhi.n	800467e <processMgmtRtgRsp+0x2e>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004678:	4868      	ldr	r0, [pc, #416]	; (800481c <processMgmtRtgRsp+0x1cc>)
 800467a:	f007 fb01 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800467e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004682:	1d3a      	adds	r2, r7, #4
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4413      	add	r3, r2
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b29a      	uxth	r2, r3
 800468c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004690:	3301      	adds	r3, #1
 8004692:	1d39      	adds	r1, r7, #4
 8004694:	6809      	ldr	r1, [r1, #0]
 8004696:	440b      	add	r3, r1
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80046aa:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80046ae:	3302      	adds	r3, #2
 80046b0:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		rsp.Status = rpcBuff[msgIdx++];
 80046b4:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80046be:	461a      	mov	r2, r3
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	709a      	strb	r2, [r3, #2]
		rsp.RoutingTableEntries = rpcBuff[msgIdx++];
 80046ce:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80046d8:	461a      	mov	r2, r3
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 80046e8:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80046f2:	461a      	mov	r2, r3
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	711a      	strb	r2, [r3, #4]
		rsp.RoutingTableListCount = rpcBuff[msgIdx++];
 8004702:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800470c:	461a      	mov	r2, r3
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4413      	add	r3, r2
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 800471c:	1cfb      	adds	r3, r7, #3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d96e      	bls.n	8004802 <processMgmtRtgRsp+0x1b2>
		{
			uint32_t i;
			for (i = 0; i < rsp.RoutingTableListCount; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800472a:	e062      	b.n	80047f2 <processMgmtRtgRsp+0x1a2>
			{
				rsp.RoutingTableList[i].DstAddr = BUILD_UINT16(rpcBuff[msgIdx],
 800472c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004730:	1d3a      	adds	r2, r7, #4
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b29a      	uxth	r2, r3
 800473a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800473e:	3301      	adds	r3, #1
 8004740:	1d39      	adds	r1, r7, #4
 8004742:	6809      	ldr	r1, [r1, #0]
 8004744:	440b      	add	r3, r1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	b29b      	uxth	r3, r3
 800474e:	4413      	add	r3, r2
 8004750:	b298      	uxth	r0, r3
 8004752:	f107 0108 	add.w	r1, r7, #8
 8004756:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	3306      	adds	r3, #6
 8004766:	4602      	mov	r2, r0
 8004768:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 800476a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800476e:	3302      	adds	r3, #2
 8004770:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
				rsp.RoutingTableList[i].Status = rpcBuff[msgIdx++];
 8004774:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800477e:	461a      	mov	r2, r3
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4413      	add	r3, r2
 8004786:	7818      	ldrb	r0, [r3, #0]
 8004788:	f107 0108 	add.w	r1, r7, #8
 800478c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8004790:	4613      	mov	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4413      	add	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	440b      	add	r3, r1
 800479a:	3308      	adds	r3, #8
 800479c:	4602      	mov	r2, r0
 800479e:	701a      	strb	r2, [r3, #0]
				rsp.RoutingTableList[i].NextHop = BUILD_UINT16(rpcBuff[msgIdx],
 80047a0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80047a4:	1d3a      	adds	r2, r7, #4
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	4413      	add	r3, r2
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80047b2:	3301      	adds	r3, #1
 80047b4:	1d39      	adds	r1, r7, #4
 80047b6:	6809      	ldr	r1, [r1, #0]
 80047b8:	440b      	add	r3, r1
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	b298      	uxth	r0, r3
 80047c6:	f107 0108 	add.w	r1, r7, #8
 80047ca:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	440b      	add	r3, r1
 80047d8:	330a      	adds	r3, #10
 80047da:	4602      	mov	r2, r0
 80047dc:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 80047de:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80047e2:	3302      	adds	r3, #2
 80047e4:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			for (i = 0; i < rsp.RoutingTableListCount; i++)
 80047e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80047ec:	3301      	adds	r3, #1
 80047ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	795b      	ldrb	r3, [r3, #5]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80047fe:	4293      	cmp	r3, r2
 8004800:	d394      	bcc.n	800472c <processMgmtRtgRsp+0xdc>
			}
		}
		mtZdoCbs.pfnZdoMgmtRtgRsp(&rsp);
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <processMgmtRtgRsp+0x1c8>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f107 0208 	add.w	r2, r7, #8
 800480a:	4610      	mov	r0, r2
 800480c:	4798      	blx	r3
	}
}
 800480e:	bf00      	nop
 8004810:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	2000054c 	.word	0x2000054c
 800481c:	0800de08 	.word	0x0800de08

08004820 <processMgmtBindRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtBindRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004820:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8004824:	f5ad 6d18 	sub.w	sp, sp, #2432	; 0x980
 8004828:	af00      	add	r7, sp, #0
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	6018      	str	r0, [r3, #0]
 800482e:	460a      	mov	r2, r1
 8004830:	1cfb      	adds	r3, r7, #3
 8004832:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtBindRsp)
 8004834:	4bb6      	ldr	r3, [pc, #728]	; (8004b10 <processMgmtBindRsp+0x2f0>)
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8162 	beq.w	8004b02 <processMgmtBindRsp+0x2e2>
	{
		uint8_t msgIdx = 2;
 800483e:	2302      	movs	r3, #2
 8004840:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		MgmtBindRspFormat_t rsp;
		if (rpcLen < 6)
 8004844:	1cfb      	adds	r3, r7, #3
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d802      	bhi.n	8004852 <processMgmtBindRsp+0x32>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800484c:	48b1      	ldr	r0, [pc, #708]	; (8004b14 <processMgmtBindRsp+0x2f4>)
 800484e:	f007 fa17 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004852:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004856:	1d3a      	adds	r2, r7, #4
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004864:	3301      	adds	r3, #1
 8004866:	1d39      	adds	r1, r7, #4
 8004868:	6809      	ldr	r1, [r1, #0]
 800486a:	440b      	add	r3, r1
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	b29b      	uxth	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	b29a      	uxth	r2, r3
 8004878:	f107 0308 	add.w	r3, r7, #8
 800487c:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 800487e:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004882:	3302      	adds	r3, #2
 8004884:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		rsp.Status = rpcBuff[msgIdx++];
 8004888:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004892:	461a      	mov	r2, r3
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4413      	add	r3, r2
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	709a      	strb	r2, [r3, #2]
		rsp.BindingTableEntries = rpcBuff[msgIdx++];
 80048a2:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80048ac:	461a      	mov	r2, r3
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 80048bc:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80048c6:	461a      	mov	r2, r3
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	711a      	strb	r2, [r3, #4]
		rsp.BindingTableListCount = rpcBuff[msgIdx++];
 80048d6:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80048e0:	461a      	mov	r2, r3
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6)
 80048f0:	1cfb      	adds	r3, r7, #3
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b06      	cmp	r3, #6
 80048f6:	f240 80fe 	bls.w	8004af6 <processMgmtBindRsp+0x2d6>
		{
			uint32_t i;
			for (i = 0; i < rsp.BindingTableListCount; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8004900:	e0f0      	b.n	8004ae4 <processMgmtBindRsp+0x2c4>
			{
				rsp.BindingTableList[i].SrcIEEEAddr = 0;
 8004902:	f107 0208 	add.w	r2, r7, #8
 8004906:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800490a:	015b      	lsls	r3, r3, #5
 800490c:	4413      	add	r3, r2
 800490e:	f103 0108 	add.w	r1, r3, #8
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t i;
				for (i = 0; i < 8; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8004924:	e03a      	b.n	800499c <processMgmtBindRsp+0x17c>
					rsp.BindingTableList[i].SrcIEEEAddr |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004926:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004930:	461a      	mov	r2, r3
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4413      	add	r3, r2
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 8004944:	00c9      	lsls	r1, r1, #3
 8004946:	f1a1 0620 	sub.w	r6, r1, #32
 800494a:	f1c1 0020 	rsb	r0, r1, #32
 800494e:	fa03 f901 	lsl.w	r9, r3, r1
 8004952:	fa02 f606 	lsl.w	r6, r2, r6
 8004956:	ea49 0906 	orr.w	r9, r9, r6
 800495a:	fa22 f000 	lsr.w	r0, r2, r0
 800495e:	ea49 0900 	orr.w	r9, r9, r0
 8004962:	fa02 f801 	lsl.w	r8, r2, r1
					rsp.BindingTableList[i].SrcIEEEAddr |=
 8004966:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800496a:	f107 0208 	add.w	r2, r7, #8
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	4413      	add	r3, r2
 8004972:	3308      	adds	r3, #8
 8004974:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8004978:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 800497c:	ea4b 0208 	orr.w	r2, fp, r8
 8004980:	ea4c 0309 	orr.w	r3, ip, r9
 8004984:	f107 0008 	add.w	r0, r7, #8
 8004988:	0149      	lsls	r1, r1, #5
 800498a:	4401      	add	r1, r0
 800498c:	3108      	adds	r1, #8
 800498e:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8004992:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004996:	3301      	adds	r3, #1
 8004998:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 800499c:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80049a0:	2b07      	cmp	r3, #7
 80049a2:	d9c0      	bls.n	8004926 <processMgmtBindRsp+0x106>
				rsp.BindingTableList[i].SrcEndpoint = rpcBuff[msgIdx++];
 80049a4:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80049ae:	461a      	mov	r2, r3
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	441a      	add	r2, r3
 80049b6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80049ba:	7811      	ldrb	r1, [r2, #0]
 80049bc:	f107 0208 	add.w	r2, r7, #8
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	4413      	add	r3, r2
 80049c4:	3310      	adds	r3, #16
 80049c6:	460a      	mov	r2, r1
 80049c8:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].ClusterID = rpcBuff[msgIdx++];
 80049ca:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80049d4:	461a      	mov	r2, r3
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	441a      	add	r2, r3
 80049dc:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80049e0:	7811      	ldrb	r1, [r2, #0]
 80049e2:	f107 0208 	add.w	r2, r7, #8
 80049e6:	015b      	lsls	r3, r3, #5
 80049e8:	4413      	add	r3, r2
 80049ea:	3311      	adds	r3, #17
 80049ec:	460a      	mov	r2, r1
 80049ee:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstAddrMode = rpcBuff[msgIdx++];
 80049f0:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80049fa:	461a      	mov	r2, r3
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	441a      	add	r2, r3
 8004a02:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004a06:	7811      	ldrb	r1, [r2, #0]
 8004a08:	f107 0208 	add.w	r2, r7, #8
 8004a0c:	015b      	lsls	r3, r3, #5
 8004a0e:	4413      	add	r3, r2
 8004a10:	3312      	adds	r3, #18
 8004a12:	460a      	mov	r2, r1
 8004a14:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstIEEEAddr = 0;
 8004a16:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004a1a:	f107 0208 	add.w	r2, r7, #8
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	4413      	add	r3, r2
 8004a22:	f103 0118 	add.w	r1, r3, #24
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8004a38:	e038      	b.n	8004aac <processMgmtBindRsp+0x28c>
					rsp.BindingTableList[i].DstIEEEAddr |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004a3a:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004a44:	461a      	mov	r2, r3
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 8004a58:	00c9      	lsls	r1, r1, #3
 8004a5a:	f1a1 0620 	sub.w	r6, r1, #32
 8004a5e:	f1c1 0020 	rsb	r0, r1, #32
 8004a62:	fa03 f501 	lsl.w	r5, r3, r1
 8004a66:	fa02 f606 	lsl.w	r6, r2, r6
 8004a6a:	4335      	orrs	r5, r6
 8004a6c:	fa22 f000 	lsr.w	r0, r2, r0
 8004a70:	4305      	orrs	r5, r0
 8004a72:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.BindingTableList[i].DstIEEEAddr |=
 8004a76:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004a7a:	f107 0208 	add.w	r2, r7, #8
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	4413      	add	r3, r2
 8004a82:	3318      	adds	r3, #24
 8004a84:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8004a88:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 8004a8c:	ea4b 0204 	orr.w	r2, fp, r4
 8004a90:	ea4c 0305 	orr.w	r3, ip, r5
 8004a94:	f107 0008 	add.w	r0, r7, #8
 8004a98:	0149      	lsls	r1, r1, #5
 8004a9a:	4401      	add	r1, r0
 8004a9c:	3118      	adds	r1, #24
 8004a9e:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8004aa2:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8004aac:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d9c2      	bls.n	8004a3a <processMgmtBindRsp+0x21a>
				rsp.BindingTableList[i].DstEndpoint = rpcBuff[msgIdx++];
 8004ab4:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8004abe:	461a      	mov	r2, r3
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8004aca:	7811      	ldrb	r1, [r2, #0]
 8004acc:	f107 0208 	add.w	r2, r7, #8
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	4413      	add	r3, r2
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.BindingTableListCount; i++)
 8004ada:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	795b      	ldrb	r3, [r3, #5]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8004af0:	4293      	cmp	r3, r2
 8004af2:	f4ff af06 	bcc.w	8004902 <processMgmtBindRsp+0xe2>
			}
		}
		mtZdoCbs.pfnZdoMgmtBindRsp(&rsp);
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <processMgmtBindRsp+0x2f0>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f107 0208 	add.w	r2, r7, #8
 8004afe:	4610      	mov	r0, r2
 8004b00:	4798      	blx	r3
	}
}
 8004b02:	bf00      	nop
 8004b04:	f507 6718 	add.w	r7, r7, #2432	; 0x980
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000054c 	.word	0x2000054c
 8004b14:	0800de08 	.word	0x0800de08

08004b18 <processMgmtLeaveRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLeaveRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtLeaveRsp)
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <processMgmtLeaveRsp+0x70>)
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d028      	beq.n	8004b7e <processMgmtLeaveRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	73fb      	strb	r3, [r7, #15]
		MgmtLeaveRspFormat_t rsp;
		if (rpcLen < 3)
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d802      	bhi.n	8004b3c <processMgmtLeaveRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004b36:	4815      	ldr	r0, [pc, #84]	; (8004b8c <processMgmtLeaveRsp+0x74>)
 8004b38:	f007 f8a2 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	440b      	add	r3, r1
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	3302      	adds	r3, #2
 8004b60:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	73fa      	strb	r2, [r7, #15]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtLeaveRsp(&rsp);
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <processMgmtLeaveRsp+0x70>)
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	f107 0208 	add.w	r2, r7, #8
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4798      	blx	r3
	}
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000054c 	.word	0x2000054c
 8004b8c:	0800de08 	.word	0x0800de08

08004b90 <processMgmtDirectJoinRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtDirectJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtDirectJoinRsp)
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <processMgmtDirectJoinRsp+0x70>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d028      	beq.n	8004bf6 <processMgmtDirectJoinRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	73fb      	strb	r3, [r7, #15]
		MgmtDirectJoinRspFormat_t rsp;
		if (rpcLen < 3)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d802      	bhi.n	8004bb4 <processMgmtDirectJoinRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004bae:	4815      	ldr	r0, [pc, #84]	; (8004c04 <processMgmtDirectJoinRsp+0x74>)
 8004bb0:	f007 f866 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	440b      	add	r3, r1
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	73fa      	strb	r2, [r7, #15]
 8004be0:	461a      	mov	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtDirectJoinRsp(&rsp);
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <processMgmtDirectJoinRsp+0x70>)
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	f107 0208 	add.w	r2, r7, #8
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4798      	blx	r3
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2000054c 	.word	0x2000054c
 8004c04:	0800de08 	.word	0x0800de08

08004c08 <processMgmtPermitJoinRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtPermitJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtPermitJoinRsp)
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <processMgmtPermitJoinRsp+0x70>)
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d028      	beq.n	8004c6e <processMgmtPermitJoinRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	73fb      	strb	r3, [r7, #15]
		MgmtPermitJoinRspFormat_t rsp;
		if (rpcLen < 3)
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d802      	bhi.n	8004c2c <processMgmtPermitJoinRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004c26:	4815      	ldr	r0, [pc, #84]	; (8004c7c <processMgmtPermitJoinRsp+0x74>)
 8004c28:	f007 f82a 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3302      	adds	r3, #2
 8004c50:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	73fa      	strb	r2, [r7, #15]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtPermitJoinRsp(&rsp);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <processMgmtPermitJoinRsp+0x70>)
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4798      	blx	r3
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	2000054c 	.word	0x2000054c
 8004c7c:	0800de08 	.word	0x0800de08

08004c80 <processEndDeviceAnnceInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceAnnceInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c82:	b08b      	sub	sp, #44	; 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceAnnceInd)
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <processEndDeviceAnnceInd+0x11c>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d07e      	beq.n	8004d92 <processEndDeviceAnnceInd+0x112>
	{
		uint8_t msgIdx = 2;
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		EndDeviceAnnceIndFormat_t rsp;
		if (rpcLen < 13)
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d802      	bhi.n	8004ca6 <processEndDeviceAnnceInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004ca0:	483f      	ldr	r0, [pc, #252]	; (8004da0 <processEndDeviceAnnceInd+0x120>)
 8004ca2:	f006 ffed 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	440b      	add	r3, r1
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cce:	3302      	adds	r3, #2
 8004cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	440b      	add	r3, r1
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8004cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.IEEEAddr = 0;
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d14:	e029      	b.n	8004d6a <processEndDeviceAnnceInd+0xea>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004d20:	461a      	mov	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004d32:	00c9      	lsls	r1, r1, #3
 8004d34:	f1a1 0620 	sub.w	r6, r1, #32
 8004d38:	f1c1 0020 	rsb	r0, r1, #32
 8004d3c:	fa03 f501 	lsl.w	r5, r3, r1
 8004d40:	fa02 f606 	lsl.w	r6, r2, r6
 8004d44:	4335      	orrs	r5, r6
 8004d46:	fa22 f000 	lsr.w	r0, r2, r0
 8004d4a:	4305      	orrs	r5, r0
 8004d4c:	fa02 f401 	lsl.w	r4, r2, r1
 8004d50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d54:	ea40 0204 	orr.w	r2, r0, r4
 8004d58:	ea41 0305 	orr.w	r3, r1, r5
 8004d5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8004d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d64:	3301      	adds	r3, #1
 8004d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d6e:	2b07      	cmp	r3, #7
 8004d70:	d9d1      	bls.n	8004d16 <processEndDeviceAnnceInd+0x96>
		rsp.Capabilities = rpcBuff[msgIdx++];
 8004d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	763b      	strb	r3, [r7, #24]

		mtZdoCbs.pfnZdoEndDeviceAnnceInd(&rsp);
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <processEndDeviceAnnceInd+0x11c>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	f107 0208 	add.w	r2, r7, #8
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4798      	blx	r3
	}
}
 8004d92:	bf00      	nop
 8004d94:	372c      	adds	r7, #44	; 0x2c
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000054c 	.word	0x2000054c
 8004da0:	0800de08 	.word	0x0800de08

08004da4 <processMatchDescRspSent>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRspSent(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b096      	sub	sp, #88	; 0x58
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRspSent)
 8004db0:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <processMatchDescRspSent+0x138>)
 8004db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 808d 	beq.w	8004ed4 <processMatchDescRspSent+0x130>
	{
		uint8_t msgIdx = 2;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		MatchDescRspSentFormat_t rsp;
		if (rpcLen < 4)
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d802      	bhi.n	8004dcc <processMatchDescRspSent+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004dc6:	4846      	ldr	r0, [pc, #280]	; (8004ee0 <processMatchDescRspSent+0x13c>)
 8004dc8:	f006 ff5a 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ddc:	3301      	adds	r3, #1
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	440b      	add	r3, r1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004df4:	3302      	adds	r3, #2
 8004df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		rsp.NumInClusters = rpcBuff[msgIdx++];
 8004dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	72bb      	strb	r3, [r7, #10]
		uint32_t i;
		for (i = 0; i < rsp.NumInClusters; i++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
 8004e12:	e01f      	b.n	8004e54 <processMatchDescRspSent+0xb0>
		{
			rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8004e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e24:	3301      	adds	r3, #1
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	440b      	add	r3, r1
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004e3e:	440b      	add	r3, r1
 8004e40:	f823 2c4c 	strh.w	r2, [r3, #-76]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 8004e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e48:	3302      	adds	r3, #2
 8004e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumInClusters; i++)
 8004e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e50:	3301      	adds	r3, #1
 8004e52:	653b      	str	r3, [r7, #80]	; 0x50
 8004e54:	7abb      	ldrb	r3, [r7, #10]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d3da      	bcc.n	8004e14 <processMatchDescRspSent+0x70>
		}
		rsp.NumOutClusters = rpcBuff[msgIdx++];
 8004e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for (i = 0; i < rsp.NumOutClusters; i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	653b      	str	r3, [r7, #80]	; 0x50
 8004e78:	e020      	b.n	8004ebc <processMatchDescRspSent+0x118>
		{
			rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8004e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	440b      	add	r3, r1
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f823 2c4a 	strh.w	r2, [r3, #-74]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 8004eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumOutClusters; i++)
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	3301      	adds	r3, #1
 8004eba:	653b      	str	r3, [r7, #80]	; 0x50
 8004ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d3d8      	bcc.n	8004e7a <processMatchDescRspSent+0xd6>
		}

		mtZdoCbs.pfnZdoMatchDescRspSent(&rsp);
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <processMatchDescRspSent+0x138>)
 8004eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ecc:	f107 0208 	add.w	r2, r7, #8
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
	}
}
 8004ed4:	bf00      	nop
 8004ed6:	3758      	adds	r7, #88	; 0x58
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2000054c 	.word	0x2000054c
 8004ee0:	0800de08 	.word	0x0800de08

08004ee4 <processStatusErrorRsp>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processStatusErrorRsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoStatusErrorRsp)
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <processStatusErrorRsp+0x70>)
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d028      	beq.n	8004f4a <processStatusErrorRsp+0x66>
	{
		uint8_t msgIdx = 2;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	73fb      	strb	r3, [r7, #15]
		StatusErrorRspFormat_t rsp;
		if (rpcLen < 3)
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d802      	bhi.n	8004f08 <processStatusErrorRsp+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004f02:	4815      	ldr	r0, [pc, #84]	; (8004f58 <processStatusErrorRsp+0x74>)
 8004f04:	f006 febc 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3301      	adds	r3, #1
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	440b      	add	r3, r1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	73fa      	strb	r2, [r7, #15]
 8004f34:	461a      	mov	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoStatusErrorRsp(&rsp);
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <processStatusErrorRsp+0x70>)
 8004f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f42:	f107 0208 	add.w	r2, r7, #8
 8004f46:	4610      	mov	r0, r2
 8004f48:	4798      	blx	r3
	}
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2000054c 	.word	0x2000054c
 8004f58:	0800de08 	.word	0x0800de08

08004f5c <processSrcRtgInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSrcRtgInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	1d3b      	adds	r3, r7, #4
 8004f66:	6018      	str	r0, [r3, #0]
 8004f68:	460a      	mov	r2, r1
 8004f6a:	1cfb      	adds	r3, r7, #3
 8004f6c:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoSrcRtgInd)
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <processSrcRtgInd+0xf8>)
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d068      	beq.n	8005048 <processSrcRtgInd+0xec>
	{
		uint8_t msgIdx = 2;
 8004f76:	2302      	movs	r3, #2
 8004f78:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		SrcRtgIndFormat_t rsp;
		if (rpcLen < 4)
 8004f7c:	1cfb      	adds	r3, r7, #3
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d802      	bhi.n	8004f8a <processSrcRtgInd+0x2e>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8004f84:	4834      	ldr	r0, [pc, #208]	; (8005058 <processSrcRtgInd+0xfc>)
 8004f86:	f006 fe7b 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004f8a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004f8e:	1d3a      	adds	r2, r7, #4
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	1d39      	adds	r1, r7, #4
 8004fa0:	6809      	ldr	r1, [r1, #0]
 8004fa2:	440b      	add	r3, r1
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	f107 030c 	add.w	r3, r7, #12
 8004fb4:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8004fb6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004fba:	3302      	adds	r3, #2
 8004fbc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		rsp.RelayCount = rpcBuff[msgIdx++];
 8004fc0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8004fca:	461a      	mov	r2, r3
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	f107 030c 	add.w	r3, r7, #12
 8004fd8:	709a      	strb	r2, [r3, #2]
		uint32_t i;
		for (i = 0; i < rsp.RelayCount; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004fe0:	e024      	b.n	800502c <processSrcRtgInd+0xd0>
		{
			rsp.RelayList[i] = BUILD_UINT16(rpcBuff[msgIdx],
 8004fe2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004fe6:	1d3a      	adds	r2, r7, #4
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	1d39      	adds	r1, r7, #4
 8004ff8:	6809      	ldr	r1, [r1, #0]
 8004ffa:	440b      	add	r3, r1
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	b29b      	uxth	r3, r3
 8005004:	4413      	add	r3, r2
 8005006:	b299      	uxth	r1, r3
 8005008:	f107 020c 	add.w	r2, r7, #12
 800500c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	460a      	mov	r2, r1
 8005016:	809a      	strh	r2, [r3, #4]
			        rpcBuff[msgIdx + 1]);
			msgIdx += 2;
 8005018:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800501c:	3302      	adds	r3, #2
 800501e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (i = 0; i < rsp.RelayCount; i++)
 8005022:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005026:	3301      	adds	r3, #1
 8005028:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	789b      	ldrb	r3, [r3, #2]
 8005032:	461a      	mov	r2, r3
 8005034:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005038:	4293      	cmp	r3, r2
 800503a:	d3d2      	bcc.n	8004fe2 <processSrcRtgInd+0x86>
		}

		mtZdoCbs.pfnZdoSrcRtgInd(&rsp);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <processSrcRtgInd+0xf8>)
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	f107 020c 	add.w	r2, r7, #12
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
	}
}
 8005048:	bf00      	nop
 800504a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000054c 	.word	0x2000054c
 8005058:	0800de08 	.word	0x0800de08

0800505c <processBeaconNotifyInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBeaconNotifyInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8005062:	af00      	add	r7, sp, #0
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	6018      	str	r0, [r3, #0]
 8005068:	460a      	mov	r2, r1
 800506a:	1cfb      	adds	r3, r7, #3
 800506c:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoBeaconNotifyInd)
 800506e:	4bd5      	ldr	r3, [pc, #852]	; (80053c4 <processBeaconNotifyInd+0x368>)
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 81a1 	beq.w	80053ba <processBeaconNotifyInd+0x35e>
	{
		uint8_t msgIdx = 2;
 8005078:	2302      	movs	r3, #2
 800507a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		BeaconNotifyIndFormat_t rsp;
		if (rpcLen < 1)
 800507e:	1cfb      	adds	r3, r7, #3
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <processBeaconNotifyInd+0x30>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 8005086:	48d0      	ldr	r0, [pc, #832]	; (80053c8 <processBeaconNotifyInd+0x36c>)
 8005088:	f006 fdfa 	bl	800bc80 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 800508c:	1cfb      	adds	r3, r7, #3
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	48ce      	ldr	r0, [pc, #824]	; (80053cc <processBeaconNotifyInd+0x370>)
 8005094:	f006 fd80 	bl	800bb98 <iprintf>

		rsp.BeaconCount = rpcBuff[msgIdx++];
 8005098:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80050a2:	461a      	mov	r2, r3
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4413      	add	r3, r2
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	701a      	strb	r2, [r3, #0]
		if (rpcLen > 1)
 80050b2:	1cfb      	adds	r3, r7, #3
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	f240 8179 	bls.w	80053ae <processBeaconNotifyInd+0x352>
		{
			uint32_t i;
			for (i = 0; i < rsp.BeaconCount; i++)
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80050c2:	e16b      	b.n	800539c <processBeaconNotifyInd+0x340>
			{
				rsp.BeaconList[i].SrcAddr = BUILD_UINT16(rpcBuff[msgIdx],
 80050c4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80050c8:	1d3a      	adds	r2, r7, #4
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80050d6:	3301      	adds	r3, #1
 80050d8:	1d39      	adds	r1, r7, #4
 80050da:	6809      	ldr	r1, [r1, #0]
 80050dc:	440b      	add	r3, r1
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	b298      	uxth	r0, r3
 80050ea:	f107 0108 	add.w	r1, r7, #8
 80050ee:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	3308      	adds	r3, #8
 80050fe:	4602      	mov	r2, r0
 8005100:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 8005102:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005106:	3302      	adds	r3, #2
 8005108:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].PanId = BUILD_UINT16(rpcBuff[msgIdx],
 800510c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005110:	1d3a      	adds	r2, r7, #4
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	4413      	add	r3, r2
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b29a      	uxth	r2, r3
 800511a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800511e:	3301      	adds	r3, #1
 8005120:	1d39      	adds	r1, r7, #4
 8005122:	6809      	ldr	r1, [r1, #0]
 8005124:	440b      	add	r3, r1
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	b29b      	uxth	r3, r3
 800512e:	4413      	add	r3, r2
 8005130:	b298      	uxth	r0, r3
 8005132:	f107 0108 	add.w	r1, r7, #8
 8005136:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800513a:	4613      	mov	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4413      	add	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	440b      	add	r3, r1
 8005144:	330a      	adds	r3, #10
 8005146:	4602      	mov	r2, r0
 8005148:	801a      	strh	r2, [r3, #0]
				        rpcBuff[msgIdx + 1]);
				msgIdx += 2;
 800514a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800514e:	3302      	adds	r3, #2
 8005150:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].LogicalChannel = rpcBuff[msgIdx++];
 8005154:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800515e:	461a      	mov	r2, r3
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4413      	add	r3, r2
 8005166:	7818      	ldrb	r0, [r3, #0]
 8005168:	f107 0108 	add.w	r1, r7, #8
 800516c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	440b      	add	r3, r1
 800517a:	330c      	adds	r3, #12
 800517c:	4602      	mov	r2, r0
 800517e:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].PermitJoining = rpcBuff[msgIdx++];
 8005180:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800518a:	461a      	mov	r2, r3
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	7818      	ldrb	r0, [r3, #0]
 8005194:	f107 0108 	add.w	r1, r7, #8
 8005198:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	440b      	add	r3, r1
 80051a6:	330d      	adds	r3, #13
 80051a8:	4602      	mov	r2, r0
 80051aa:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].RouterCap = rpcBuff[msgIdx++];
 80051ac:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80051b6:	461a      	mov	r2, r3
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4413      	add	r3, r2
 80051be:	7818      	ldrb	r0, [r3, #0]
 80051c0:	f107 0108 	add.w	r1, r7, #8
 80051c4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	330e      	adds	r3, #14
 80051d4:	4602      	mov	r2, r0
 80051d6:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].DevCap = rpcBuff[msgIdx++];
 80051d8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80051e2:	461a      	mov	r2, r3
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	7818      	ldrb	r0, [r3, #0]
 80051ec:	f107 0108 	add.w	r1, r7, #8
 80051f0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	330f      	adds	r3, #15
 8005200:	4602      	mov	r2, r0
 8005202:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].ProtocolVer = rpcBuff[msgIdx++];
 8005204:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800520e:	461a      	mov	r2, r3
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4413      	add	r3, r2
 8005216:	7818      	ldrb	r0, [r3, #0]
 8005218:	f107 0108 	add.w	r1, r7, #8
 800521c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005220:	4613      	mov	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4413      	add	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	440b      	add	r3, r1
 800522a:	3310      	adds	r3, #16
 800522c:	4602      	mov	r2, r0
 800522e:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].StackProf = rpcBuff[msgIdx++];
 8005230:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800523a:	461a      	mov	r2, r3
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4413      	add	r3, r2
 8005242:	7818      	ldrb	r0, [r3, #0]
 8005244:	f107 0108 	add.w	r1, r7, #8
 8005248:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	3311      	adds	r3, #17
 8005258:	4602      	mov	r2, r0
 800525a:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Lqi = rpcBuff[msgIdx++];
 800525c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005266:	461a      	mov	r2, r3
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4413      	add	r3, r2
 800526e:	7818      	ldrb	r0, [r3, #0]
 8005270:	f107 0108 	add.w	r1, r7, #8
 8005274:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	3312      	adds	r3, #18
 8005284:	4602      	mov	r2, r0
 8005286:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Depth = rpcBuff[msgIdx++];
 8005288:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005292:	461a      	mov	r2, r3
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4413      	add	r3, r2
 800529a:	7818      	ldrb	r0, [r3, #0]
 800529c:	f107 0108 	add.w	r1, r7, #8
 80052a0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	3313      	adds	r3, #19
 80052b0:	4602      	mov	r2, r0
 80052b2:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].UpdateId = rpcBuff[msgIdx++];
 80052b4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80052be:	461a      	mov	r2, r3
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	7818      	ldrb	r0, [r3, #0]
 80052c8:	f107 0108 	add.w	r1, r7, #8
 80052cc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80052d0:	4613      	mov	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4413      	add	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	440b      	add	r3, r1
 80052da:	3314      	adds	r3, #20
 80052dc:	4602      	mov	r2, r0
 80052de:	701a      	strb	r2, [r3, #0]

				rsp.BeaconList[i].ExtendedPanId = 0;
 80052e0:	f107 0108 	add.w	r1, r7, #8
 80052e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4419      	add	r1, r3
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8005300:	2300      	movs	r3, #0
 8005302:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8005306:	e040      	b.n	800538a <processBeaconNotifyInd+0x32e>
					rsp.BeaconList[i].ExtendedPanId |=
					        ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8005308:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005312:	461a      	mov	r2, r3
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8005326:	00c9      	lsls	r1, r1, #3
 8005328:	f1a1 0620 	sub.w	r6, r1, #32
 800532c:	f1c1 0020 	rsb	r0, r1, #32
 8005330:	fa03 f501 	lsl.w	r5, r3, r1
 8005334:	fa02 f606 	lsl.w	r6, r2, r6
 8005338:	4335      	orrs	r5, r6
 800533a:	fa22 f000 	lsr.w	r0, r2, r0
 800533e:	4305      	orrs	r5, r0
 8005340:	fa02 f401 	lsl.w	r4, r2, r1
					rsp.BeaconList[i].ExtendedPanId |=
 8005344:	f107 0108 	add.w	r1, r7, #8
 8005348:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	ea44 0002 	orr.w	r0, r4, r2
 8005360:	ea45 0103 	orr.w	r1, r5, r3
 8005364:	460a      	mov	r2, r1
 8005366:	4601      	mov	r1, r0
 8005368:	f107 0608 	add.w	r6, r7, #8
 800536c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005370:	1c58      	adds	r0, r3, #1
 8005372:	4603      	mov	r3, r0
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4403      	add	r3, r0
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4433      	add	r3, r6
 800537c:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8005380:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005384:	3301      	adds	r3, #1
 8005386:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800538a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800538e:	2b07      	cmp	r3, #7
 8005390:	d9ba      	bls.n	8005308 <processBeaconNotifyInd+0x2ac>
			for (i = 0; i < rsp.BeaconCount; i++)
 8005392:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005396:	3301      	adds	r3, #1
 8005398:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053a8:	4293      	cmp	r3, r2
 80053aa:	f4ff ae8b 	bcc.w	80050c4 <processBeaconNotifyInd+0x68>

			}
		}
		mtZdoCbs.pfnZdoBeaconNotifyInd(&rsp);
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <processBeaconNotifyInd+0x368>)
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	f107 0208 	add.w	r2, r7, #8
 80053b6:	4610      	mov	r0, r2
 80053b8:	4798      	blx	r3
	}
}
 80053ba:	bf00      	nop
 80053bc:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	2000054c 	.word	0x2000054c
 80053c8:	0800de08 	.word	0x0800de08
 80053cc:	0800de1c 	.word	0x0800de1c

080053d0 <processJoinCnf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processJoinCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoJoinCnf)
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <processJoinCnf+0xa0>)
 80053de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d040      	beq.n	8005466 <processJoinCnf+0x96>
	{
		uint8_t msgIdx = 2;
 80053e4:	2302      	movs	r3, #2
 80053e6:	73fb      	strb	r3, [r7, #15]
		JoinCnfFormat_t rsp;
		if (rpcLen < 5)
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d802      	bhi.n	80053f4 <processJoinCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80053ee:	4821      	ldr	r0, [pc, #132]	; (8005474 <processJoinCnf+0xa4>)
 80053f0:	f006 fc46 	bl	800bc80 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	4619      	mov	r1, r3
 80053f8:	481f      	ldr	r0, [pc, #124]	; (8005478 <processJoinCnf+0xa8>)
 80053fa:	f006 fbcd 	bl	800bb98 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	73fa      	strb	r2, [r7, #15]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	723b      	strb	r3, [r7, #8]
		rsp.DevAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	3301      	adds	r3, #1
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	440b      	add	r3, r1
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	b29b      	uxth	r3, r3
 8005428:	4413      	add	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3302      	adds	r3, #2
 8005432:	73fb      	strb	r3, [r7, #15]
		rsp.ParentAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4413      	add	r3, r2
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b29a      	uxth	r2, r3
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	3301      	adds	r3, #1
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	440b      	add	r3, r1
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	b29b      	uxth	r3, r3
 800544e:	4413      	add	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	3302      	adds	r3, #2
 8005458:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoJoinCnf(&rsp);
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <processJoinCnf+0xa0>)
 800545c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545e:	f107 0208 	add.w	r2, r7, #8
 8005462:	4610      	mov	r0, r2
 8005464:	4798      	blx	r3
	}
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2000054c 	.word	0x2000054c
 8005474:	0800de08 	.word	0x0800de08
 8005478:	0800de1c 	.word	0x0800de1c

0800547c <processNwkDiscoveryCnf>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkDiscoveryCnf(uint8_t *rpcBuff, uint8_t rpcLen)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkDiscoveryCnf)
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <processNwkDiscoveryCnf+0x54>)
 800548a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <processNwkDiscoveryCnf+0x4a>
	{
		uint8_t msgIdx = 2;
 8005490:	2302      	movs	r3, #2
 8005492:	73fb      	strb	r3, [r7, #15]
		NwkDiscoveryCnfFormat_t rsp;
		if (rpcLen < 1)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <processNwkDiscoveryCnf+0x24>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800549a:	480e      	ldr	r0, [pc, #56]	; (80054d4 <processNwkDiscoveryCnf+0x58>)
 800549c:	f006 fbf0 	bl	800bc80 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	4619      	mov	r1, r3
 80054a4:	480c      	ldr	r0, [pc, #48]	; (80054d8 <processNwkDiscoveryCnf+0x5c>)
 80054a6:	f006 fb77 	bl	800bb98 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	73fa      	strb	r2, [r7, #15]
 80054b0:	461a      	mov	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	733b      	strb	r3, [r7, #12]

		mtZdoCbs.pfnZdoNwkDiscoveryCnf(&rsp);
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <processNwkDiscoveryCnf+0x54>)
 80054bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054be:	f107 020c 	add.w	r2, r7, #12
 80054c2:	4610      	mov	r0, r2
 80054c4:	4798      	blx	r3
	}
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000054c 	.word	0x2000054c
 80054d4:	0800de08 	.word	0x0800de08
 80054d8:	0800de1c 	.word	0x0800de1c

080054dc <processLeaveInd>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processLeaveInd(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b08b      	sub	sp, #44	; 0x2c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoLeaveInd)
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <processLeaveInd+0x114>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d07b      	beq.n	80055e8 <processLeaveInd+0x10c>
	{
		uint8_t msgIdx = 2;
 80054f0:	2302      	movs	r3, #2
 80054f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		LeaveIndFormat_t rsp;
		if (rpcLen < 13)
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d802      	bhi.n	8005502 <processLeaveInd+0x26>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 80054fc:	483d      	ldr	r0, [pc, #244]	; (80055f4 <processLeaveInd+0x118>)
 80054fe:	f006 fbbf 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b29a      	uxth	r2, r3
 800550e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005512:	3301      	adds	r3, #1
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	440b      	add	r3, r1
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	b29b      	uxth	r3, r3
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552a:	3302      	adds	r3, #2
 800552c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		rsp.ExtAddr = 0;		
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005542:	e029      	b.n	8005598 <processLeaveInd+0xbc>
		{
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005560:	00c9      	lsls	r1, r1, #3
 8005562:	f1a1 0620 	sub.w	r6, r1, #32
 8005566:	f1c1 0020 	rsb	r0, r1, #32
 800556a:	fa03 f501 	lsl.w	r5, r3, r1
 800556e:	fa02 f606 	lsl.w	r6, r2, r6
 8005572:	4335      	orrs	r5, r6
 8005574:	fa22 f000 	lsr.w	r0, r2, r0
 8005578:	4305      	orrs	r5, r0
 800557a:	fa02 f401 	lsl.w	r4, r2, r1
 800557e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005582:	ea40 0204 	orr.w	r2, r0, r4
 8005586:	ea41 0305 	orr.w	r3, r1, r5
 800558a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 800558e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005592:	3301      	adds	r3, #1
 8005594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800559c:	2b07      	cmp	r3, #7
 800559e:	d9d1      	bls.n	8005544 <processLeaveInd+0x68>
		}
		rsp.Request = rpcBuff[msgIdx++];
 80055a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	763b      	strb	r3, [r7, #24]
		rsp.Remove = rpcBuff[msgIdx++];
 80055b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	767b      	strb	r3, [r7, #25]
		rsp.Rejoin = rpcBuff[msgIdx++];
 80055c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	76bb      	strb	r3, [r7, #26]

		mtZdoCbs.pfnZdoLeaveInd(&rsp);
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <processLeaveInd+0x114>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f107 0208 	add.w	r2, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
	}
}
 80055e8:	bf00      	nop
 80055ea:	372c      	adds	r7, #44	; 0x2c
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f0:	2000054c 	.word	0x2000054c
 80055f4:	0800de08 	.word	0x0800de08

080055f8 <processMsgCbIncoming>:
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMsgCbIncoming(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b08d      	sub	sp, #52	; 0x34
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMsgCbIncoming)
 8005604:	4b6a      	ldr	r3, [pc, #424]	; (80057b0 <processMsgCbIncoming+0x1b8>)
 8005606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80cd 	beq.w	80057a8 <processMsgCbIncoming+0x1b0>
	{
		uint8_t msgIdx = 2;
 800560e:	2302      	movs	r3, #2
 8005610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MsgCbIncomingFormat_t rsp;
		if (rpcLen < 9)
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	2b08      	cmp	r3, #8
 8005618:	d802      	bhi.n	8005620 <processMsgCbIncoming+0x28>
		{
			printf("MT_RPC_ERR_LENGTH\n");
 800561a:	4866      	ldr	r0, [pc, #408]	; (80057b4 <processMsgCbIncoming+0x1bc>)
 800561c:	f006 fb30 	bl	800bc80 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b29a      	uxth	r2, r3
 800562c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005630:	3301      	adds	r3, #1
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	440b      	add	r3, r1
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	4413      	add	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005648:	3302      	adds	r3, #2
 800564a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.WasBroadcast = rpcBuff[msgIdx++];
 800564e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	72bb      	strb	r3, [r7, #10]
		rsp.ClusterID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b29a      	uxth	r2, r3
 800566e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005672:	3301      	adds	r3, #1
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	440b      	add	r3, r1
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	b29b      	uxth	r3, r3
 8005680:	4413      	add	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800568a:	3302      	adds	r3, #2
 800568c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8005690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4413      	add	r3, r2
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	73bb      	strb	r3, [r7, #14]
		rsp.SeqNum = rpcBuff[msgIdx++];
 80056a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	73fb      	strb	r3, [r7, #15]
		rsp.MacDstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80056b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c8:	3301      	adds	r3, #1
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	440b      	add	r3, r1
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80056dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056e0:	3302      	adds	r3, #2
 80056e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		rsp.Status = rpcBuff[msgIdx++];
 80056e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	74bb      	strb	r3, [r7, #18]
		rsp.ExtAddr = 0;
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	e9c7 2306 	strd	r2, r3, [r7, #24]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800570c:	e029      	b.n	8005762 <processMsgCbIncoming+0x16a>
		{
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800570e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800572a:	00c9      	lsls	r1, r1, #3
 800572c:	f1a1 0620 	sub.w	r6, r1, #32
 8005730:	f1c1 0020 	rsb	r0, r1, #32
 8005734:	fa03 f501 	lsl.w	r5, r3, r1
 8005738:	fa02 f606 	lsl.w	r6, r2, r6
 800573c:	4335      	orrs	r5, r6
 800573e:	fa22 f000 	lsr.w	r0, r2, r0
 8005742:	4305      	orrs	r5, r0
 8005744:	fa02 f401 	lsl.w	r4, r2, r1
 8005748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800574c:	ea40 0204 	orr.w	r2, r0, r4
 8005750:	ea41 0305 	orr.w	r3, r1, r5
 8005754:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (i = 0; i < 8; i++)
 8005758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800575c:	3301      	adds	r3, #1
 800575e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005762:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005766:	2b07      	cmp	r3, #7
 8005768:	d9d1      	bls.n	800570e <processMsgCbIncoming+0x116>
		}
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800576a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800577a:	3301      	adds	r3, #1
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	440b      	add	r3, r1
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	b29b      	uxth	r3, r3
 8005788:	4413      	add	r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	843b      	strh	r3, [r7, #32]
		rsp.NotUsed = rpcBuff[msgIdx];
 800578e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		
		
		mtZdoCbs.pfnZdoMsgCbIncoming(&rsp);
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <processMsgCbIncoming+0x1b8>)
 800579e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a0:	f107 0208 	add.w	r2, r7, #8
 80057a4:	4610      	mov	r0, r2
 80057a6:	4798      	blx	r3
	}
}
 80057a8:	bf00      	nop
 80057aa:	3734      	adds	r7, #52	; 0x34
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b0:	2000054c 	.word	0x2000054c
 80057b4:	0800de08 	.word	0x0800de08

080057b8 <zdoProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void zdoProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
	        rpcBuff[0], rpcBuff[1]);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
 80057c8:	461a      	mov	r2, r3
	        rpcBuff[0], rpcBuff[1]);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3301      	adds	r3, #1
 80057ce:	781b      	ldrb	r3, [r3, #0]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n",
 80057d0:	49d7      	ldr	r1, [pc, #860]	; (8005b30 <zdoProcess+0x378>)
 80057d2:	2004      	movs	r0, #4
 80057d4:	f000 fb3e 	bl	8005e54 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80057e0:	2b60      	cmp	r3, #96	; 0x60
 80057e2:	d105      	bne.n	80057f0 <zdoProcess+0x38>
	{
		processSrsp(rpcBuff, rpcLen);
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa93 	bl	8005d14 <processSrsp>
			        "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
			        rpcBuff[1]);
			break;
		}
	}
}
 80057ee:	e26a      	b.n	8005cc6 <zdoProcess+0x50e>
		switch (rpcBuff[1])
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3301      	adds	r3, #1
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	3b80      	subs	r3, #128	; 0x80
 80057f8:	2b7f      	cmp	r3, #127	; 0x7f
 80057fa:	f200 8259 	bhi.w	8005cb0 <zdoProcess+0x4f8>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <zdoProcess+0x4c>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005a19 	.word	0x08005a19
 8005808:	08005a2d 	.word	0x08005a2d
 800580c:	08005a41 	.word	0x08005a41
 8005810:	08005a55 	.word	0x08005a55
 8005814:	08005a69 	.word	0x08005a69
 8005818:	08005a7d 	.word	0x08005a7d
 800581c:	08005a91 	.word	0x08005a91
 8005820:	08005cb1 	.word	0x08005cb1
 8005824:	08005cb1 	.word	0x08005cb1
 8005828:	08005cb1 	.word	0x08005cb1
 800582c:	08005cb1 	.word	0x08005cb1
 8005830:	08005cb1 	.word	0x08005cb1
 8005834:	08005cb1 	.word	0x08005cb1
 8005838:	08005cb1 	.word	0x08005cb1
 800583c:	08005cb1 	.word	0x08005cb1
 8005840:	08005cb1 	.word	0x08005cb1
 8005844:	08005aa5 	.word	0x08005aa5
 8005848:	08005ab9 	.word	0x08005ab9
 800584c:	08005cb1 	.word	0x08005cb1
 8005850:	08005cb1 	.word	0x08005cb1
 8005854:	08005acd 	.word	0x08005acd
 8005858:	08005ae1 	.word	0x08005ae1
 800585c:	08005cb1 	.word	0x08005cb1
 8005860:	08005cb1 	.word	0x08005cb1
 8005864:	08005cb1 	.word	0x08005cb1
 8005868:	08005cb1 	.word	0x08005cb1
 800586c:	08005cb1 	.word	0x08005cb1
 8005870:	08005cb1 	.word	0x08005cb1
 8005874:	08005cb1 	.word	0x08005cb1
 8005878:	08005cb1 	.word	0x08005cb1
 800587c:	08005cb1 	.word	0x08005cb1
 8005880:	08005cb1 	.word	0x08005cb1
 8005884:	08005af5 	.word	0x08005af5
 8005888:	08005b09 	.word	0x08005b09
 800588c:	08005b1d 	.word	0x08005b1d
 8005890:	08005cb1 	.word	0x08005cb1
 8005894:	08005cb1 	.word	0x08005cb1
 8005898:	08005cb1 	.word	0x08005cb1
 800589c:	08005cb1 	.word	0x08005cb1
 80058a0:	08005cb1 	.word	0x08005cb1
 80058a4:	08005cb1 	.word	0x08005cb1
 80058a8:	08005cb1 	.word	0x08005cb1
 80058ac:	08005cb1 	.word	0x08005cb1
 80058b0:	08005cb1 	.word	0x08005cb1
 80058b4:	08005cb1 	.word	0x08005cb1
 80058b8:	08005cb1 	.word	0x08005cb1
 80058bc:	08005cb1 	.word	0x08005cb1
 80058c0:	08005cb1 	.word	0x08005cb1
 80058c4:	08005b71 	.word	0x08005b71
 80058c8:	08005b85 	.word	0x08005b85
 80058cc:	08005b99 	.word	0x08005b99
 80058d0:	08005bad 	.word	0x08005bad
 80058d4:	08005bc1 	.word	0x08005bc1
 80058d8:	08005bd5 	.word	0x08005bd5
 80058dc:	08005be9 	.word	0x08005be9
 80058e0:	08005cb1 	.word	0x08005cb1
 80058e4:	08005cb1 	.word	0x08005cb1
 80058e8:	08005cb1 	.word	0x08005cb1
 80058ec:	08005cb1 	.word	0x08005cb1
 80058f0:	08005cb1 	.word	0x08005cb1
 80058f4:	08005cb1 	.word	0x08005cb1
 80058f8:	08005cb1 	.word	0x08005cb1
 80058fc:	08005cb1 	.word	0x08005cb1
 8005900:	08005cb1 	.word	0x08005cb1
 8005904:	08005a05 	.word	0x08005a05
 8005908:	08005bfd 	.word	0x08005bfd
 800590c:	08005c11 	.word	0x08005c11
 8005910:	08005c25 	.word	0x08005c25
 8005914:	08005c39 	.word	0x08005c39
 8005918:	08005c4d 	.word	0x08005c4d
 800591c:	08005c61 	.word	0x08005c61
 8005920:	08005c75 	.word	0x08005c75
 8005924:	08005cb1 	.word	0x08005cb1
 8005928:	08005c89 	.word	0x08005c89
 800592c:	08005cb1 	.word	0x08005cb1
 8005930:	08005cb1 	.word	0x08005cb1
 8005934:	08005cb1 	.word	0x08005cb1
 8005938:	08005cb1 	.word	0x08005cb1
 800593c:	08005cb1 	.word	0x08005cb1
 8005940:	08005cb1 	.word	0x08005cb1
 8005944:	08005cb1 	.word	0x08005cb1
 8005948:	08005cb1 	.word	0x08005cb1
 800594c:	08005cb1 	.word	0x08005cb1
 8005950:	08005cb1 	.word	0x08005cb1
 8005954:	08005cb1 	.word	0x08005cb1
 8005958:	08005cb1 	.word	0x08005cb1
 800595c:	08005cb1 	.word	0x08005cb1
 8005960:	08005cb1 	.word	0x08005cb1
 8005964:	08005cb1 	.word	0x08005cb1
 8005968:	08005cb1 	.word	0x08005cb1
 800596c:	08005cb1 	.word	0x08005cb1
 8005970:	08005cb1 	.word	0x08005cb1
 8005974:	08005cb1 	.word	0x08005cb1
 8005978:	08005cb1 	.word	0x08005cb1
 800597c:	08005cb1 	.word	0x08005cb1
 8005980:	08005cb1 	.word	0x08005cb1
 8005984:	08005cb1 	.word	0x08005cb1
 8005988:	08005cb1 	.word	0x08005cb1
 800598c:	08005cb1 	.word	0x08005cb1
 8005990:	08005cb1 	.word	0x08005cb1
 8005994:	08005cb1 	.word	0x08005cb1
 8005998:	08005cb1 	.word	0x08005cb1
 800599c:	08005cb1 	.word	0x08005cb1
 80059a0:	08005cb1 	.word	0x08005cb1
 80059a4:	08005cb1 	.word	0x08005cb1
 80059a8:	08005cb1 	.word	0x08005cb1
 80059ac:	08005cb1 	.word	0x08005cb1
 80059b0:	08005cb1 	.word	0x08005cb1
 80059b4:	08005cb1 	.word	0x08005cb1
 80059b8:	08005cb1 	.word	0x08005cb1
 80059bc:	08005cb1 	.word	0x08005cb1
 80059c0:	08005cb1 	.word	0x08005cb1
 80059c4:	08005cb1 	.word	0x08005cb1
 80059c8:	08005cb1 	.word	0x08005cb1
 80059cc:	08005cb1 	.word	0x08005cb1
 80059d0:	08005cb1 	.word	0x08005cb1
 80059d4:	08005cb1 	.word	0x08005cb1
 80059d8:	08005cb1 	.word	0x08005cb1
 80059dc:	08005cb1 	.word	0x08005cb1
 80059e0:	08005cb1 	.word	0x08005cb1
 80059e4:	08005cb1 	.word	0x08005cb1
 80059e8:	08005cb1 	.word	0x08005cb1
 80059ec:	08005cb1 	.word	0x08005cb1
 80059f0:	08005cb1 	.word	0x08005cb1
 80059f4:	08005cb1 	.word	0x08005cb1
 80059f8:	08005cb1 	.word	0x08005cb1
 80059fc:	08005cb1 	.word	0x08005cb1
 8005a00:	08005c9d 	.word	0x08005c9d
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a04:	494b      	ldr	r1, [pc, #300]	; (8005b34 <zdoProcess+0x37c>)
 8005a06:	2004      	movs	r0, #4
 8005a08:	f000 fa24 	bl	8005e54 <dbg_print>
			processStateChange(rpcBuff, rpcLen);
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fd fb2d 	bl	8003070 <processStateChange>
			break;
 8005a16:	e156      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_NWK_ADDR_RSP\n");
 8005a18:	4947      	ldr	r1, [pc, #284]	; (8005b38 <zdoProcess+0x380>)
 8005a1a:	2004      	movs	r0, #4
 8005a1c:	f000 fa1a 	bl	8005e54 <dbg_print>
			processNwkAddrRsp(rpcBuff, rpcLen);
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fd fc11 	bl	800324c <processNwkAddrRsp>
			break;
 8005a2a:	e14c      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a2c:	4943      	ldr	r1, [pc, #268]	; (8005b3c <zdoProcess+0x384>)
 8005a2e:	2004      	movs	r0, #4
 8005a30:	f000 fa10 	bl	8005e54 <dbg_print>
			processIeeeAddrRsp(rpcBuff, rpcLen);
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fd fcc7 	bl	80033cc <processIeeeAddrRsp>
			break;
 8005a3e:	e142      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a40:	493f      	ldr	r1, [pc, #252]	; (8005b40 <zdoProcess+0x388>)
 8005a42:	2004      	movs	r0, #4
 8005a44:	f000 fa06 	bl	8005e54 <dbg_print>
			processNodeDescRsp(rpcBuff, rpcLen);
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fd fd85 	bl	800355c <processNodeDescRsp>
			break;
 8005a52:	e138      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a54:	493b      	ldr	r1, [pc, #236]	; (8005b44 <zdoProcess+0x38c>)
 8005a56:	2004      	movs	r0, #4
 8005a58:	f000 f9fc 	bl	8005e54 <dbg_print>
			processPowerDescRsp(rpcBuff, rpcLen);
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fd fe3f 	bl	80036e4 <processPowerDescRsp>
			break;
 8005a66:	e12e      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a68:	4937      	ldr	r1, [pc, #220]	; (8005b48 <zdoProcess+0x390>)
 8005a6a:	2004      	movs	r0, #4
 8005a6c:	f000 f9f2 	bl	8005e54 <dbg_print>
			processSimpleDescRsp(rpcBuff, rpcLen);
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fd fe93 	bl	80037a0 <processSimpleDescRsp>
			break;
 8005a7a:	e124      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a7c:	4933      	ldr	r1, [pc, #204]	; (8005b4c <zdoProcess+0x394>)
 8005a7e:	2004      	movs	r0, #4
 8005a80:	f000 f9e8 	bl	8005e54 <dbg_print>
			processActiveEpRsp(rpcBuff, rpcLen);
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fd ff9b 	bl	80039c4 <processActiveEpRsp>
			break;
 8005a8e:	e11a      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005a90:	492f      	ldr	r1, [pc, #188]	; (8005b50 <zdoProcess+0x398>)
 8005a92:	2004      	movs	r0, #4
 8005a94:	f000 f9de 	bl	8005e54 <dbg_print>
			processMatchDescRsp(rpcBuff, rpcLen);
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fe f811 	bl	8003ac4 <processMatchDescRsp>
			break;
 8005aa2:	e110      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005aa4:	492b      	ldr	r1, [pc, #172]	; (8005b54 <zdoProcess+0x39c>)
 8005aa6:	2004      	movs	r0, #4
 8005aa8:	f000 f9d4 	bl	8005e54 <dbg_print>
			processComplexDescRsp(rpcBuff, rpcLen);
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fe f887 	bl	8003bc4 <processComplexDescRsp>
			break;
 8005ab6:	e106      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005ab8:	4927      	ldr	r1, [pc, #156]	; (8005b58 <zdoProcess+0x3a0>)
 8005aba:	2004      	movs	r0, #4
 8005abc:	f000 f9ca 	bl	8005e54 <dbg_print>
			processUserDescRsp(rpcBuff, rpcLen);
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fe f8fd 	bl	8003cc4 <processUserDescRsp>
			break;
 8005aca:	e0fc      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005acc:	4923      	ldr	r1, [pc, #140]	; (8005b5c <zdoProcess+0x3a4>)
 8005ace:	2004      	movs	r0, #4
 8005ad0:	f000 f9c0 	bl	8005e54 <dbg_print>
			processUserDescConf(rpcBuff, rpcLen);
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fe f973 	bl	8003dc4 <processUserDescConf>
			break;
 8005ade:	e0f2      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005ae0:	491f      	ldr	r1, [pc, #124]	; (8005b60 <zdoProcess+0x3a8>)
 8005ae2:	2004      	movs	r0, #4
 8005ae4:	f000 f9b6 	bl	8005e54 <dbg_print>
			processServerDiscRsp(rpcBuff, rpcLen);
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fe f9b7 	bl	8003e60 <processServerDiscRsp>
			break;
 8005af2:	e0e8      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005af4:	491b      	ldr	r1, [pc, #108]	; (8005b64 <zdoProcess+0x3ac>)
 8005af6:	2004      	movs	r0, #4
 8005af8:	f000 f9ac 	bl	8005e54 <dbg_print>
			processEndDeviceBindRsp(rpcBuff, rpcLen);
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe f9fb 	bl	8003efc <processEndDeviceBindRsp>
			break;
 8005b06:	e0de      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_BIND_RSP\n");
 8005b08:	4917      	ldr	r1, [pc, #92]	; (8005b68 <zdoProcess+0x3b0>)
 8005b0a:	2004      	movs	r0, #4
 8005b0c:	f000 f9a2 	bl	8005e54 <dbg_print>
			processBindRsp(rpcBuff, rpcLen);
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fe fa2d 	bl	8003f74 <processBindRsp>
			break;
 8005b1a:	e0d4      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_UNBIND_RSP\n");
 8005b1c:	4913      	ldr	r1, [pc, #76]	; (8005b6c <zdoProcess+0x3b4>)
 8005b1e:	2004      	movs	r0, #4
 8005b20:	f000 f998 	bl	8005e54 <dbg_print>
			processUnbindRsp(rpcBuff, rpcLen);
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7fe fa5f 	bl	8003fec <processUnbindRsp>
			break;
 8005b2e:	e0ca      	b.n	8005cc6 <zdoProcess+0x50e>
 8005b30:	0800de2c 	.word	0x0800de2c
 8005b34:	0800de58 	.word	0x0800de58
 8005b38:	0800de80 	.word	0x0800de80
 8005b3c:	0800dea4 	.word	0x0800dea4
 8005b40:	0800dec8 	.word	0x0800dec8
 8005b44:	0800deec 	.word	0x0800deec
 8005b48:	0800df10 	.word	0x0800df10
 8005b4c:	0800df34 	.word	0x0800df34
 8005b50:	0800df58 	.word	0x0800df58
 8005b54:	0800df7c 	.word	0x0800df7c
 8005b58:	0800dfa4 	.word	0x0800dfa4
 8005b5c:	0800dfc8 	.word	0x0800dfc8
 8005b60:	0800dfec 	.word	0x0800dfec
 8005b64:	0800e010 	.word	0x0800e010
 8005b68:	0800e038 	.word	0x0800e038
 8005b6c:	0800e058 	.word	0x0800e058
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005b70:	4957      	ldr	r1, [pc, #348]	; (8005cd0 <zdoProcess+0x518>)
 8005b72:	2004      	movs	r0, #4
 8005b74:	f000 f96e 	bl	8005e54 <dbg_print>
			processMgmtNwkDiscRsp(rpcBuff, rpcLen);
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fe fa71 	bl	8004064 <processMgmtNwkDiscRsp>
			break;
 8005b82:	e0a0      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_LQI_RSP\n");
 8005b84:	4953      	ldr	r1, [pc, #332]	; (8005cd4 <zdoProcess+0x51c>)
 8005b86:	2004      	movs	r0, #4
 8005b88:	f000 f964 	bl	8005e54 <dbg_print>
			processMgmtLqiRsp(rpcBuff, rpcLen);
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fe fb93 	bl	80042bc <processMgmtLqiRsp>
			break;
 8005b96:	e096      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_RTG_RSP\n");
 8005b98:	494f      	ldr	r1, [pc, #316]	; (8005cd8 <zdoProcess+0x520>)
 8005b9a:	2004      	movs	r0, #4
 8005b9c:	f000 f95a 	bl	8005e54 <dbg_print>
			processMgmtRtgRsp(rpcBuff, rpcLen);
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fe fd53 	bl	8004650 <processMgmtRtgRsp>
			break;
 8005baa:	e08c      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005bac:	494b      	ldr	r1, [pc, #300]	; (8005cdc <zdoProcess+0x524>)
 8005bae:	2004      	movs	r0, #4
 8005bb0:	f000 f950 	bl	8005e54 <dbg_print>
			processMgmtBindRsp(rpcBuff, rpcLen);
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe fe31 	bl	8004820 <processMgmtBindRsp>
			break;
 8005bbe:	e082      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005bc0:	4947      	ldr	r1, [pc, #284]	; (8005ce0 <zdoProcess+0x528>)
 8005bc2:	2004      	movs	r0, #4
 8005bc4:	f000 f946 	bl	8005e54 <dbg_print>
			processMgmtLeaveRsp(rpcBuff, rpcLen);
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fe ffa3 	bl	8004b18 <processMgmtLeaveRsp>
			break;
 8005bd2:	e078      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005bd4:	4943      	ldr	r1, [pc, #268]	; (8005ce4 <zdoProcess+0x52c>)
 8005bd6:	2004      	movs	r0, #4
 8005bd8:	f000 f93c 	bl	8005e54 <dbg_print>
			processMgmtDirectJoinRsp(rpcBuff, rpcLen);
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fe ffd5 	bl	8004b90 <processMgmtDirectJoinRsp>
			break;
 8005be6:	e06e      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005be8:	493f      	ldr	r1, [pc, #252]	; (8005ce8 <zdoProcess+0x530>)
 8005bea:	2004      	movs	r0, #4
 8005bec:	f000 f932 	bl	8005e54 <dbg_print>
			processMgmtPermitJoinRsp(rpcBuff, rpcLen);
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff f807 	bl	8004c08 <processMgmtPermitJoinRsp>
			break;
 8005bfa:	e064      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005bfc:	493b      	ldr	r1, [pc, #236]	; (8005cec <zdoProcess+0x534>)
 8005bfe:	2004      	movs	r0, #4
 8005c00:	f000 f928 	bl	8005e54 <dbg_print>
			processEndDeviceAnnceInd(rpcBuff, rpcLen);
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff f839 	bl	8004c80 <processEndDeviceAnnceInd>
			break;
 8005c0e:	e05a      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005c10:	4937      	ldr	r1, [pc, #220]	; (8005cf0 <zdoProcess+0x538>)
 8005c12:	2004      	movs	r0, #4
 8005c14:	f000 f91e 	bl	8005e54 <dbg_print>
			processMatchDescRspSent(rpcBuff, rpcLen);
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff f8c1 	bl	8004da4 <processMatchDescRspSent>
			break;
 8005c22:	e050      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005c24:	4933      	ldr	r1, [pc, #204]	; (8005cf4 <zdoProcess+0x53c>)
 8005c26:	2004      	movs	r0, #4
 8005c28:	f000 f914 	bl	8005e54 <dbg_print>
			processStatusErrorRsp(rpcBuff, rpcLen);
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff f957 	bl	8004ee4 <processStatusErrorRsp>
			break;
 8005c36:	e046      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_SRC_RTG_IND\n");
 8005c38:	492f      	ldr	r1, [pc, #188]	; (8005cf8 <zdoProcess+0x540>)
 8005c3a:	2004      	movs	r0, #4
 8005c3c:	f000 f90a 	bl	8005e54 <dbg_print>
			processSrcRtgInd(rpcBuff, rpcLen);
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff f989 	bl	8004f5c <processSrcRtgInd>
			break;
 8005c4a:	e03c      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005c4c:	492b      	ldr	r1, [pc, #172]	; (8005cfc <zdoProcess+0x544>)
 8005c4e:	2004      	movs	r0, #4
 8005c50:	f000 f900 	bl	8005e54 <dbg_print>
			processBeaconNotifyInd(rpcBuff, rpcLen);
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff f9ff 	bl	800505c <processBeaconNotifyInd>
			break;
 8005c5e:	e032      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_JOIN_CNF\n");
 8005c60:	4927      	ldr	r1, [pc, #156]	; (8005d00 <zdoProcess+0x548>)
 8005c62:	2004      	movs	r0, #4
 8005c64:	f000 f8f6 	bl	8005e54 <dbg_print>
			processJoinCnf(rpcBuff, rpcLen);
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fbaf 	bl	80053d0 <processJoinCnf>
			break;
 8005c72:	e028      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005c74:	4923      	ldr	r1, [pc, #140]	; (8005d04 <zdoProcess+0x54c>)
 8005c76:	2004      	movs	r0, #4
 8005c78:	f000 f8ec 	bl	8005e54 <dbg_print>
			processNwkDiscoveryCnf(rpcBuff, rpcLen);
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fbfb 	bl	800547c <processNwkDiscoveryCnf>
			break;
 8005c86:	e01e      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_LEAVE_IND\n");
 8005c88:	491f      	ldr	r1, [pc, #124]	; (8005d08 <zdoProcess+0x550>)
 8005c8a:	2004      	movs	r0, #4
 8005c8c:	f000 f8e2 	bl	8005e54 <dbg_print>
			processLeaveInd(rpcBuff, rpcLen);
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fc21 	bl	80054dc <processLeaveInd>
			break;
 8005c9a:	e014      	b.n	8005cc6 <zdoProcess+0x50e>
			dbg_print(PRINT_LEVEL_VERBOSE,
 8005c9c:	491b      	ldr	r1, [pc, #108]	; (8005d0c <zdoProcess+0x554>)
 8005c9e:	2004      	movs	r0, #4
 8005ca0:	f000 f8d8 	bl	8005e54 <dbg_print>
			processMsgCbIncoming(rpcBuff, rpcLen);
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fca5 	bl	80055f8 <processMsgCbIncoming>
			break;
 8005cae:	e00a      	b.n	8005cc6 <zdoProcess+0x50e>
			        "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8005cb4:	461a      	mov	r2, r3
			        rpcBuff[1]);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	781b      	ldrb	r3, [r3, #0]
			dbg_print(PRINT_LEVEL_WARNING,
 8005cbc:	4914      	ldr	r1, [pc, #80]	; (8005d10 <zdoProcess+0x558>)
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f000 f8c8 	bl	8005e54 <dbg_print>
			break;
 8005cc4:	bf00      	nop
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	0800e078 	.word	0x0800e078
 8005cd4:	0800e0a0 	.word	0x0800e0a0
 8005cd8:	0800e0c4 	.word	0x0800e0c4
 8005cdc:	0800e0e8 	.word	0x0800e0e8
 8005ce0:	0800e10c 	.word	0x0800e10c
 8005ce4:	0800e130 	.word	0x0800e130
 8005ce8:	0800e15c 	.word	0x0800e15c
 8005cec:	0800e188 	.word	0x0800e188
 8005cf0:	0800e1b4 	.word	0x0800e1b4
 8005cf4:	0800e1dc 	.word	0x0800e1dc
 8005cf8:	0800e204 	.word	0x0800e204
 8005cfc:	0800e224 	.word	0x0800e224
 8005d00:	0800e24c 	.word	0x0800e24c
 8005d04:	0800e26c 	.word	0x0800e26c
 8005d08:	0800e294 	.word	0x0800e294
 8005d0c:	0800e2b4 	.word	0x0800e2b4
 8005d10:	0800e2d8 	.word	0x0800e2d8

08005d14 <processSrsp>:
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	480d      	ldr	r0, [pc, #52]	; (8005d5c <processSrsp+0x48>)
 8005d28:	f005 fe7a 	bl	800ba20 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1])
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b25      	cmp	r3, #37	; 0x25
 8005d34:	d109      	bne.n	8005d4a <processSrsp+0x36>
	{
	case MT_ZDO_GET_LINK_KEY:
		dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_GET_LINK_KEY\n");
 8005d36:	490a      	ldr	r1, [pc, #40]	; (8005d60 <processSrsp+0x4c>)
 8005d38:	2004      	movs	r0, #4
 8005d3a:	f000 f88b 	bl	8005e54 <dbg_print>
		processGetLinkKey(rpcBuff, rpcLen);
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fd fa0c 	bl	8003160 <processGetLinkKey>
		break;
 8005d48:	e004      	b.n	8005d54 <processSrsp+0x40>
	default:
		dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8005d4a:	4906      	ldr	r1, [pc, #24]	; (8005d64 <processSrsp+0x50>)
 8005d4c:	2002      	movs	r0, #2
 8005d4e:	f000 f881 	bl	8005e54 <dbg_print>
		break;
 8005d52:	bf00      	nop
	}
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	2000309c 	.word	0x2000309c
 8005d60:	0800e304 	.word	0x0800e304
 8005d64:	0800e328 	.word	0x0800e328

08005d68 <zdoRegisterCallbacks>:
 * @param
 *
 * @return
 */
void zdoRegisterCallbacks(mtZdoCb_t cbs)
{
 8005d68:	b084      	sub	sp, #16
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	f107 0c08 	add.w	ip, r7, #8
 8005d72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&mtZdoCbs, &cbs, sizeof(mtZdoCb_t));
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <zdoRegisterCallbacks+0x2c>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f107 0108 	add.w	r1, r7, #8
 8005d7e:	2384      	movs	r3, #132	; 0x84
 8005d80:	461a      	mov	r2, r3
 8005d82:	f005 fe4d 	bl	800ba20 <memcpy>
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d8e:	b004      	add	sp, #16
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	2000054c 	.word	0x2000054c

08005d98 <mtProcess>:
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
void mtProcess(uint8_t *rpcBuff, uint8_t rpcLen)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
    //Read CMD0
    switch (rpcBuff[0] & MT_RPC_SUBSYSTEM_MASK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b0e      	cmp	r3, #14
 8005db0:	d83e      	bhi.n	8005e30 <mtProcess+0x98>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <mtProcess+0x20>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005e01 	.word	0x08005e01
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e31 	.word	0x08005e31
 8005dd4:	08005e31 	.word	0x08005e31
 8005dd8:	08005e31 	.word	0x08005e31
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e31 	.word	0x08005e31
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e31 	.word	0x08005e31
 8005df0:	08005e25 	.word	0x08005e25
    {
    case MT_RPC_SYS_ZDO:
        //process ZDO RPC's in the ZDO module
        zdoProcess(rpcBuff, rpcLen);
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fcdd 	bl	80057b8 <zdoProcess>
        break;
 8005dfe:	e022      	b.n	8005e46 <mtProcess+0xae>

    case MT_RPC_SYS_SYS:
        //process SYS RPC's in the Sys module
        sysProcess(rpcBuff, rpcLen);
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fd f8e3 	bl	8002fd0 <sysProcess>
        break;
 8005e0a:	e01c      	b.n	8005e46 <mtProcess+0xae>

    case MT_RPC_SYS_AF:
        //process SYS RPC's in the Sys module
        afProcess(rpcBuff, rpcLen);
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fb fe57 	bl	8001ac4 <afProcess>
        break;
 8005e16:	e016      	b.n	8005e46 <mtProcess+0xae>

    case MT_RPC_SYS_SAPI:
        //process SYS RPC's in the Sys module
        sapiProcess(rpcBuff, rpcLen);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fc fae3 	bl	80023e8 <sapiProcess>
        break;
 8005e22:	e010      	b.n	8005e46 <mtProcess+0xae>

    case MT_RPC_SYS_APP_CFG:
        //process SYS RPC's in the App Cfg module
        appCfgProcess(rpcBuff, rpcLen);
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fb ffbf 	bl	8001dac <appCfgProcess>
        break;
 8005e2e:	e00a      	b.n	8005e46 <mtProcess+0xae>

    default:
        dbg_print(PRINT_LEVEL_VERBOSE,
                "mtProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0],
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	781b      	ldrb	r3, [r3, #0]
        dbg_print(PRINT_LEVEL_VERBOSE,
 8005e34:	461a      	mov	r2, r3
                rpcBuff[1]);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	781b      	ldrb	r3, [r3, #0]
        dbg_print(PRINT_LEVEL_VERBOSE,
 8005e3c:	4904      	ldr	r1, [pc, #16]	; (8005e50 <mtProcess+0xb8>)
 8005e3e:	2004      	movs	r0, #4
 8005e40:	f000 f808 	bl	8005e54 <dbg_print>

        break;
 8005e44:	bf00      	nop
    }

}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	0800e34c 	.word	0x0800e34c

08005e54 <dbg_print>:
 * None.
 *
 * @return      None.
 **************************************************************************************************
 */
void dbg_print(int print_level, const char *fmt, ...) {
 8005e54:	b40e      	push	{r1, r2, r3}
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
	static char working_buffer[256];

	if (print_level > PRINT_LEVEL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	dc0e      	bgt.n	8005e82 <dbg_print+0x2e>
		return;
	}
	else {
		// Create vaarg list
		va_list args;
		va_start(args, fmt);
 8005e64:	f107 0320 	add.w	r3, r7, #32
 8005e68:	60fb      	str	r3, [r7, #12]

		// Write string to buffer
		vsnprintf(working_buffer, 256, fmt, args);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e72:	4807      	ldr	r0, [pc, #28]	; (8005e90 <dbg_print+0x3c>)
 8005e74:	f006 f93a 	bl	800c0ec <vsniprintf>

		// Close vaarg list
		va_end(args);

		// send data
		log_print("%s", working_buffer);
 8005e78:	4905      	ldr	r1, [pc, #20]	; (8005e90 <dbg_print+0x3c>)
 8005e7a:	4806      	ldr	r0, [pc, #24]	; (8005e94 <dbg_print+0x40>)
 8005e7c:	f7fa fbf2 	bl	8000664 <log_print>
 8005e80:	e000      	b.n	8005e84 <dbg_print+0x30>
		return;
 8005e82:	bf00      	nop
	}
}
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8c:	b003      	add	sp, #12
 8005e8e:	4770      	bx	lr
 8005e90:	200005d0 	.word	0x200005d0
 8005e94:	0800e378 	.word	0x0800e378

08005e98 <rpcTransportOpen>:
 *
 * @brief   opens the serial port to the CC253x.
 *
 * @return  status
 */
int32_t rpcTransportOpen(void) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
	// create queues
	rpc_q_uart_tx = xQueueCreate(256, sizeof(uint8_t));
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ea4:	f003 fbda 	bl	800965c <xQueueGenericCreate>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <rpcTransportOpen+0x54>)
 8005eac:	601a      	str	r2, [r3, #0]
	rpc_q_uart_rx = xQueueCreate(256, sizeof(uint8_t));
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005eb6:	f003 fbd1 	bl	800965c <xQueueGenericCreate>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <rpcTransportOpen+0x58>)
 8005ebe:	601a      	str	r2, [r3, #0]

	// enable receive interrupt
	SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <rpcTransportOpen+0x5c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <rpcTransportOpen+0x5c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0220 	orr.w	r2, r2, #32
 8005ece:	601a      	str	r2, [r3, #0]

	// throw an error if one queue couldn't be created
	return (rpc_q_uart_tx == NULL || rpc_q_uart_rx == NULL) ? -1 : 0;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <rpcTransportOpen+0x54>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <rpcTransportOpen+0x48>
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <rpcTransportOpen+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <rpcTransportOpen+0x4e>
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	e000      	b.n	8005ee8 <rpcTransportOpen+0x50>
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200006d0 	.word	0x200006d0
 8005ef0:	200006d4 	.word	0x200006d4
 8005ef4:	20002f98 	.word	0x20002f98

08005ef8 <rpcTransportISR>:
/*********************************************************************
 * @fn      rpcTransportISR
 *
 * @brief   Interrupt Service Routine for RPC uart
 */
void rpcTransportISR(void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
	// read status register
	isr_stat = hlpuart1.Instance->ISR;
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <rpcTransportISR+0x94>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <rpcTransportISR+0x98>)
 8005f04:	6013      	str	r3, [r2, #0]

	// overrun error?
	if (isr_stat & USART_ISR_ORE)
 8005f06:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <rpcTransportISR+0x98>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <rpcTransportISR+0x2a>
		hlpuart1.Instance->ICR |= USART_ICR_ORECF;
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <rpcTransportISR+0x94>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a1a      	ldr	r2, [r3, #32]
 8005f18:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <rpcTransportISR+0x94>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0208 	orr.w	r2, r2, #8
 8005f20:	621a      	str	r2, [r3, #32]

	// check for rx interrupt
	if (isr_stat & USART_ISR_RXNE) {
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <rpcTransportISR+0x98>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <rpcTransportISR+0x52>
		// read the data
		isr_data = hlpuart1.Instance->RDR & 0xFF;
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <rpcTransportISR+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <rpcTransportISR+0x9c>)
 8005f3a:	701a      	strb	r2, [r3, #0]
		// check for errors
		//if ((isr_stat & (USART_ISR_FE | USART_ISR_NE | USART_ISR_ORE)) == 0) {
		// Transmit data to queue
		xQueueSendFromISR(rpc_q_uart_rx, (void* ) &isr_data, NULL);
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <rpcTransportISR+0xa0>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	4913      	ldr	r1, [pc, #76]	; (8005f94 <rpcTransportISR+0x9c>)
 8005f46:	f003 fce5 	bl	8009914 <xQueueGenericSendFromISR>
		//}
	}

	// check for data to send
	if (isr_stat & USART_ISR_TC) {
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <rpcTransportISR+0x98>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <rpcTransportISR+0x90>
		// grab data from fifo
		if (xQueueReceiveFromISR(rpc_q_uart_tx, (void*) &isr_data, NULL) == pdFALSE) {
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <rpcTransportISR+0xa4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	490d      	ldr	r1, [pc, #52]	; (8005f94 <rpcTransportISR+0x9c>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f003 ff50 	bl	8009e04 <xQueueReceiveFromISR>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <rpcTransportISR+0x84>
			// end of transmission
			CLEAR_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <rpcTransportISR+0x94>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <rpcTransportISR+0x94>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f78:	601a      	str	r2, [r3, #0]
		else {
			// send another byte
			hlpuart1.Instance->TDR = isr_data;
		}
	}
}
 8005f7a:	e005      	b.n	8005f88 <rpcTransportISR+0x90>
			hlpuart1.Instance->TDR = isr_data;
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <rpcTransportISR+0x9c>)
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <rpcTransportISR+0x94>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	b292      	uxth	r2, r2
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005f88:	bf00      	nop
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20002f98 	.word	0x20002f98
 8005f90:	200006d8 	.word	0x200006d8
 8005f94:	200006dc 	.word	0x200006dc
 8005f98:	200006d4 	.word	0x200006d4
 8005f9c:	200006d0 	.word	0x200006d0

08005fa0 <rpcTransportWrite>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  status
 */
void rpcTransportWrite(uint8_t *buf, uint8_t len) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
	for (uint16_t i = 0; i < len; i++) {
 8005fac:	2300      	movs	r3, #0
 8005fae:	81fb      	strh	r3, [r7, #14]
 8005fb0:	e01b      	b.n	8005fea <rpcTransportWrite+0x4a>
		// add data to tx queue
		xQueueSend(rpc_q_uart_tx, (void* ) &buf[i], 1);
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <rpcTransportWrite+0x5c>)
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	18d1      	adds	r1, r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f003 fbae 	bl	8009720 <xQueueGenericSend>

		// enable receive and transmit interrupt
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <rpcTransportWrite+0x60>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <rpcTransportWrite+0x60>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0220 	orr.w	r2, r2, #32
 8005fd2:	601a      	str	r2, [r3, #0]
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <rpcTransportWrite+0x60>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <rpcTransportWrite+0x60>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe2:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++) {
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	81fb      	strh	r3, [r7, #14]
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	89fa      	ldrh	r2, [r7, #14]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d3de      	bcc.n	8005fb2 <rpcTransportWrite+0x12>
	}
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200006d0 	.word	0x200006d0
 8006000:	20002f98 	.word	0x20002f98

08006004 <rpcTransportRead>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  amount of bytes read
 */
uint8_t rpcTransportRead(uint8_t *buf, uint8_t len) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
	int index = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

	// keep waiting for data btyes
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8006014:	e006      	b.n	8006024 <rpcTransportRead+0x20>
		// increment position in buffer
		index++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]

		// all data received?
		if (index == len)
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	429a      	cmp	r2, r3
 8006022:	d00c      	beq.n	800603e <rpcTransportRead+0x3a>
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <rpcTransportRead+0x48>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	2201      	movs	r2, #1
 8006030:	4619      	mov	r1, r3
 8006032:	f003 fd03 	bl	8009a3c <xQueueReceive>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d0ec      	beq.n	8006016 <rpcTransportRead+0x12>
 800603c:	e000      	b.n	8006040 <rpcTransportRead+0x3c>
			break;
 800603e:	bf00      	nop
	}

	// return the amount of data read
	return index;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	b2db      	uxtb	r3, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200006d4 	.word	0x200006d4

08006050 <rpcOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcOpen(void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
	int fd;

	// open RPC transport
	fd = rpcTransportOpen();
 8006056:	f7ff ff1f 	bl	8005e98 <rpcTransportOpen>
 800605a:	6078      	str	r0, [r7, #4]
	if (fd < 0) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da06      	bge.n	8006070 <rpcOpen+0x20>
		dbg_print(PRINT_LEVEL_ERROR, "rpcOpen: device open failed\n");
 8006062:	490b      	ldr	r1, [pc, #44]	; (8006090 <rpcOpen+0x40>)
 8006064:	2000      	movs	r0, #0
 8006066:	f7ff fef5 	bl	8005e54 <dbg_print>
		return (-1);
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	e00a      	b.n	8006086 <rpcOpen+0x36>
	}

	//sem_init(&rpcSem, 0, 1); // initialize mutex to 1 - binary semaphore
	//sem_init(&srspSem, 0, 0); // initialize mutex to 0 - binary semaphore

	srspSem = xSemaphoreCreateBinary();
 8006070:	2203      	movs	r2, #3
 8006072:	2100      	movs	r1, #0
 8006074:	2001      	movs	r0, #1
 8006076:	f003 faf1 	bl	800965c <xQueueGenericCreate>
 800607a:	4602      	mov	r2, r0
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <rpcOpen+0x44>)
 800607e:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(srspSem);

	rpcForceRun();
 8006080:	f000 f85e 	bl	8006140 <rpcForceRun>

	return fd;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	0800e37c 	.word	0x0800e37c
 8006094:	200006e0 	.word	0x200006e0

08006098 <rpcInitMq>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcInitMq(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
	llq_open(&rpcLlq);
 800609c:	4802      	ldr	r0, [pc, #8]	; (80060a8 <rpcInitMq+0x10>)
 800609e:	f000 fab1 	bl	8006604 <llq_open>
	return 0;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200006e8 	.word	0x200006e8

080060ac <rpcWaitMqClientMsg>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcWaitMqClientMsg(uint32_t timeout) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b0c4      	sub	sp, #272	; 0x110
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	6018      	str	r0, [r3, #0]
	uint8_t rpcFrame[RPC_MAX_LEN + 1];
	int32_t rpcLen;

	dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: timeout=%d\n", timeout);
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	491d      	ldr	r1, [pc, #116]	; (8006130 <rpcWaitMqClientMsg+0x84>)
 80060bc:	2002      	movs	r0, #2
 80060be:	f7ff fec9 	bl	8005e54 <dbg_print>

	rpcLen = llq_timedreceive(&rpcLlq, (char*) rpcFrame, RPC_MAX_LEN + 1, timeout);
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f107 0108 	add.w	r1, r7, #8
 80060ca:	f240 1201 	movw	r2, #257	; 0x101
 80060ce:	4819      	ldr	r0, [pc, #100]	; (8006134 <rpcWaitMqClientMsg+0x88>)
 80060d0:	f000 faa9 	bl	8006626 <llq_timedreceive>
 80060d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (rpcLen != -1) {
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d010      	beq.n	8006104 <rpcWaitMqClientMsg+0x58>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: processing MT[%d]\n", rpcLen);
 80060e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80060e6:	4914      	ldr	r1, [pc, #80]	; (8006138 <rpcWaitMqClientMsg+0x8c>)
 80060e8:	2002      	movs	r0, #2
 80060ea:	f7ff feb3 	bl	8005e54 <dbg_print>
		// process incoming message
		mtProcess(rpcFrame, rpcLen);
 80060ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fe4c 	bl	8005d98 <mtProcess>
	else {
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d] - %s\n", rpcLen, strerror(errno));
		return -1;
	}

	return 0;
 8006100:	2300      	movs	r3, #0
 8006102:	e00f      	b.n	8006124 <rpcWaitMqClientMsg+0x78>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d] - %s\n", rpcLen, strerror(errno));
 8006104:	f005 fc52 	bl	800b9ac <__errno>
 8006108:	4603      	mov	r3, r0
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f005 ffb5 	bl	800c07c <strerror>
 8006112:	4603      	mov	r3, r0
 8006114:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006118:	4908      	ldr	r1, [pc, #32]	; (800613c <rpcWaitMqClientMsg+0x90>)
 800611a:	2002      	movs	r0, #2
 800611c:	f7ff fe9a 	bl	8005e54 <dbg_print>
		return -1;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006124:	4618      	mov	r0, r3
 8006126:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	0800e400 	.word	0x0800e400
 8006134:	200006e8 	.word	0x200006e8
 8006138:	0800e420 	.word	0x0800e420
 800613c:	0800e448 	.word	0x0800e448

08006140 <rpcForceRun>:
 *
 * @param   -
 *
 * @return  -
 */
void rpcForceRun(void) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
	uint8_t forceBoot = SB_FORCE_RUN;
 8006146:	2307      	movs	r3, #7
 8006148:	71fb      	strb	r3, [r7, #7]

	// send the bootloader force boot incase we have a bootloader that waits
	rpcTransportWrite(&forceBoot, 1);
 800614a:	1dfb      	adds	r3, r7, #7
 800614c:	2101      	movs	r1, #1
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff26 	bl	8005fa0 <rpcTransportWrite>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <rpcProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
int32_t rpcProcess(void) {
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b0c3      	sub	sp, #268	; 0x10c
 8006160:	af00      	add	r7, sp, #0
	uint8_t rpcLen, rpcTempLen, bytesRead, sofByte, rpcBuffIdx;
	uint8_t retryAttempts = 0, len, rpcBuff[RPC_MAX_LEN];
 8006162:	2300      	movs	r3, #0
 8006164:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t fcs;

#ifndef HAL_UART_IP //No SOF for IP
	//read first byte and check it is a SOF
	bytesRead = rpcTransportRead(&sofByte, 1);
 8006168:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800616c:	2101      	movs	r1, #1
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff ff48 	bl	8006004 <rpcTransportRead>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	if ((sofByte == MT_RPC_SOF) && (bytesRead == 1))
 800617a:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800617e:	2bfe      	cmp	r3, #254	; 0xfe
 8006180:	f040 8101 	bne.w	8006386 <rpcProcess+0x22a>
 8006184:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006188:	2b01      	cmp	r3, #1
 800618a:	f040 80fc 	bne.w	8006386 <rpcProcess+0x22a>
#endif
	{
		// clear retry counter
		retryAttempts = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		// read length byte
		bytesRead = rpcTransportRead(&rpcLen, 1);
 8006194:	f207 1301 	addw	r3, r7, #257	; 0x101
 8006198:	2101      	movs	r1, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff ff32 	bl	8006004 <rpcTransportRead>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (bytesRead == 1) {
 80061a6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	f040 80e4 	bne.w	8006378 <rpcProcess+0x21c>
			len = rpcLen;
 80061b0:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80061b4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			rpcBuff[0] = rpcLen;
 80061b8:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 80061bc:	463b      	mov	r3, r7
 80061be:	701a      	strb	r2, [r3, #0]
#ifdef HAL_UART_IP //No FCS for IP
			//allocating RPC payload (+ cmd0, cmd1)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN;
#else
			//allocating RPC payload (+ cmd0, cmd1 and fcs)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN + RPC_UART_FCS_LEN;
 80061c0:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80061c4:	3303      	adds	r3, #3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
#endif

			//non blocking read, so we need to wait for the rpc to be read
			rpcBuffIdx = 1;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			rpcTempLen = rpcLen;
 80061d2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80061d6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			while (rpcTempLen > 0) {
 80061da:	e04e      	b.n	800627a <rpcProcess+0x11e>
				// read RPC frame
				bytesRead = rpcTransportRead(&(rpcBuff[rpcBuffIdx]), rpcTempLen);
 80061dc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80061e0:	463a      	mov	r2, r7
 80061e2:	4413      	add	r3, r2
 80061e4:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff ff0a 	bl	8006004 <rpcTransportRead>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				// check for error
				if (bytesRead > rpcTempLen) {
 80061f6:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80061fa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80061fe:	429a      	cmp	r2, r3
 8006200:	d923      	bls.n	800624a <rpcProcess+0xee>
					//there was an error
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: read of %d bytes failed - %s\n", rpcTempLen, strerror(errno));
 8006202:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 8006206:	f005 fbd1 	bl	800b9ac <__errno>
 800620a:	4603      	mov	r3, r0
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f005 ff34 	bl	800c07c <strerror>
 8006214:	4603      	mov	r3, r0
 8006216:	4622      	mov	r2, r4
 8006218:	495e      	ldr	r1, [pc, #376]	; (8006394 <rpcProcess+0x238>)
 800621a:	2001      	movs	r0, #1
 800621c:	f7ff fe1a 	bl	8005e54 <dbg_print>

					// check whether retry limits has been reached
					if (retryAttempts++ < 5) {
 8006220:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 800622a:	2b04      	cmp	r3, #4
 800622c:	d806      	bhi.n	800623c <rpcProcess+0xe0>
						// sleep for 10ms
						vTaskDelay(10);
 800622e:	200a      	movs	r0, #10
 8006230:	f004 f92c 	bl	800a48c <vTaskDelay>

						// try again
						bytesRead = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800623a:	e006      	b.n	800624a <rpcProcess+0xee>
					}
					else {
						// something went wrong, abort
						dbg_print(PRINT_LEVEL_ERROR, "rpcProcess: transport read failed too many times\n");
 800623c:	4956      	ldr	r1, [pc, #344]	; (8006398 <rpcProcess+0x23c>)
 800623e:	2000      	movs	r0, #0
 8006240:	f7ff fe08 	bl	8005e54 <dbg_print>

						return -1;
 8006244:	f04f 33ff 	mov.w	r3, #4294967295
 8006248:	e09f      	b.n	800638a <rpcProcess+0x22e>
					}
				}

				// update counters
				if (rpcTempLen > bytesRead) {
 800624a:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 800624e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006252:	429a      	cmp	r2, r3
 8006254:	d907      	bls.n	8006266 <rpcProcess+0x10a>
					rpcTempLen -= bytesRead;
 8006256:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 800625a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006264:	e002      	b.n	800626c <rpcProcess+0x110>
				}
				else {
					rpcTempLen = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				}
				rpcBuffIdx += bytesRead;
 800626c:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8006270:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006274:	4413      	add	r3, r2
 8006276:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			while (rpcTempLen > 0) {
 800627a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ac      	bne.n	80061dc <rpcProcess+0x80>
			}

			// print out incoming RPC frame
			printRpcMsg("SOC IN  <--", MT_RPC_SOF, len, &rpcBuff[1]);
 8006282:	463b      	mov	r3, r7
 8006284:	3301      	adds	r3, #1
 8006286:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 800628a:	21fe      	movs	r1, #254	; 0xfe
 800628c:	4843      	ldr	r0, [pc, #268]	; (800639c <rpcProcess+0x240>)
 800628e:	f000 f967 	bl	8006560 <printRpcMsg>

			//Verify FCS of incoming MT frames
			fcs = calcFcs(&rpcBuff[0], (len + 3));
 8006292:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8006296:	3303      	adds	r3, #3
 8006298:	b2da      	uxtb	r2, r3
 800629a:	463b      	mov	r3, r7
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f942 	bl	8006528 <calcFcs>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			if (rpcBuff[len + 3] != fcs) {
 80062aa:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80062ae:	3303      	adds	r3, #3
 80062b0:	463a      	mov	r2, r7
 80062b2:	5cd3      	ldrb	r3, [r2, r3]
 80062b4:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d00e      	beq.n	80062da <rpcProcess+0x17e>
				dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: fcs error %x:%x\n", rpcBuff[len + 3], fcs);
 80062bc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80062c0:	3303      	adds	r3, #3
 80062c2:	463a      	mov	r2, r7
 80062c4:	5cd3      	ldrb	r3, [r2, r3]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80062cc:	4934      	ldr	r1, [pc, #208]	; (80063a0 <rpcProcess+0x244>)
 80062ce:	2001      	movs	r0, #1
 80062d0:	f7ff fdc0 	bl	8005e54 <dbg_print>
				return -1;
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295
 80062d8:	e057      	b.n	800638a <rpcProcess+0x22e>
			}

			if ((rpcBuff[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 80062da:	463b      	mov	r3, r7
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062e2:	2b60      	cmp	r3, #96	; 0x60
 80062e4:	d136      	bne.n	8006354 <rpcProcess+0x1f8>
				// SRSP command ID deteced
				if (expectedSrspCmdId == (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK)) {
 80062e6:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <rpcProcess+0x248>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	463b      	mov	r3, r7
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d120      	bne.n	800633a <rpcProcess+0x1de>
					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: processing expected srsp [%02X]\n", rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK);
 80062f8:	463b      	mov	r3, r7
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	461a      	mov	r2, r3
 8006302:	4929      	ldr	r1, [pc, #164]	; (80063a8 <rpcProcess+0x24c>)
 8006304:	2002      	movs	r0, #2
 8006306:	f7ff fda5 	bl	8005e54 <dbg_print>

					//unblock waiting sreq
					xSemaphoreGive(srspSem);
 800630a:	4b28      	ldr	r3, [pc, #160]	; (80063ac <rpcProcess+0x250>)
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	f003 fa04 	bl	8009720 <xQueueGenericSend>

					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes SRSP to head of the queue\n", rpcLen);
 8006318:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800631c:	461a      	mov	r2, r3
 800631e:	4924      	ldr	r1, [pc, #144]	; (80063b0 <rpcProcess+0x254>)
 8006320:	2002      	movs	r0, #2
 8006322:	f7ff fd97 	bl	8005e54 <dbg_print>

					// send message to queue
					llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 1);
 8006326:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800632a:	461a      	mov	r2, r3
 800632c:	463b      	mov	r3, r7
 800632e:	1c59      	adds	r1, r3, #1
 8006330:	2301      	movs	r3, #1
 8006332:	4820      	ldr	r0, [pc, #128]	; (80063b4 <rpcProcess+0x258>)
 8006334:	f000 f9cb 	bl	80066ce <llq_add>
 8006338:	e01c      	b.n	8006374 <rpcProcess+0x218>
				}
				else {
					// unexpected SRSP discard
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: UNEXPECTED SREQ!: %02X%s:%02X%s", expectedSrspCmdId, (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK));
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <rpcProcess+0x248>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	463b      	mov	r3, r7
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	491b      	ldr	r1, [pc, #108]	; (80063b8 <rpcProcess+0x25c>)
 800634a:	2001      	movs	r0, #1
 800634c:	f7ff fd82 	bl	8005e54 <dbg_print>
					return 0;
 8006350:	2300      	movs	r3, #0
 8006352:	e01a      	b.n	800638a <rpcProcess+0x22e>
				}
			}
			else {
				// should be AREQ frame
				dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes AREQ to tail of the que\n", rpcLen);
 8006354:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006358:	461a      	mov	r2, r3
 800635a:	4918      	ldr	r1, [pc, #96]	; (80063bc <rpcProcess+0x260>)
 800635c:	2002      	movs	r0, #2
 800635e:	f7ff fd79 	bl	8005e54 <dbg_print>

				// send message to queue
				llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 0);
 8006362:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006366:	461a      	mov	r2, r3
 8006368:	463b      	mov	r3, r7
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	2300      	movs	r3, #0
 800636e:	4811      	ldr	r0, [pc, #68]	; (80063b4 <rpcProcess+0x258>)
 8006370:	f000 f9ad 	bl	80066ce <llq_add>
			}

			return 0;
 8006374:	2300      	movs	r3, #0
 8006376:	e008      	b.n	800638a <rpcProcess+0x22e>
		}
		else {
			dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: Len Not read [%x]\n", bytesRead);
 8006378:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800637c:	461a      	mov	r2, r3
 800637e:	4910      	ldr	r1, [pc, #64]	; (80063c0 <rpcProcess+0x264>)
 8006380:	2001      	movs	r0, #1
 8006382:	f7ff fd67 	bl	8005e54 <dbg_print>
	}
	else {
		//dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: No valid Start Of Frame found [%x:%x]\n", sofByte, bytesRead);
	}

	return -1;
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800638a:	4618      	mov	r0, r3
 800638c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}
 8006394:	0800e474 	.word	0x0800e474
 8006398:	0800e4a0 	.word	0x0800e4a0
 800639c:	0800e4d4 	.word	0x0800e4d4
 80063a0:	0800e4e0 	.word	0x0800e4e0
 80063a4:	200006e4 	.word	0x200006e4
 80063a8:	0800e500 	.word	0x0800e500
 80063ac:	200006e0 	.word	0x200006e0
 80063b0:	0800e530 	.word	0x0800e530
 80063b4:	200006e8 	.word	0x200006e8
 80063b8:	0800e568 	.word	0x0800e568
 80063bc:	0800e594 	.word	0x0800e594
 80063c0:	0800e5cc 	.word	0x0800e5cc

080063c4 <rpcSendFrame>:
 *
 * @param   cmd0 System, cmd1 subsystem, ptr to payload, lenght of payload
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
uint8_t rpcSendFrame(uint8_t cmd0, uint8_t cmd1, uint8_t *payload, uint8_t payload_len) {
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b0c5      	sub	sp, #276	; 0x114
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	4639      	mov	r1, r7
 80063d0:	600a      	str	r2, [r1, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	1dfb      	adds	r3, r7, #7
 80063d6:	4622      	mov	r2, r4
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	1dbb      	adds	r3, r7, #6
 80063dc:	4602      	mov	r2, r0
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	1d7b      	adds	r3, r7, #5
 80063e2:	460a      	mov	r2, r1
 80063e4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[RPC_MAX_LEN];
	int32_t status = MT_RPC_SUCCESS;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	// block here if SREQ is in progress
	//dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Blocking on RPC sem\n");
	//sem_wait(&rpcSem);
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Sending RPC\n");
 80063ec:	4947      	ldr	r1, [pc, #284]	; (800650c <rpcSendFrame+0x148>)
 80063ee:	2002      	movs	r0, #2
 80063f0:	f7ff fd30 	bl	8005e54 <dbg_print>

	// fill in header bytes
	buf[0] = MT_RPC_SOF;
 80063f4:	f107 030c 	add.w	r3, r7, #12
 80063f8:	22fe      	movs	r2, #254	; 0xfe
 80063fa:	701a      	strb	r2, [r3, #0]
	buf[1] = payload_len;
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	1d7a      	adds	r2, r7, #5
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	705a      	strb	r2, [r3, #1]
	buf[2] = cmd0;
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	1dfa      	adds	r2, r7, #7
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	709a      	strb	r2, [r3, #2]
	buf[3] = cmd1;
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	1dba      	adds	r2, r7, #6
 8006416:	7812      	ldrb	r2, [r2, #0]
 8006418:	70da      	strb	r2, [r3, #3]

	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 800641a:	1dfb      	adds	r3, r7, #7
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006422:	2b20      	cmp	r3, #32
 8006424:	d106      	bne.n	8006434 <rpcSendFrame+0x70>
		// calculate expected SRSP
		expectedSrspCmdId = (cmd0 & MT_RPC_SUBSYSTEM_MASK);
 8006426:	1dfb      	adds	r3, r7, #7
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b37      	ldr	r3, [pc, #220]	; (8006510 <rpcSendFrame+0x14c>)
 8006432:	701a      	strb	r2, [r3, #0]
	}

	if (payload_len > 0) {
 8006434:	1d7b      	adds	r3, r7, #5
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d009      	beq.n	8006450 <rpcSendFrame+0x8c>
		// copy payload to buffer
		memcpy(buf + RPC_UART_HDR_LEN, payload, payload_len);
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	3304      	adds	r3, #4
 8006442:	1d7a      	adds	r2, r7, #5
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	4639      	mov	r1, r7
 8006448:	6809      	ldr	r1, [r1, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f005 fae8 	bl	800ba20 <memcpy>
	}

	// calculate FCS field
	buf[payload_len + RPC_UART_HDR_LEN] = calcFcs(&buf[RPC_UART_FRAME_START_IDX], payload_len + RPC_HDR_LEN);
 8006450:	1d7b      	adds	r3, r7, #5
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	3303      	adds	r3, #3
 8006456:	b2da      	uxtb	r2, r3
 8006458:	1d7b      	adds	r3, r7, #5
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	1d1c      	adds	r4, r3, #4
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	3301      	adds	r3, #1
 8006464:	4611      	mov	r1, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f85e 	bl	8006528 <calcFcs>
 800646c:	4603      	mov	r3, r0
 800646e:	461a      	mov	r2, r3
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	551a      	strb	r2, [r3, r4]
#ifdef HAL_UART_IP
	// No SOF or FCS
	rpcTransportWrite(buf+1, payload_len + RPC_HDR_LEN + RPC_UART_FCS_LEN);
#else
	// send out RPC  message
	rpcTransportWrite(buf, payload_len + RPC_UART_HDR_LEN + RPC_UART_FCS_LEN);
 8006476:	1d7b      	adds	r3, r7, #5
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	3305      	adds	r3, #5
 800647c:	b2da      	uxtb	r2, r3
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fd8b 	bl	8005fa0 <rpcTransportWrite>
#endif

	// print out message to be sent
	printRpcMsg("SOC OUT -->", buf[0], payload_len, &buf[2]);
 800648a:	f107 030c 	add.w	r3, r7, #12
 800648e:	7819      	ldrb	r1, [r3, #0]
 8006490:	f107 030c 	add.w	r3, r7, #12
 8006494:	1c98      	adds	r0, r3, #2
 8006496:	1d7b      	adds	r3, r7, #5
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	4603      	mov	r3, r0
 800649c:	481d      	ldr	r0, [pc, #116]	; (8006514 <rpcSendFrame+0x150>)
 800649e:	f000 f85f 	bl	8006560 <printRpcMsg>

	// wait for SRSP if necessary
	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 80064a2:	1dfb      	adds	r3, r7, #7
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d126      	bne.n	80064fc <rpcSendFrame+0x138>
		dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: waiting for SRSP [%02x]\n", expectedSrspCmdId);
 80064ae:	4b18      	ldr	r3, [pc, #96]	; (8006510 <rpcSendFrame+0x14c>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	4918      	ldr	r1, [pc, #96]	; (8006518 <rpcSendFrame+0x154>)
 80064b6:	2002      	movs	r0, #2
 80064b8:	f7ff fccc 	bl	8005e54 <dbg_print>

		//Wait for the SRSP
		if (xSemaphoreTake(srspSem, SRSP_TIMEOUT_MS) == pdFALSE) {
 80064bc:	4b17      	ldr	r3, [pc, #92]	; (800651c <rpcSendFrame+0x158>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f003 fb95 	bl	8009bf4 <xQueueSemaphoreTake>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10b      	bne.n	80064e8 <rpcSendFrame+0x124>
			dbg_print(PRINT_LEVEL_WARNING, "rpcSendFrame: SRSP Error - CMD0: 0x%02X CMD1: 0x%02X\n", cmd0, cmd1);
 80064d0:	1dfb      	adds	r3, r7, #7
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	1dbb      	adds	r3, r7, #6
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4911      	ldr	r1, [pc, #68]	; (8006520 <rpcSendFrame+0x15c>)
 80064da:	2001      	movs	r0, #1
 80064dc:	f7ff fcba 	bl	8005e54 <dbg_print>
			status = MT_RPC_ERR_SUBSYSTEM;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064e6:	e006      	b.n	80064f6 <rpcSendFrame+0x132>
		}
		else {
			dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Receive SRSP\n");
 80064e8:	490e      	ldr	r1, [pc, #56]	; (8006524 <rpcSendFrame+0x160>)
 80064ea:	2002      	movs	r0, #2
 80064ec:	f7ff fcb2 	bl	8005e54 <dbg_print>
			status = MT_RPC_SUCCESS;
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		//set expected SRSP to invalid
		expectedSrspCmdId = 0xFF;
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <rpcSendFrame+0x14c>)
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	701a      	strb	r2, [r3, #0]
	}

	//Unlock RPC sem
	//sem_post(&rpcSem);

	return status;
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006500:	b2db      	uxtb	r3, r3
}
 8006502:	4618      	mov	r0, r3
 8006504:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006508:	46bd      	mov	sp, r7
 800650a:	bd90      	pop	{r4, r7, pc}
 800650c:	0800e5ec 	.word	0x0800e5ec
 8006510:	200006e4 	.word	0x200006e4
 8006514:	0800e608 	.word	0x0800e608
 8006518:	0800e614 	.word	0x0800e614
 800651c:	200006e0 	.word	0x200006e0
 8006520:	0800e63c 	.word	0x0800e63c
 8006524:	0800e674 	.word	0x0800e674

08006528 <calcFcs>:
 * @param   msg  - pointer to the RPC general format frame message
 * @param   size - RPC general format frame size
 *
 * @return  FCS value
 */
static uint8_t calcFcs(uint8_t *msg, uint8_t size) {
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]

	// calculate FCS by XORing all bytes
	while (size--) {
 8006538:	e006      	b.n	8006548 <calcFcs+0x20>
		result ^= *msg++;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	4053      	eors	r3, r2
 8006546:	73fb      	strb	r3, [r7, #15]
	while (size--) {
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	1e5a      	subs	r2, r3, #1
 800654c:	70fa      	strb	r2, [r7, #3]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f3      	bne.n	800653a <calcFcs+0x12>
	}

	return result;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <printRpcMsg>:
 * @param   len - length byte
 * @param   msg  - pointer to the RPC message starting from Cmd0 byte
 *
 * @return  FCS value
 */
static void printRpcMsg(char *preMsg, uint8_t sof, uint8_t len, uint8_t *msg) {
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b08b      	sub	sp, #44	; 0x2c
 8006564:	af04      	add	r7, sp, #16
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	72fb      	strb	r3, [r7, #11]
 800656e:	4613      	mov	r3, r2
 8006570:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	// print headers
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%s %d Bytes: SOF:%02X, Len:%02X, CMD0:%02X, CMD1:%02X, Payload:", preMsg, len + 5, sof, len, msg[0], msg[1]);
 8006572:	7abb      	ldrb	r3, [r7, #10]
 8006574:	1d58      	adds	r0, r3, #5
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	7aba      	ldrb	r2, [r7, #10]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	7809      	ldrb	r1, [r1, #0]
 800657e:	460c      	mov	r4, r1
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	3101      	adds	r1, #1
 8006584:	7809      	ldrb	r1, [r1, #0]
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	9402      	str	r4, [sp, #8]
 800658a:	9201      	str	r2, [sp, #4]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4603      	mov	r3, r0
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4917      	ldr	r1, [pc, #92]	; (80065f0 <printRpcMsg+0x90>)
 8006594:	2003      	movs	r0, #3
 8006596:	f7ff fc5d 	bl	8005e54 <dbg_print>

	// print frame payload
	for (i = 2; i < len + 2; i++) {
 800659a:	2302      	movs	r3, #2
 800659c:	75fb      	strb	r3, [r7, #23]
 800659e:	e014      	b.n	80065ca <printRpcMsg+0x6a>
		dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%02X%s", msg[i], i < (len + 2 - 1) ? ":" : ",");
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	4619      	mov	r1, r3
 80065aa:	7dfa      	ldrb	r2, [r7, #23]
 80065ac:	7abb      	ldrb	r3, [r7, #10]
 80065ae:	3301      	adds	r3, #1
 80065b0:	429a      	cmp	r2, r3
 80065b2:	da01      	bge.n	80065b8 <printRpcMsg+0x58>
 80065b4:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <printRpcMsg+0x94>)
 80065b6:	e000      	b.n	80065ba <printRpcMsg+0x5a>
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <printRpcMsg+0x98>)
 80065ba:	460a      	mov	r2, r1
 80065bc:	490f      	ldr	r1, [pc, #60]	; (80065fc <printRpcMsg+0x9c>)
 80065be:	2003      	movs	r0, #3
 80065c0:	f7ff fc48 	bl	8005e54 <dbg_print>
	for (i = 2; i < len + 2; i++) {
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	3301      	adds	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
 80065ca:	7dfa      	ldrb	r2, [r7, #23]
 80065cc:	7abb      	ldrb	r3, [r7, #10]
 80065ce:	3302      	adds	r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	dbe5      	blt.n	80065a0 <printRpcMsg+0x40>
	}

	// print FCS
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, " FCS:%02X\n", msg[i]);
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	4908      	ldr	r1, [pc, #32]	; (8006600 <printRpcMsg+0xa0>)
 80065e0:	2003      	movs	r0, #3
 80065e2:	f7ff fc37 	bl	8005e54 <dbg_print>

}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd90      	pop	{r4, r7, pc}
 80065ee:	bf00      	nop
 80065f0:	0800e690 	.word	0x0800e690
 80065f4:	0800e6d0 	.word	0x0800e6d0
 80065f8:	0800e6d4 	.word	0x0800e6d4
 80065fc:	0800e6d8 	.word	0x0800e6d8
 8006600:	0800e6e0 	.word	0x0800e6e0

08006604 <llq_open>:
 *
 * @param    llq_t *hndl - handle to queue to be created
 *
 * @return   none
 */
void llq_open(llq_t *hndl) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	hndl->queue = xQueueCreate(Q_SIZE, sizeof(queue_data_t));
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006612:	2008      	movs	r0, #8
 8006614:	f003 f822 	bl	800965c <xQueueGenericCreate>
 8006618:	4602      	mov	r2, r0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <llq_timedreceive>:
 * @Param	int maxLength - Max length of message to read
 * @Param	struct timespec * timeout - Timeout value
 *
 * @return   length of message read from queue
 */
int llq_timedreceive(llq_t *hndl, char *buffer, int maxLength, int timeout) {
 8006626:	b590      	push	{r4, r7, lr}
 8006628:	b0c9      	sub	sp, #292	; 0x124
 800662a:	af00      	add	r7, sp, #0
 800662c:	f107 040c 	add.w	r4, r7, #12
 8006630:	6020      	str	r0, [r4, #0]
 8006632:	f107 0008 	add.w	r0, r7, #8
 8006636:	6001      	str	r1, [r0, #0]
 8006638:	1d39      	adds	r1, r7, #4
 800663a:	600a      	str	r2, [r1, #0]
 800663c:	463a      	mov	r2, r7
 800663e:	6013      	str	r3, [r2, #0]
	int sepmRnt = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	queue_data_t q_buf = { 0 };
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	4618      	mov	r0, r3
 800664c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006650:	461a      	mov	r2, r3
 8006652:	2100      	movs	r1, #0
 8006654:	f005 f9ef 	bl	800ba36 <memset>

	// wait for a message or timeout
	if (xQueueReceive(hndl->queue, &q_buf, timeout) != pdTRUE) {
 8006658:	f107 030c 	add.w	r3, r7, #12
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	463b      	mov	r3, r7
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4619      	mov	r1, r3
 800666a:	f003 f9e7 	bl	8009a3c <xQueueReceive>
 800666e:	4603      	mov	r3, r0
 8006670:	2b01      	cmp	r3, #1
 8006672:	d003      	beq.n	800667c <llq_timedreceive+0x56>
		sepmRnt = -1;
 8006674:	f04f 33ff 	mov.w	r3, #4294967295
 8006678:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}

	int rLength = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	// we read with success?
	if (sepmRnt != -1) {
 8006682:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d015      	beq.n	80066b8 <llq_timedreceive+0x92>
		rLength = MIN(q_buf.len, maxLength);
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8006694:	461a      	mov	r2, r3
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4293      	cmp	r3, r2
 800669c:	bfa8      	it	ge
 800669e:	4613      	movge	r3, r2
 80066a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		memcpy(buffer, q_buf.data, rLength);
 80066a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80066a8:	f107 0114 	add.w	r1, r7, #20
 80066ac:	f107 0308 	add.w	r3, r7, #8
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	f005 f9b5 	bl	800ba20 <memcpy>
 80066b6:	e003      	b.n	80066c0 <llq_timedreceive+0x9a>
	}
	// error in read
	else {
		rLength = -1;
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
 80066bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	}

	// return
	return rLength;
 80066c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd90      	pop	{r4, r7, pc}

080066ce <llq_add>:
 * @Param	int prio - 1 message has priority and should be added to
 * 			head of queue, 0 message assed to tail of queue
 *
 * @return   length of message read from queue
 */
int llq_add(llq_t *hndl, char *buffer, int len, int prio) {
 80066ce:	b590      	push	{r4, r7, lr}
 80066d0:	b0c7      	sub	sp, #284	; 0x11c
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	f107 040c 	add.w	r4, r7, #12
 80066d8:	6020      	str	r0, [r4, #0]
 80066da:	f107 0008 	add.w	r0, r7, #8
 80066de:	6001      	str	r1, [r0, #0]
 80066e0:	1d39      	adds	r1, r7, #4
 80066e2:	600a      	str	r2, [r1, #0]
 80066e4:	463a      	mov	r2, r7
 80066e6:	6013      	str	r3, [r2, #0]
	int ret = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	queue_data_t q_buf = { 0 };
 80066ee:	f107 0310 	add.w	r3, r7, #16
 80066f2:	4618      	mov	r0, r3
 80066f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80066f8:	461a      	mov	r2, r3
 80066fa:	2100      	movs	r1, #0
 80066fc:	f005 f99b 	bl	800ba36 <memset>

	// length
	q_buf.len = MIN(Q_FRAME_SIZE, len);
 8006700:	1d3b      	adds	r3, r7, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006708:	bfa8      	it	ge
 800670a:	f44f 7380 	movge.w	r3, #256	; 0x100
 800670e:	b29a      	uxth	r2, r3
 8006710:	f107 0310 	add.w	r3, r7, #16
 8006714:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// data
	memcpy(q_buf.data, buffer, q_buf.len);
 8006718:	f107 0310 	add.w	r3, r7, #16
 800671c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8006720:	461a      	mov	r2, r3
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	f107 0010 	add.w	r0, r7, #16
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	f005 f978 	bl	800ba20 <memcpy>

	if (prio == 1) {
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d10a      	bne.n	800674e <llq_add+0x80>
		xQueueSendToFront(hndl->queue, &q_buf, 10);
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	f107 0110 	add.w	r1, r7, #16
 8006744:	2301      	movs	r3, #1
 8006746:	220a      	movs	r2, #10
 8006748:	f002 ffea 	bl	8009720 <xQueueGenericSend>
 800674c:	e009      	b.n	8006762 <llq_add+0x94>
	}
	else {
		xQueueSendToBack(hndl->queue, &q_buf, 10);
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f107 0110 	add.w	r1, r7, #16
 800675a:	2300      	movs	r3, #0
 800675c:	220a      	movs	r2, #10
 800675e:	f002 ffdf 	bl	8009720 <xQueueGenericSend>
	}

	return ret;
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8006766:	4618      	mov	r0, r3
 8006768:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800676c:	46bd      	mov	sp, r7
 800676e:	bd90      	pop	{r4, r7, pc}

08006770 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800677a:	2003      	movs	r0, #3
 800677c:	f000 f8db 	bl	8006936 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006780:	2000      	movs	r0, #0
 8006782:	f7fa fbe5 	bl	8000f50 <HAL_InitTick>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	71fb      	strb	r3, [r7, #7]
 8006790:	e001      	b.n	8006796 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006792:	f7fa fbb5 	bl	8000f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006796:	79fb      	ldrb	r3, [r7, #7]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_IncTick+0x1c>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_IncTick+0x20>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	4a03      	ldr	r2, [pc, #12]	; (80067bc <HAL_IncTick+0x1c>)
 80067b0:	6013      	str	r3, [r2, #0]
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	2000319c 	.word	0x2000319c
 80067c0:	200000e4 	.word	0x200000e4

080067c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return uwTick;
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <HAL_GetTick+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2000319c 	.word	0x2000319c

080067dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680e:	4a04      	ldr	r2, [pc, #16]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	60d3      	str	r3, [r2, #12]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	e000ed00 	.word	0xe000ed00

08006824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <__NVIC_GetPriorityGrouping+0x18>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	f003 0307 	and.w	r3, r3, #7
}
 8006832:	4618      	mov	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800684a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db0b      	blt.n	800686a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <__NVIC_EnableIRQ+0x38>)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	2001      	movs	r0, #1
 8006862:	fa00 f202 	lsl.w	r2, r0, r2
 8006866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	e000e100 	.word	0xe000e100

0800687c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db0a      	blt.n	80068a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	490c      	ldr	r1, [pc, #48]	; (80068c8 <__NVIC_SetPriority+0x4c>)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	0112      	lsls	r2, r2, #4
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068a4:	e00a      	b.n	80068bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4908      	ldr	r1, [pc, #32]	; (80068cc <__NVIC_SetPriority+0x50>)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3b04      	subs	r3, #4
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	440b      	add	r3, r1
 80068ba:	761a      	strb	r2, [r3, #24]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000e100 	.word	0xe000e100
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f1c3 0307 	rsb	r3, r3, #7
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf28      	it	cs
 80068ee:	2304      	movcs	r3, #4
 80068f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d902      	bls.n	8006900 <NVIC_EncodePriority+0x30>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3b03      	subs	r3, #3
 80068fe:	e000      	b.n	8006902 <NVIC_EncodePriority+0x32>
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43da      	mvns	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	401a      	ands	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006918:	f04f 31ff 	mov.w	r1, #4294967295
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	43d9      	mvns	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006928:	4313      	orrs	r3, r2
         );
}
 800692a:	4618      	mov	r0, r3
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff4c 	bl	80067dc <__NVIC_SetPriorityGrouping>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800695e:	f7ff ff61 	bl	8006824 <__NVIC_GetPriorityGrouping>
 8006962:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	6978      	ldr	r0, [r7, #20]
 800696a:	f7ff ffb1 	bl	80068d0 <NVIC_EncodePriority>
 800696e:	4602      	mov	r2, r0
 8006970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff80 	bl	800687c <__NVIC_SetPriority>
}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800698e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff ff54 	bl	8006840 <__NVIC_EnableIRQ>
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069ae:	e166      	b.n	8006c7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2101      	movs	r1, #1
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	fa01 f303 	lsl.w	r3, r1, r3
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8158 	beq.w	8006c78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d00b      	beq.n	80069e8 <HAL_GPIO_Init+0x48>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d007      	beq.n	80069e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069dc:	2b11      	cmp	r3, #17
 80069de:	d003      	beq.n	80069e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b12      	cmp	r3, #18
 80069e6:	d130      	bne.n	8006a4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	2203      	movs	r2, #3
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	43db      	mvns	r3, r3
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4013      	ands	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a1e:	2201      	movs	r2, #1
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	f003 0201 	and.w	r2, r3, #1
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	2203      	movs	r2, #3
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d003      	beq.n	8006a8a <HAL_GPIO_Init+0xea>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b12      	cmp	r3, #18
 8006a88:	d123      	bne.n	8006ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	08da      	lsrs	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3208      	adds	r2, #8
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	08da      	lsrs	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3208      	adds	r2, #8
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	2203      	movs	r2, #3
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80b2 	beq.w	8006c78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b14:	4b61      	ldr	r3, [pc, #388]	; (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	4a60      	ldr	r2, [pc, #384]	; (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8006b20:	4b5e      	ldr	r3, [pc, #376]	; (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b2c:	4a5c      	ldr	r2, [pc, #368]	; (8006ca0 <HAL_GPIO_Init+0x300>)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	089b      	lsrs	r3, r3, #2
 8006b32:	3302      	adds	r3, #2
 8006b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	220f      	movs	r2, #15
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b56:	d02b      	beq.n	8006bb0 <HAL_GPIO_Init+0x210>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a52      	ldr	r2, [pc, #328]	; (8006ca4 <HAL_GPIO_Init+0x304>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d025      	beq.n	8006bac <HAL_GPIO_Init+0x20c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a51      	ldr	r2, [pc, #324]	; (8006ca8 <HAL_GPIO_Init+0x308>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01f      	beq.n	8006ba8 <HAL_GPIO_Init+0x208>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a50      	ldr	r2, [pc, #320]	; (8006cac <HAL_GPIO_Init+0x30c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d019      	beq.n	8006ba4 <HAL_GPIO_Init+0x204>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a4f      	ldr	r2, [pc, #316]	; (8006cb0 <HAL_GPIO_Init+0x310>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <HAL_GPIO_Init+0x200>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a4e      	ldr	r2, [pc, #312]	; (8006cb4 <HAL_GPIO_Init+0x314>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00d      	beq.n	8006b9c <HAL_GPIO_Init+0x1fc>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a4d      	ldr	r2, [pc, #308]	; (8006cb8 <HAL_GPIO_Init+0x318>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <HAL_GPIO_Init+0x1f8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a4c      	ldr	r2, [pc, #304]	; (8006cbc <HAL_GPIO_Init+0x31c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_GPIO_Init+0x1f4>
 8006b90:	2307      	movs	r3, #7
 8006b92:	e00e      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b94:	2308      	movs	r3, #8
 8006b96:	e00c      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b98:	2306      	movs	r3, #6
 8006b9a:	e00a      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b9c:	2305      	movs	r3, #5
 8006b9e:	e008      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	e006      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e004      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e002      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	f002 0203 	and.w	r2, r2, #3
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	4093      	lsls	r3, r2
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006bc2:	4937      	ldr	r1, [pc, #220]	; (8006ca0 <HAL_GPIO_Init+0x300>)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bd0:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bf4:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006bfa:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	43db      	mvns	r3, r3
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4013      	ands	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c1e:	4a28      	ldr	r2, [pc, #160]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c24:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c72:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f47f ae91 	bne.w	80069b0 <HAL_GPIO_Init+0x10>
  }
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	48000400 	.word	0x48000400
 8006ca8:	48000800 	.word	0x48000800
 8006cac:	48000c00 	.word	0x48000c00
 8006cb0:	48001000 	.word	0x48001000
 8006cb4:	48001400 	.word	0x48001400
 8006cb8:	48001800 	.word	0x48001800
 8006cbc:	48001c00 	.word	0x48001c00
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40007000 	.word	0x40007000

08006ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d130      	bne.n	8006d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cf0:	4b23      	ldr	r3, [pc, #140]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfc:	d038      	beq.n	8006d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2232      	movs	r2, #50	; 0x32
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
 8006d18:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	0c9b      	lsrs	r3, r3, #18
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d24:	e002      	b.n	8006d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d2c:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d102      	bne.n	8006d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f2      	bne.n	8006d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d40:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4c:	d110      	bne.n	8006d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e00f      	b.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5e:	d007      	beq.n	8006d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d68:	4a05      	ldr	r2, [pc, #20]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40007000 	.word	0x40007000
 8006d84:	200000dc 	.word	0x200000dc
 8006d88:	431bde83 	.word	0x431bde83

08006d8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d9a:	6053      	str	r3, [r2, #4]
}
 8006d9c:	bf00      	nop
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40007000 	.word	0x40007000

08006dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f000 bc16 	b.w	80075ec <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc0:	4ba0      	ldr	r3, [pc, #640]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 030c 	and.w	r3, r3, #12
 8006dc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dca:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80e4 	beq.w	8006faa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4c>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b0c      	cmp	r3, #12
 8006dec:	f040 808b 	bne.w	8006f06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	f040 8087 	bne.w	8006f06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006df8:	4b92      	ldr	r3, [pc, #584]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_OscConfig+0x64>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e3ed      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	4b8b      	ldr	r3, [pc, #556]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <HAL_RCC_OscConfig+0x7e>
 8006e20:	4b88      	ldr	r3, [pc, #544]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e28:	e005      	b.n	8006e36 <HAL_RCC_OscConfig+0x8a>
 8006e2a:	4b86      	ldr	r3, [pc, #536]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d223      	bcs.n	8006e82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fdb0 	bl	80079a4 <RCC_SetFlashLatencyFromMSIRange>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e3ce      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e4e:	4b7d      	ldr	r3, [pc, #500]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e54:	f043 0308 	orr.w	r3, r3, #8
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4b7a      	ldr	r3, [pc, #488]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4977      	ldr	r1, [pc, #476]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e6c:	4b75      	ldr	r3, [pc, #468]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	4972      	ldr	r1, [pc, #456]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	604b      	str	r3, [r1, #4]
 8006e80:	e025      	b.n	8006ece <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e82:	4b70      	ldr	r3, [pc, #448]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6f      	ldr	r2, [pc, #444]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e88:	f043 0308 	orr.w	r3, r3, #8
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b6d      	ldr	r3, [pc, #436]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	496a      	ldr	r1, [pc, #424]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ea0:	4b68      	ldr	r3, [pc, #416]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	4965      	ldr	r1, [pc, #404]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fd70 	bl	80079a4 <RCC_SetFlashLatencyFromMSIRange>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e38e      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ece:	f000 fc75 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4b5b      	ldr	r3, [pc, #364]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a5a      	ldr	r2, [pc, #360]	; (8007048 <HAL_RCC_OscConfig+0x29c>)
 8006ee0:	5cd3      	ldrb	r3, [r2, r3]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8006eea:	4a58      	ldr	r2, [pc, #352]	; (800704c <HAL_RCC_OscConfig+0x2a0>)
 8006eec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006eee:	4b58      	ldr	r3, [pc, #352]	; (8007050 <HAL_RCC_OscConfig+0x2a4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fa f82c 	bl	8000f50 <HAL_InitTick>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d052      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	e372      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d032      	beq.n	8006f74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4c      	ldr	r2, [pc, #304]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f14:	f043 0301 	orr.w	r3, r3, #1
 8006f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f1a:	f7ff fc53 	bl	80067c4 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f22:	f7ff fc4f 	bl	80067c4 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e35b      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f34:	4b43      	ldr	r3, [pc, #268]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f40:	4b40      	ldr	r3, [pc, #256]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a3f      	ldr	r2, [pc, #252]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f46:	f043 0308 	orr.w	r3, r3, #8
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	493a      	ldr	r1, [pc, #232]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f5e:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	4935      	ldr	r1, [pc, #212]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	604b      	str	r3, [r1, #4]
 8006f72:	e01a      	b.n	8006faa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f74:	4b33      	ldr	r3, [pc, #204]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a32      	ldr	r2, [pc, #200]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f80:	f7ff fc20 	bl	80067c4 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f88:	f7ff fc1c 	bl	80067c4 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e328      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f9a:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <HAL_RCC_OscConfig+0x1dc>
 8006fa6:	e000      	b.n	8006faa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d073      	beq.n	800709e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x21c>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b0c      	cmp	r3, #12
 8006fc0:	d10e      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d063      	beq.n	800709c <HAL_RCC_OscConfig+0x2f0>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d15f      	bne.n	800709c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e305      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x24c>
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a15      	ldr	r2, [pc, #84]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e01d      	b.n	8007034 <HAL_RCC_OscConfig+0x288>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007000:	d10c      	bne.n	800701c <HAL_RCC_OscConfig+0x270>
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a0f      	ldr	r2, [pc, #60]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8007008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e00b      	b.n	8007034 <HAL_RCC_OscConfig+0x288>
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a08      	ldr	r2, [pc, #32]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 8007022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a05      	ldr	r2, [pc, #20]	; (8007044 <HAL_RCC_OscConfig+0x298>)
 800702e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01b      	beq.n	8007074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7ff fbc2 	bl	80067c4 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007042:	e010      	b.n	8007066 <HAL_RCC_OscConfig+0x2ba>
 8007044:	40021000 	.word	0x40021000
 8007048:	0800e71c 	.word	0x0800e71c
 800704c:	200000dc 	.word	0x200000dc
 8007050:	200000e0 	.word	0x200000e0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007054:	f7ff fbb6 	bl	80067c4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b64      	cmp	r3, #100	; 0x64
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e2c2      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007066:	4baf      	ldr	r3, [pc, #700]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x2a8>
 8007072:	e014      	b.n	800709e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7ff fba6 	bl	80067c4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800707c:	f7ff fba2 	bl	80067c4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b64      	cmp	r3, #100	; 0x64
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e2ae      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800708e:	4ba5      	ldr	r3, [pc, #660]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x2d0>
 800709a:	e000      	b.n	800709e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d060      	beq.n	800716c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_OscConfig+0x310>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d119      	bne.n	80070ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d116      	bne.n	80070ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070bc:	4b99      	ldr	r3, [pc, #612]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_OscConfig+0x328>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e28b      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d4:	4b93      	ldr	r3, [pc, #588]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	4990      	ldr	r1, [pc, #576]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e8:	e040      	b.n	800716c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d023      	beq.n	800713a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070f2:	4b8c      	ldr	r3, [pc, #560]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a8b      	ldr	r2, [pc, #556]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80070f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fe:	f7ff fb61 	bl	80067c4 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007106:	f7ff fb5d 	bl	80067c4 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e269      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007118:	4b82      	ldr	r3, [pc, #520]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0f0      	beq.n	8007106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007124:	4b7f      	ldr	r3, [pc, #508]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	061b      	lsls	r3, r3, #24
 8007132:	497c      	ldr	r1, [pc, #496]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007134:	4313      	orrs	r3, r2
 8007136:	604b      	str	r3, [r1, #4]
 8007138:	e018      	b.n	800716c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713a:	4b7a      	ldr	r3, [pc, #488]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a79      	ldr	r2, [pc, #484]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7ff fb3d 	bl	80067c4 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714e:	f7ff fb39 	bl	80067c4 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e245      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007160:	4b70      	ldr	r3, [pc, #448]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d03c      	beq.n	80071f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d01c      	beq.n	80071ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007180:	4b68      	ldr	r3, [pc, #416]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007186:	4a67      	ldr	r2, [pc, #412]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007190:	f7ff fb18 	bl	80067c4 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007198:	f7ff fb14 	bl	80067c4 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e220      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071aa:	4b5e      	ldr	r3, [pc, #376]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80071ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ef      	beq.n	8007198 <HAL_RCC_OscConfig+0x3ec>
 80071b8:	e01b      	b.n	80071f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ba:	4b5a      	ldr	r3, [pc, #360]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80071bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c0:	4a58      	ldr	r2, [pc, #352]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7ff fafb 	bl	80067c4 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d2:	f7ff faf7 	bl	80067c4 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e203      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071e4:	4b4f      	ldr	r3, [pc, #316]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1ef      	bne.n	80071d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80a6 	beq.w	800734c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007200:	2300      	movs	r3, #0
 8007202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007204:	4b47      	ldr	r3, [pc, #284]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10d      	bne.n	800722c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007210:	4b44      	ldr	r3, [pc, #272]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	4a43      	ldr	r2, [pc, #268]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800721a:	6593      	str	r3, [r2, #88]	; 0x58
 800721c:	4b41      	ldr	r3, [pc, #260]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800721e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007228:	2301      	movs	r3, #1
 800722a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <HAL_RCC_OscConfig+0x57c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d118      	bne.n	800726a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007238:	4b3b      	ldr	r3, [pc, #236]	; (8007328 <HAL_RCC_OscConfig+0x57c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a3a      	ldr	r2, [pc, #232]	; (8007328 <HAL_RCC_OscConfig+0x57c>)
 800723e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007244:	f7ff fabe 	bl	80067c4 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724c:	f7ff faba 	bl	80067c4 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e1c6      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800725e:	4b32      	ldr	r3, [pc, #200]	; (8007328 <HAL_RCC_OscConfig+0x57c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d108      	bne.n	8007284 <HAL_RCC_OscConfig+0x4d8>
 8007272:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007278:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007282:	e024      	b.n	80072ce <HAL_RCC_OscConfig+0x522>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b05      	cmp	r3, #5
 800728a:	d110      	bne.n	80072ae <HAL_RCC_OscConfig+0x502>
 800728c:	4b25      	ldr	r3, [pc, #148]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007292:	4a24      	ldr	r2, [pc, #144]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 8007294:	f043 0304 	orr.w	r3, r3, #4
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800729c:	4b21      	ldr	r3, [pc, #132]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072ac:	e00f      	b.n	80072ce <HAL_RCC_OscConfig+0x522>
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	4a1b      	ldr	r2, [pc, #108]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072be:	4b19      	ldr	r3, [pc, #100]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	4a17      	ldr	r2, [pc, #92]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072c6:	f023 0304 	bic.w	r3, r3, #4
 80072ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d6:	f7ff fa75 	bl	80067c4 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072de:	f7ff fa71 	bl	80067c4 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e17b      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_RCC_OscConfig+0x578>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0ed      	beq.n	80072de <HAL_RCC_OscConfig+0x532>
 8007302:	e01a      	b.n	800733a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7ff fa5e 	bl	80067c4 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800730a:	e00f      	b.n	800732c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730c:	f7ff fa5a 	bl	80067c4 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d906      	bls.n	800732c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e164      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
 8007322:	bf00      	nop
 8007324:	40021000 	.word	0x40021000
 8007328:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800732c:	4ba8      	ldr	r3, [pc, #672]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e8      	bne.n	800730c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800733a:	7ffb      	ldrb	r3, [r7, #31]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007340:	4ba3      	ldr	r3, [pc, #652]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	4aa2      	ldr	r2, [pc, #648]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d03c      	beq.n	80073d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007360:	4b9b      	ldr	r3, [pc, #620]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007366:	4a9a      	ldr	r2, [pc, #616]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007370:	f7ff fa28 	bl	80067c4 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007378:	f7ff fa24 	bl	80067c4 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e130      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800738a:	4b91      	ldr	r3, [pc, #580]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800738c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0ef      	beq.n	8007378 <HAL_RCC_OscConfig+0x5cc>
 8007398:	e01b      	b.n	80073d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800739a:	4b8d      	ldr	r3, [pc, #564]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800739c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073a0:	4a8b      	ldr	r2, [pc, #556]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073aa:	f7ff fa0b 	bl	80067c4 <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073b2:	f7ff fa07 	bl	80067c4 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e113      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073c4:	4b82      	ldr	r3, [pc, #520]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80073c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1ef      	bne.n	80073b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8107 	beq.w	80075ea <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	f040 80cb 	bne.w	800757c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80073e6:	4b7a      	ldr	r3, [pc, #488]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 0203 	and.w	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d12c      	bne.n	8007454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	3b01      	subs	r3, #1
 8007406:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007408:	429a      	cmp	r2, r3
 800740a:	d123      	bne.n	8007454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007418:	429a      	cmp	r2, r3
 800741a:	d11b      	bne.n	8007454 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d113      	bne.n	8007454 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	3b01      	subs	r3, #1
 800743a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	d109      	bne.n	8007454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	3b01      	subs	r3, #1
 800744e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007450:	429a      	cmp	r2, r3
 8007452:	d06d      	beq.n	8007530 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b0c      	cmp	r3, #12
 8007458:	d068      	beq.n	800752c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800745a:	4b5d      	ldr	r3, [pc, #372]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d105      	bne.n	8007472 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007466:	4b5a      	ldr	r3, [pc, #360]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e0ba      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007476:	4b56      	ldr	r3, [pc, #344]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a55      	ldr	r2, [pc, #340]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800747c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007480:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007482:	f7ff f99f 	bl	80067c4 <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007488:	e008      	b.n	800749c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748a:	f7ff f99b 	bl	80067c4 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e0a7      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800749c:	4b4c      	ldr	r3, [pc, #304]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f0      	bne.n	800748a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a8:	4b49      	ldr	r3, [pc, #292]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	4b49      	ldr	r3, [pc, #292]	; (80075d4 <HAL_RCC_OscConfig+0x828>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074b8:	3a01      	subs	r2, #1
 80074ba:	0112      	lsls	r2, r2, #4
 80074bc:	4311      	orrs	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074c2:	0212      	lsls	r2, r2, #8
 80074c4:	4311      	orrs	r1, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074ca:	0852      	lsrs	r2, r2, #1
 80074cc:	3a01      	subs	r2, #1
 80074ce:	0552      	lsls	r2, r2, #21
 80074d0:	4311      	orrs	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	3a01      	subs	r2, #1
 80074da:	0652      	lsls	r2, r2, #25
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e2:	06d2      	lsls	r2, r2, #27
 80074e4:	430a      	orrs	r2, r1
 80074e6:	493a      	ldr	r1, [pc, #232]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80074ec:	4b38      	ldr	r3, [pc, #224]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a37      	ldr	r2, [pc, #220]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f8:	4b35      	ldr	r3, [pc, #212]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4a34      	ldr	r2, [pc, #208]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80074fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007504:	f7ff f95e 	bl	80067c4 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7ff f95a 	bl	80067c4 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e066      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800752a:	e05e      	b.n	80075ea <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e05d      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007530:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d156      	bne.n	80075ea <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007548:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a20      	ldr	r2, [pc, #128]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800754e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007554:	f7ff f936 	bl	80067c4 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7ff f932 	bl	80067c4 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e03e      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756e:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x7b0>
 800757a:	e036      	b.n	80075ea <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b0c      	cmp	r3, #12
 8007580:	d031      	beq.n	80075e6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007582:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800758c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800759a:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	4a0c      	ldr	r2, [pc, #48]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <HAL_RCC_OscConfig+0x824>)
 80075ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80075b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7ff f905 	bl	80067c4 <HAL_GetTick>
 80075ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075bc:	e00c      	b.n	80075d8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075be:	f7ff f901 	bl	80067c4 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d905      	bls.n	80075d8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e00d      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
 80075d0:	40021000 	.word	0x40021000
 80075d4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <HAL_RCC_OscConfig+0x848>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1ec      	bne.n	80075be <HAL_RCC_OscConfig+0x812>
 80075e4:	e001      	b.n	80075ea <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40021000 	.word	0x40021000

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0c8      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b66      	ldr	r3, [pc, #408]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d910      	bls.n	800763c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b63      	ldr	r3, [pc, #396]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 0207 	bic.w	r2, r3, #7
 8007622:	4961      	ldr	r1, [pc, #388]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b5f      	ldr	r3, [pc, #380]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0b0      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d04c      	beq.n	80076e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d107      	bne.n	8007660 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007650:	4b56      	ldr	r3, [pc, #344]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d121      	bne.n	80076a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e09e      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d107      	bne.n	8007678 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007668:	4b50      	ldr	r3, [pc, #320]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d115      	bne.n	80076a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e092      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d107      	bne.n	8007690 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007680:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e086      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e07e      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076a0:	4b42      	ldr	r3, [pc, #264]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f023 0203 	bic.w	r2, r3, #3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	493f      	ldr	r1, [pc, #252]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b2:	f7ff f887 	bl	80067c4 <HAL_GetTick>
 80076b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b8:	e00a      	b.n	80076d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ba:	f7ff f883 	bl	80067c4 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e066      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d0:	4b36      	ldr	r3, [pc, #216]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 020c 	and.w	r2, r3, #12
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	429a      	cmp	r2, r3
 80076e0:	d1eb      	bne.n	80076ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ee:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	492c      	ldr	r1, [pc, #176]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007700:	4b29      	ldr	r3, [pc, #164]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d210      	bcs.n	8007730 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f023 0207 	bic.w	r2, r3, #7
 8007716:	4924      	ldr	r1, [pc, #144]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	4313      	orrs	r3, r2
 800771c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800771e:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <HAL_RCC_ClockConfig+0x1b0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d001      	beq.n	8007730 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e036      	b.n	800779e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4918      	ldr	r1, [pc, #96]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4910      	ldr	r1, [pc, #64]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 800776a:	4313      	orrs	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800776e:	f000 f825 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8007772:	4601      	mov	r1, r0
 8007774:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <HAL_RCC_ClockConfig+0x1b4>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	091b      	lsrs	r3, r3, #4
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	4a0c      	ldr	r2, [pc, #48]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007780:	5cd3      	ldrb	r3, [r2, r3]
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	fa21 f303 	lsr.w	r3, r1, r3
 800778a:	4a0a      	ldr	r2, [pc, #40]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f7f9 fbdc 	bl	8000f50 <HAL_InitTick>
 8007798:	4603      	mov	r3, r0
 800779a:	72fb      	strb	r3, [r7, #11]

  return status;
 800779c:	7afb      	ldrb	r3, [r7, #11]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	40022000 	.word	0x40022000
 80077ac:	40021000 	.word	0x40021000
 80077b0:	0800e71c 	.word	0x0800e71c
 80077b4:	200000dc 	.word	0x200000dc
 80077b8:	200000e0 	.word	0x200000e0

080077bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	b089      	sub	sp, #36	; 0x24
 80077c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ca:	4b3d      	ldr	r3, [pc, #244]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d4:	4b3a      	ldr	r3, [pc, #232]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_RCC_GetSysClockFreq+0x34>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b0c      	cmp	r3, #12
 80077e8:	d121      	bne.n	800782e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d11e      	bne.n	800782e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80077f0:	4b33      	ldr	r3, [pc, #204]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077fc:	4b30      	ldr	r3, [pc, #192]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80077fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	e005      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800780c:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007820:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10d      	bne.n	8007844 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800782c:	e00a      	b.n	8007844 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d102      	bne.n	800783a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007834:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e004      	b.n	8007844 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b08      	cmp	r3, #8
 800783e:	d101      	bne.n	8007844 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007840:	4b22      	ldr	r3, [pc, #136]	; (80078cc <HAL_RCC_GetSysClockFreq+0x110>)
 8007842:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b0c      	cmp	r3, #12
 8007848:	d133      	bne.n	80078b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d002      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0xa4>
 800785a:	2b03      	cmp	r3, #3
 800785c:	d003      	beq.n	8007866 <HAL_RCC_GetSysClockFreq+0xaa>
 800785e:	e005      	b.n	800786c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007860:	4b19      	ldr	r3, [pc, #100]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007862:	617b      	str	r3, [r7, #20]
      break;
 8007864:	e005      	b.n	8007872 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007866:	4b19      	ldr	r3, [pc, #100]	; (80078cc <HAL_RCC_GetSysClockFreq+0x110>)
 8007868:	617b      	str	r3, [r7, #20]
      break;
 800786a:	e002      	b.n	8007872 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	617b      	str	r3, [r7, #20]
      break;
 8007870:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	091b      	lsrs	r3, r3, #4
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	3301      	adds	r3, #1
 800787e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	fb02 f203 	mul.w	r2, r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007898:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	0e5b      	lsrs	r3, r3, #25
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	3301      	adds	r3, #1
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80078b2:	69bb      	ldr	r3, [r7, #24]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3724      	adds	r7, #36	; 0x24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40021000 	.word	0x40021000
 80078c4:	0800e734 	.word	0x0800e734
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	007a1200 	.word	0x007a1200

080078d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	200000dc 	.word	0x200000dc

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4601      	mov	r1, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4a04      	ldr	r2, [pc, #16]	; (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5cd3      	ldrb	r3, [r2, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	0800e72c 	.word	0x0800e72c

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007918:	f7ff ffda 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 800791c:	4601      	mov	r1, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	0adb      	lsrs	r3, r3, #11
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4a04      	ldr	r2, [pc, #16]	; (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5cd3      	ldrb	r3, [r2, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40021000 	.word	0x40021000
 800793c:	0800e72c 	.word	0x0800e72c

08007940 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	220f      	movs	r2, #15
 800794e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007950:	4b12      	ldr	r3, [pc, #72]	; (800799c <HAL_RCC_GetClockConfig+0x5c>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 0203 	and.w	r2, r3, #3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800795c:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_RCC_GetClockConfig+0x5c>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <HAL_RCC_GetClockConfig+0x5c>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_GetClockConfig+0x5c>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	08db      	lsrs	r3, r3, #3
 800797a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <HAL_RCC_GetClockConfig+0x60>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0207 	and.w	r2, r3, #7
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40021000 	.word	0x40021000
 80079a0:	40022000 	.word	0x40022000

080079a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079b0:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079bc:	f7ff f982 	bl	8006cc4 <HAL_PWREx_GetVoltageRange>
 80079c0:	6178      	str	r0, [r7, #20]
 80079c2:	e014      	b.n	80079ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c8:	4a24      	ldr	r2, [pc, #144]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ce:	6593      	str	r3, [r2, #88]	; 0x58
 80079d0:	4b22      	ldr	r3, [pc, #136]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079dc:	f7ff f972 	bl	8006cc4 <HAL_PWREx_GetVoltageRange>
 80079e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f4:	d10b      	bne.n	8007a0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d919      	bls.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2ba0      	cmp	r3, #160	; 0xa0
 8007a00:	d902      	bls.n	8007a08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a02:	2302      	movs	r3, #2
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e013      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a08:	2301      	movs	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	e010      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b80      	cmp	r3, #128	; 0x80
 8007a12:	d902      	bls.n	8007a1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a14:	2303      	movs	r3, #3
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e00a      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d102      	bne.n	8007a26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a20:	2302      	movs	r3, #2
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	e004      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b70      	cmp	r3, #112	; 0x70
 8007a2a:	d101      	bne.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f023 0207 	bic.w	r2, r3, #7
 8007a38:	4909      	ldr	r1, [pc, #36]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d001      	beq.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40022000 	.word	0x40022000

08007a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a70:	2300      	movs	r3, #0
 8007a72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03f      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a88:	d01c      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a8e:	d802      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007a94:	e01f      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a9a:	d003      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007a9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007aa0:	d01c      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007aa2:	e018      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007aa4:	4b85      	ldr	r3, [pc, #532]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a84      	ldr	r2, [pc, #528]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ab0:	e015      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 facb 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ac2:	e00c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3320      	adds	r3, #32
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fbb2 	bl	8008234 <RCCEx_PLLSAI2_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	74fb      	strb	r3, [r7, #19]
      break;
 8007ada:	e000      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ade:	7cfb      	ldrb	r3, [r7, #19]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ae4:	4b75      	ldr	r3, [pc, #468]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af2:	4972      	ldr	r1, [pc, #456]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007afa:	e001      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	7cfb      	ldrb	r3, [r7, #19]
 8007afe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d03f      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b14:	d01c      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b1a:	d802      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007b20:	e01f      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b26:	d003      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b2c:	d01c      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007b2e:	e018      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b30:	4b62      	ldr	r3, [pc, #392]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4a61      	ldr	r2, [pc, #388]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b3c:	e015      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	2100      	movs	r1, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fa85 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b4e:	e00c      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3320      	adds	r3, #32
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fb6c 	bl	8008234 <RCCEx_PLLSAI2_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b60:	e003      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	74fb      	strb	r3, [r7, #19]
      break;
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6a:	7cfb      	ldrb	r3, [r7, #19]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b70:	4b52      	ldr	r3, [pc, #328]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7e:	494f      	ldr	r1, [pc, #316]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b86:	e001      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	7cfb      	ldrb	r3, [r7, #19]
 8007b8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80a0 	beq.w	8007cda <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b9e:	4b47      	ldr	r3, [pc, #284]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00d      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb4:	4b41      	ldr	r3, [pc, #260]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	4a40      	ldr	r2, [pc, #256]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8007bc0:	4b3e      	ldr	r3, [pc, #248]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bd0:	4b3b      	ldr	r3, [pc, #236]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a3a      	ldr	r2, [pc, #232]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bdc:	f7fe fdf2 	bl	80067c4 <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007be2:	e009      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be4:	f7fe fdee 	bl	80067c4 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d902      	bls.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	74fb      	strb	r3, [r7, #19]
        break;
 8007bf6:	e005      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bf8:	4b31      	ldr	r3, [pc, #196]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0ef      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007c04:	7cfb      	ldrb	r3, [r7, #19]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d15c      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c0a:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01f      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d019      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c28:	4b24      	ldr	r3, [pc, #144]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c34:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c66:	f7fe fdad 	bl	80067c4 <HAL_GetTick>
 8007c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c6c:	e00b      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c6e:	f7fe fda9 	bl	80067c4 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d902      	bls.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	74fb      	strb	r3, [r7, #19]
            break;
 8007c84:	e006      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c86:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ec      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007c94:	7cfb      	ldrb	r3, [r7, #19]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c9a:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	4904      	ldr	r1, [pc, #16]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007cb2:	e009      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cb4:	7cfb      	ldrb	r3, [r7, #19]
 8007cb6:	74bb      	strb	r3, [r7, #18]
 8007cb8:	e006      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007cba:	bf00      	nop
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cc8:	7c7b      	ldrb	r3, [r7, #17]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d105      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cce:	4ba6      	ldr	r3, [pc, #664]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd2:	4aa5      	ldr	r2, [pc, #660]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ce6:	4ba0      	ldr	r3, [pc, #640]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cec:	f023 0203 	bic.w	r2, r3, #3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	499c      	ldr	r1, [pc, #624]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d08:	4b97      	ldr	r3, [pc, #604]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	f023 020c 	bic.w	r2, r3, #12
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d16:	4994      	ldr	r1, [pc, #592]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d2a:	4b8f      	ldr	r3, [pc, #572]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	498b      	ldr	r1, [pc, #556]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d4c:	4b86      	ldr	r3, [pc, #536]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	4983      	ldr	r1, [pc, #524]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d6e:	4b7e      	ldr	r3, [pc, #504]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7c:	497a      	ldr	r1, [pc, #488]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d90:	4b75      	ldr	r3, [pc, #468]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	4972      	ldr	r1, [pc, #456]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007db2:	4b6d      	ldr	r3, [pc, #436]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	4969      	ldr	r1, [pc, #420]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dd4:	4b64      	ldr	r3, [pc, #400]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de2:	4961      	ldr	r1, [pc, #388]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007df6:	4b5c      	ldr	r3, [pc, #368]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	4958      	ldr	r1, [pc, #352]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	4950      	ldr	r1, [pc, #320]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e3a:	4b4b      	ldr	r3, [pc, #300]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e48:	4947      	ldr	r1, [pc, #284]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e5c:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e62:	f023 0203 	bic.w	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	493f      	ldr	r1, [pc, #252]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d028      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e7e:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8c:	4936      	ldr	r1, [pc, #216]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9c:	d106      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9e:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	4a31      	ldr	r2, [pc, #196]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea8:	60d3      	str	r3, [r2, #12]
 8007eaa:	e011      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	2101      	movs	r1, #1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f8c9 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d028      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007edc:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	491f      	ldr	r1, [pc, #124]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efa:	d106      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007efc:	4b1a      	ldr	r3, [pc, #104]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4a19      	ldr	r2, [pc, #100]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f06:	60d3      	str	r3, [r2, #12]
 8007f08:	e011      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f12:	d10c      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f89a 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f24:	7cfb      	ldrb	r3, [r7, #19]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8007f2a:	7cfb      	ldrb	r3, [r7, #19]
 8007f2c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02a      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f48:	4907      	ldr	r1, [pc, #28]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f58:	d108      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	4a02      	ldr	r2, [pc, #8]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f64:	60d3      	str	r3, [r2, #12]
 8007f66:	e013      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007f68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f869 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f86:	7cfb      	ldrb	r3, [r7, #19]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007f8c:	7cfb      	ldrb	r3, [r7, #19]
 8007f8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d02f      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f9c:	4b2c      	ldr	r3, [pc, #176]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007faa:	4929      	ldr	r1, [pc, #164]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fba:	d10d      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f846 	bl	8008054 <RCCEx_PLLSAI1_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fcc:	7cfb      	ldrb	r3, [r7, #19]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d014      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007fd2:	7cfb      	ldrb	r3, [r7, #19]
 8007fd4:	74bb      	strb	r3, [r7, #18]
 8007fd6:	e011      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe0:	d10c      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3320      	adds	r3, #32
 8007fe6:	2102      	movs	r1, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f923 	bl	8008234 <RCCEx_PLLSAI2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ff2:	7cfb      	ldrb	r3, [r7, #19]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007ff8:	7cfb      	ldrb	r3, [r7, #19]
 8007ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008008:	4b11      	ldr	r3, [pc, #68]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008018:	490d      	ldr	r1, [pc, #52]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800802c:	4b08      	ldr	r3, [pc, #32]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803c:	4904      	ldr	r1, [pc, #16]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008044:	7cbb      	ldrb	r3, [r7, #18]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40021000 	.word	0x40021000

08008054 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008062:	4b73      	ldr	r3, [pc, #460]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d018      	beq.n	80080a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800806e:	4b70      	ldr	r3, [pc, #448]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0203 	and.w	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d10d      	bne.n	800809a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
       ||
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008086:	4b6a      	ldr	r3, [pc, #424]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	091b      	lsrs	r3, r3, #4
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
       ||
 8008096:	429a      	cmp	r2, r3
 8008098:	d044      	beq.n	8008124 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	e041      	b.n	8008124 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d00c      	beq.n	80080c2 <RCCEx_PLLSAI1_Config+0x6e>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d013      	beq.n	80080d4 <RCCEx_PLLSAI1_Config+0x80>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d120      	bne.n	80080f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080b0:	4b5f      	ldr	r3, [pc, #380]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11d      	bne.n	80080f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080c0:	e01a      	b.n	80080f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080c2:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d116      	bne.n	80080fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080d2:	e013      	b.n	80080fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080d4:	4b56      	ldr	r3, [pc, #344]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10f      	bne.n	8008100 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080e0:	4b53      	ldr	r3, [pc, #332]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080f0:	e006      	b.n	8008100 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]
      break;
 80080f6:	e004      	b.n	8008102 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80080f8:	bf00      	nop
 80080fa:	e002      	b.n	8008102 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008100:	bf00      	nop
    }

    if(status == HAL_OK)
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10d      	bne.n	8008124 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008108:	4b49      	ldr	r3, [pc, #292]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	3b01      	subs	r3, #1
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	430b      	orrs	r3, r1
 800811e:	4944      	ldr	r1, [pc, #272]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008120:	4313      	orrs	r3, r2
 8008122:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d17c      	bne.n	8008224 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800812a:	4b41      	ldr	r3, [pc, #260]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a40      	ldr	r2, [pc, #256]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008136:	f7fe fb45 	bl	80067c4 <HAL_GetTick>
 800813a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800813c:	e009      	b.n	8008152 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800813e:	f7fe fb41 	bl	80067c4 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d902      	bls.n	8008152 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	73fb      	strb	r3, [r7, #15]
        break;
 8008150:	e005      	b.n	800815e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1ef      	bne.n	800813e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d15f      	bne.n	8008224 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d110      	bne.n	800818c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008172:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6892      	ldr	r2, [r2, #8]
 800817a:	0211      	lsls	r1, r2, #8
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68d2      	ldr	r2, [r2, #12]
 8008180:	06d2      	lsls	r2, r2, #27
 8008182:	430a      	orrs	r2, r1
 8008184:	492a      	ldr	r1, [pc, #168]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	610b      	str	r3, [r1, #16]
 800818a:	e027      	b.n	80081dc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d112      	bne.n	80081b8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008192:	4b27      	ldr	r3, [pc, #156]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800819a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6892      	ldr	r2, [r2, #8]
 80081a2:	0211      	lsls	r1, r2, #8
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6912      	ldr	r2, [r2, #16]
 80081a8:	0852      	lsrs	r2, r2, #1
 80081aa:	3a01      	subs	r2, #1
 80081ac:	0552      	lsls	r2, r2, #21
 80081ae:	430a      	orrs	r2, r1
 80081b0:	491f      	ldr	r1, [pc, #124]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	610b      	str	r3, [r1, #16]
 80081b6:	e011      	b.n	80081dc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80081c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6892      	ldr	r2, [r2, #8]
 80081c8:	0211      	lsls	r1, r2, #8
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6952      	ldr	r2, [r2, #20]
 80081ce:	0852      	lsrs	r2, r2, #1
 80081d0:	3a01      	subs	r2, #1
 80081d2:	0652      	lsls	r2, r2, #25
 80081d4:	430a      	orrs	r2, r1
 80081d6:	4916      	ldr	r1, [pc, #88]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081dc:	4b14      	ldr	r3, [pc, #80]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a13      	ldr	r2, [pc, #76]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e8:	f7fe faec 	bl	80067c4 <HAL_GetTick>
 80081ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ee:	e009      	b.n	8008204 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081f0:	f7fe fae8 	bl	80067c4 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d902      	bls.n	8008204 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	73fb      	strb	r3, [r7, #15]
          break;
 8008202:	e005      	b.n	8008210 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008204:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0ef      	beq.n	80081f0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008220:	4313      	orrs	r3, r2
 8008222:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000

08008234 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008242:	4b68      	ldr	r3, [pc, #416]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800824e:	4b65      	ldr	r3, [pc, #404]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f003 0203 	and.w	r2, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d10d      	bne.n	800827a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
       ||
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008266:	4b5f      	ldr	r3, [pc, #380]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	091b      	lsrs	r3, r3, #4
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
       ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d044      	beq.n	8008304 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e041      	b.n	8008304 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d00c      	beq.n	80082a2 <RCCEx_PLLSAI2_Config+0x6e>
 8008288:	2b03      	cmp	r3, #3
 800828a:	d013      	beq.n	80082b4 <RCCEx_PLLSAI2_Config+0x80>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d120      	bne.n	80082d2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008290:	4b54      	ldr	r3, [pc, #336]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d11d      	bne.n	80082d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a0:	e01a      	b.n	80082d8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082a2:	4b50      	ldr	r3, [pc, #320]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d116      	bne.n	80082dc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b2:	e013      	b.n	80082dc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082b4:	4b4b      	ldr	r3, [pc, #300]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10f      	bne.n	80082e0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082c0:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082d0:	e006      	b.n	80082e0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
      break;
 80082d6:	e004      	b.n	80082e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80082d8:	bf00      	nop
 80082da:	e002      	b.n	80082e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80082dc:	bf00      	nop
 80082de:	e000      	b.n	80082e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80082e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10d      	bne.n	8008304 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082e8:	4b3e      	ldr	r3, [pc, #248]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	430b      	orrs	r3, r1
 80082fe:	4939      	ldr	r1, [pc, #228]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008300:	4313      	orrs	r3, r2
 8008302:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d166      	bne.n	80083d8 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800830a:	4b36      	ldr	r3, [pc, #216]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a35      	ldr	r2, [pc, #212]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008316:	f7fe fa55 	bl	80067c4 <HAL_GetTick>
 800831a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800831c:	e009      	b.n	8008332 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800831e:	f7fe fa51 	bl	80067c4 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d902      	bls.n	8008332 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	73fb      	strb	r3, [r7, #15]
        break;
 8008330:	e005      	b.n	800833e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008332:	4b2c      	ldr	r3, [pc, #176]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1ef      	bne.n	800831e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d149      	bne.n	80083d8 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d110      	bne.n	800836c <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800834a:	4b26      	ldr	r3, [pc, #152]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6892      	ldr	r2, [r2, #8]
 800835a:	0211      	lsls	r1, r2, #8
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	68d2      	ldr	r2, [r2, #12]
 8008360:	06d2      	lsls	r2, r2, #27
 8008362:	430a      	orrs	r2, r1
 8008364:	491f      	ldr	r1, [pc, #124]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	614b      	str	r3, [r1, #20]
 800836a:	e011      	b.n	8008390 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800836c:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6892      	ldr	r2, [r2, #8]
 800837c:	0211      	lsls	r1, r2, #8
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6912      	ldr	r2, [r2, #16]
 8008382:	0852      	lsrs	r2, r2, #1
 8008384:	3a01      	subs	r2, #1
 8008386:	0652      	lsls	r2, r2, #25
 8008388:	430a      	orrs	r2, r1
 800838a:	4916      	ldr	r1, [pc, #88]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800838c:	4313      	orrs	r3, r2
 800838e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839c:	f7fe fa12 	bl	80067c4 <HAL_GetTick>
 80083a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083a2:	e009      	b.n	80083b8 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80083a4:	f7fe fa0e 	bl	80067c4 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d902      	bls.n	80083b8 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	73fb      	strb	r3, [r7, #15]
          break;
 80083b6:	e005      	b.n	80083c4 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ef      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4904      	ldr	r1, [pc, #16]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40021000 	.word	0x40021000

080083e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e01d      	b.n	8008436 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f815 	bl	800843e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f000 f986 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <HAL_TIM_Base_Start_IT+0x50>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b06      	cmp	r3, #6
 800847c:	d00b      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x42>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008484:	d007      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0201 	orr.w	r2, r2, #1
 8008494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	00010007 	.word	0x00010007

080084a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d122      	bne.n	8008504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d11b      	bne.n	8008504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0202 	mvn.w	r2, #2
 80084d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f905 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8f7 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f908 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b04      	cmp	r3, #4
 8008510:	d122      	bne.n	8008558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b04      	cmp	r3, #4
 800851e:	d11b      	bne.n	8008558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0204 	mvn.w	r2, #4
 8008528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8db 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 8008544:	e005      	b.n	8008552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8cd 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8de 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b08      	cmp	r3, #8
 8008564:	d122      	bne.n	80085ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b08      	cmp	r3, #8
 8008572:	d11b      	bne.n	80085ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0208 	mvn.w	r2, #8
 800857c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2204      	movs	r2, #4
 8008582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8b1 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 8008598:	e005      	b.n	80085a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8a3 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f8b4 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0310 	and.w	r3, r3, #16
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d122      	bne.n	8008600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d11b      	bne.n	8008600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0210 	mvn.w	r2, #16
 80085d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2208      	movs	r2, #8
 80085d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f887 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 80085ec:	e005      	b.n	80085fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f879 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f88a 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b01      	cmp	r3, #1
 800860c:	d10e      	bne.n	800862c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d107      	bne.n	800862c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0201 	mvn.w	r2, #1
 8008624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7f8 fc50 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008636:	2b80      	cmp	r3, #128	; 0x80
 8008638:	d10e      	bne.n	8008658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d107      	bne.n	8008658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f914 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008666:	d10e      	bne.n	8008686 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d107      	bne.n	8008686 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800867e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f907 	bl	8008894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d10e      	bne.n	80086b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d107      	bne.n	80086b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f838 	bl	8008722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d10e      	bne.n	80086de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d107      	bne.n	80086de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f06f 0220 	mvn.w	r2, #32
 80086d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f8c7 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a40      	ldr	r2, [pc, #256]	; (800884c <TIM_Base_SetConfig+0x114>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	d00f      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3d      	ldr	r2, [pc, #244]	; (8008850 <TIM_Base_SetConfig+0x118>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3c      	ldr	r2, [pc, #240]	; (8008854 <TIM_Base_SetConfig+0x11c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3b      	ldr	r2, [pc, #236]	; (8008858 <TIM_Base_SetConfig+0x120>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3a      	ldr	r2, [pc, #232]	; (800885c <TIM_Base_SetConfig+0x124>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d108      	bne.n	800878a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2f      	ldr	r2, [pc, #188]	; (800884c <TIM_Base_SetConfig+0x114>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01f      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d01b      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2c      	ldr	r2, [pc, #176]	; (8008850 <TIM_Base_SetConfig+0x118>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d017      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2b      	ldr	r2, [pc, #172]	; (8008854 <TIM_Base_SetConfig+0x11c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2a      	ldr	r2, [pc, #168]	; (8008858 <TIM_Base_SetConfig+0x120>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00f      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a29      	ldr	r2, [pc, #164]	; (800885c <TIM_Base_SetConfig+0x124>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00b      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a28      	ldr	r2, [pc, #160]	; (8008860 <TIM_Base_SetConfig+0x128>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d007      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a27      	ldr	r2, [pc, #156]	; (8008864 <TIM_Base_SetConfig+0x12c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a26      	ldr	r2, [pc, #152]	; (8008868 <TIM_Base_SetConfig+0x130>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d108      	bne.n	80087e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <TIM_Base_SetConfig+0x114>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00f      	beq.n	8008830 <TIM_Base_SetConfig+0xf8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a12      	ldr	r2, [pc, #72]	; (800885c <TIM_Base_SetConfig+0x124>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00b      	beq.n	8008830 <TIM_Base_SetConfig+0xf8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a11      	ldr	r2, [pc, #68]	; (8008860 <TIM_Base_SetConfig+0x128>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d007      	beq.n	8008830 <TIM_Base_SetConfig+0xf8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a10      	ldr	r2, [pc, #64]	; (8008864 <TIM_Base_SetConfig+0x12c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a0f      	ldr	r2, [pc, #60]	; (8008868 <TIM_Base_SetConfig+0x130>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d103      	bne.n	8008838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	615a      	str	r2, [r3, #20]
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40012c00 	.word	0x40012c00
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40013400 	.word	0x40013400
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e040      	b.n	800893c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7f8 fcfc 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f8c0 	bl	8008a6c <UART_SetConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e022      	b.n	800893c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fc26 	bl	8009150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fcad 	bl	8009294 <UART_CheckIdleState>
 800893a:	4603      	mov	r3, r0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008958:	2b20      	cmp	r3, #32
 800895a:	f040 8081 	bne.w	8008a60 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <HAL_UART_Transmit+0x26>
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e079      	b.n	8008a62 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_UART_Transmit+0x38>
 8008978:	2302      	movs	r3, #2
 800897a:	e072      	b.n	8008a62 <HAL_UART_Transmit+0x11e>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2221      	movs	r2, #33	; 0x21
 800898e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008990:	f7fd ff18 	bl	80067c4 <HAL_GetTick>
 8008994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	88fa      	ldrh	r2, [r7, #6]
 800899a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	88fa      	ldrh	r2, [r7, #6]
 80089a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ae:	d108      	bne.n	80089c2 <HAL_UART_Transmit+0x7e>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	e003      	b.n	80089ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80089d2:	e02d      	b.n	8008a30 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2200      	movs	r2, #0
 80089dc:	2180      	movs	r1, #128	; 0x80
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fc9d 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e039      	b.n	8008a62 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	881a      	ldrh	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a00:	b292      	uxth	r2, r2
 8008a02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	3302      	adds	r3, #2
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	e008      	b.n	8008a1e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	b292      	uxth	r2, r2
 8008a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1cb      	bne.n	80089d4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2200      	movs	r2, #0
 8008a44:	2140      	movs	r1, #64	; 0x40
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fc69 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e005      	b.n	8008a62 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e000      	b.n	8008a62 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008a60:	2302      	movs	r3, #2
  }
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008a70:	b08a      	sub	sp, #40	; 0x28
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4bb8      	ldr	r3, [pc, #736]	; (8008d84 <UART_SetConfig+0x318>)
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4aae      	ldr	r2, [pc, #696]	; (8008d88 <UART_SetConfig+0x31c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d004      	beq.n	8008ade <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	4313      	orrs	r3, r2
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4aa5      	ldr	r2, [pc, #660]	; (8008d8c <UART_SetConfig+0x320>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d126      	bne.n	8008b4a <UART_SetConfig+0xde>
 8008afc:	4ba4      	ldr	r3, [pc, #656]	; (8008d90 <UART_SetConfig+0x324>)
 8008afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d81a      	bhi.n	8008b40 <UART_SetConfig+0xd4>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0xa4>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b26:	e105      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b2e:	e101      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008b30:	2304      	movs	r3, #4
 8008b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b36:	e0fd      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b3e:	e0f9      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008b40:	2310      	movs	r3, #16
 8008b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b46:	bf00      	nop
 8008b48:	e0f4      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a91      	ldr	r2, [pc, #580]	; (8008d94 <UART_SetConfig+0x328>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d138      	bne.n	8008bc6 <UART_SetConfig+0x15a>
 8008b54:	4b8e      	ldr	r3, [pc, #568]	; (8008d90 <UART_SetConfig+0x324>)
 8008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b0c      	cmp	r3, #12
 8008b60:	d82c      	bhi.n	8008bbc <UART_SetConfig+0x150>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0xfc>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b9d 	.word	0x08008b9d
 8008b6c:	08008bbd 	.word	0x08008bbd
 8008b70:	08008bbd 	.word	0x08008bbd
 8008b74:	08008bbd 	.word	0x08008bbd
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008bbd 	.word	0x08008bbd
 8008b80:	08008bbd 	.word	0x08008bbd
 8008b84:	08008bbd 	.word	0x08008bbd
 8008b88:	08008ba5 	.word	0x08008ba5
 8008b8c:	08008bbd 	.word	0x08008bbd
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	08008bbd 	.word	0x08008bbd
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ba2:	e0c7      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008baa:	e0c3      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bb2:	e0bf      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bba:	e0bb      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bc2:	bf00      	nop
 8008bc4:	e0b6      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a73      	ldr	r2, [pc, #460]	; (8008d98 <UART_SetConfig+0x32c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d125      	bne.n	8008c1c <UART_SetConfig+0x1b0>
 8008bd0:	4b6f      	ldr	r3, [pc, #444]	; (8008d90 <UART_SetConfig+0x324>)
 8008bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d011      	beq.n	8008c02 <UART_SetConfig+0x196>
 8008bde:	2b10      	cmp	r3, #16
 8008be0:	d802      	bhi.n	8008be8 <UART_SetConfig+0x17c>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <UART_SetConfig+0x186>
 8008be6:	e014      	b.n	8008c12 <UART_SetConfig+0x1a6>
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d006      	beq.n	8008bfa <UART_SetConfig+0x18e>
 8008bec:	2b30      	cmp	r3, #48	; 0x30
 8008bee:	d00c      	beq.n	8008c0a <UART_SetConfig+0x19e>
 8008bf0:	e00f      	b.n	8008c12 <UART_SetConfig+0x1a6>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf8:	e09c      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c00:	e098      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c02:	2304      	movs	r3, #4
 8008c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c08:	e094      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c10:	e090      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c12:	2310      	movs	r3, #16
 8008c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c18:	bf00      	nop
 8008c1a:	e08b      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a5e      	ldr	r2, [pc, #376]	; (8008d9c <UART_SetConfig+0x330>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d125      	bne.n	8008c72 <UART_SetConfig+0x206>
 8008c26:	4b5a      	ldr	r3, [pc, #360]	; (8008d90 <UART_SetConfig+0x324>)
 8008c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d011      	beq.n	8008c58 <UART_SetConfig+0x1ec>
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d802      	bhi.n	8008c3e <UART_SetConfig+0x1d2>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <UART_SetConfig+0x1dc>
 8008c3c:	e014      	b.n	8008c68 <UART_SetConfig+0x1fc>
 8008c3e:	2b80      	cmp	r3, #128	; 0x80
 8008c40:	d006      	beq.n	8008c50 <UART_SetConfig+0x1e4>
 8008c42:	2bc0      	cmp	r3, #192	; 0xc0
 8008c44:	d00c      	beq.n	8008c60 <UART_SetConfig+0x1f4>
 8008c46:	e00f      	b.n	8008c68 <UART_SetConfig+0x1fc>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c4e:	e071      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c50:	2302      	movs	r3, #2
 8008c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c56:	e06d      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5e:	e069      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c66:	e065      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6e:	bf00      	nop
 8008c70:	e060      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a4a      	ldr	r2, [pc, #296]	; (8008da0 <UART_SetConfig+0x334>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d129      	bne.n	8008cd0 <UART_SetConfig+0x264>
 8008c7c:	4b44      	ldr	r3, [pc, #272]	; (8008d90 <UART_SetConfig+0x324>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d014      	beq.n	8008cb6 <UART_SetConfig+0x24a>
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c90:	d802      	bhi.n	8008c98 <UART_SetConfig+0x22c>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <UART_SetConfig+0x23a>
 8008c96:	e016      	b.n	8008cc6 <UART_SetConfig+0x25a>
 8008c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c9c:	d007      	beq.n	8008cae <UART_SetConfig+0x242>
 8008c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ca2:	d00c      	beq.n	8008cbe <UART_SetConfig+0x252>
 8008ca4:	e00f      	b.n	8008cc6 <UART_SetConfig+0x25a>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cac:	e042      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cb4:	e03e      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cbc:	e03a      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cc4:	e036      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008cc6:	2310      	movs	r3, #16
 8008cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ccc:	bf00      	nop
 8008cce:	e031      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <UART_SetConfig+0x31c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d129      	bne.n	8008d2e <UART_SetConfig+0x2c2>
 8008cda:	4b2d      	ldr	r3, [pc, #180]	; (8008d90 <UART_SetConfig+0x324>)
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce8:	d014      	beq.n	8008d14 <UART_SetConfig+0x2a8>
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d802      	bhi.n	8008cf6 <UART_SetConfig+0x28a>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <UART_SetConfig+0x298>
 8008cf4:	e016      	b.n	8008d24 <UART_SetConfig+0x2b8>
 8008cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cfa:	d007      	beq.n	8008d0c <UART_SetConfig+0x2a0>
 8008cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d00:	d00c      	beq.n	8008d1c <UART_SetConfig+0x2b0>
 8008d02:	e00f      	b.n	8008d24 <UART_SetConfig+0x2b8>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d0a:	e013      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d12:	e00f      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008d14:	2304      	movs	r3, #4
 8008d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d1a:	e00b      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d22:	e007      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008d24:	2310      	movs	r3, #16
 8008d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d2a:	bf00      	nop
 8008d2c:	e002      	b.n	8008d34 <UART_SetConfig+0x2c8>
 8008d2e:	2310      	movs	r3, #16
 8008d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <UART_SetConfig+0x31c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	f040 80fe 	bne.w	8008f3c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d837      	bhi.n	8008db8 <UART_SetConfig+0x34c>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <UART_SetConfig+0x2e4>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d75 	.word	0x08008d75
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008d7d 	.word	0x08008d7d
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db1 	.word	0x08008db1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008d74:	f7fe fdb8 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8008d78:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008d7a:	e020      	b.n	8008dbe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8008d7c:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <UART_SetConfig+0x338>)
 8008d7e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008d80:	e01d      	b.n	8008dbe <UART_SetConfig+0x352>
 8008d82:	bf00      	nop
 8008d84:	efff69f3 	.word	0xefff69f3
 8008d88:	40008000 	.word	0x40008000
 8008d8c:	40013800 	.word	0x40013800
 8008d90:	40021000 	.word	0x40021000
 8008d94:	40004400 	.word	0x40004400
 8008d98:	40004800 	.word	0x40004800
 8008d9c:	40004c00 	.word	0x40004c00
 8008da0:	40005000 	.word	0x40005000
 8008da4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8008da8:	f7fe fd08 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8008dac:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008dae:	e006      	b.n	8008dbe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8008db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008db6:	e002      	b.n	8008dbe <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	76fb      	strb	r3, [r7, #27]
        break;
 8008dbc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 81b9 	beq.w	8009138 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	4413      	add	r3, r2
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d305      	bcc.n	8008de2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d902      	bls.n	8008de8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	76fb      	strb	r3, [r7, #27]
 8008de6:	e1a7      	b.n	8009138 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8008de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	f200 8092 	bhi.w	8008f16 <UART_SetConfig+0x4aa>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <UART_SetConfig+0x38c>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008f17 	.word	0x08008f17
 8008e00:	08008e6b 	.word	0x08008e6b
 8008e04:	08008f17 	.word	0x08008f17
 8008e08:	08008e9f 	.word	0x08008e9f
 8008e0c:	08008f17 	.word	0x08008f17
 8008e10:	08008f17 	.word	0x08008f17
 8008e14:	08008f17 	.word	0x08008f17
 8008e18:	08008eed 	.word	0x08008eed
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008e1c:	f7fe fd64 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8008e20:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	f04f 0300 	mov.w	r3, #0
 8008e2e:	f04f 0400 	mov.w	r4, #0
 8008e32:	0214      	lsls	r4, r2, #8
 8008e34:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008e38:	020b      	lsls	r3, r1, #8
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6852      	ldr	r2, [r2, #4]
 8008e3e:	0852      	lsrs	r2, r2, #1
 8008e40:	4611      	mov	r1, r2
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	eb13 0b01 	adds.w	fp, r3, r1
 8008e4a:	eb44 0c02 	adc.w	ip, r4, r2
 8008e4e:	4658      	mov	r0, fp
 8008e50:	4661      	mov	r1, ip
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f04f 0400 	mov.w	r4, #0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	f7f7 fa1f 	bl	80002a0 <__aeabi_uldivmod>
 8008e62:	4603      	mov	r3, r0
 8008e64:	460c      	mov	r4, r1
 8008e66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008e68:	e058      	b.n	8008f1c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	f04f 0400 	mov.w	r4, #0
 8008e74:	49ae      	ldr	r1, [pc, #696]	; (8009130 <UART_SetConfig+0x6c4>)
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	eb13 0b01 	adds.w	fp, r3, r1
 8008e7e:	eb44 0c02 	adc.w	ip, r4, r2
 8008e82:	4658      	mov	r0, fp
 8008e84:	4661      	mov	r1, ip
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f04f 0400 	mov.w	r4, #0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	4623      	mov	r3, r4
 8008e92:	f7f7 fa05 	bl	80002a0 <__aeabi_uldivmod>
 8008e96:	4603      	mov	r3, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008e9c:	e03e      	b.n	8008f1c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008e9e:	f7fe fc8d 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8008ea2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	f04f 0400 	mov.w	r4, #0
 8008eb4:	0214      	lsls	r4, r2, #8
 8008eb6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008eba:	020b      	lsls	r3, r1, #8
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6852      	ldr	r2, [r2, #4]
 8008ec0:	0852      	lsrs	r2, r2, #1
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	eb13 0b01 	adds.w	fp, r3, r1
 8008ecc:	eb44 0c02 	adc.w	ip, r4, r2
 8008ed0:	4658      	mov	r0, fp
 8008ed2:	4661      	mov	r1, ip
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f04f 0400 	mov.w	r4, #0
 8008edc:	461a      	mov	r2, r3
 8008ede:	4623      	mov	r3, r4
 8008ee0:	f7f7 f9de 	bl	80002a0 <__aeabi_uldivmod>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008eea:	e017      	b.n	8008f1c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	f04f 0400 	mov.w	r4, #0
 8008ef6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8008efa:	f144 0100 	adc.w	r1, r4, #0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f04f 0400 	mov.w	r4, #0
 8008f06:	461a      	mov	r2, r3
 8008f08:	4623      	mov	r3, r4
 8008f0a:	f7f7 f9c9 	bl	80002a0 <__aeabi_uldivmod>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008f14:	e002      	b.n	8008f1c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	76fb      	strb	r3, [r7, #27]
            break;
 8008f1a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f22:	d308      	bcc.n	8008f36 <UART_SetConfig+0x4ca>
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f2a:	d204      	bcs.n	8008f36 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e100      	b.n	8009138 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	76fb      	strb	r3, [r7, #27]
 8008f3a:	e0fd      	b.n	8009138 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f44:	f040 8084 	bne.w	8009050 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8008f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d85f      	bhi.n	8009010 <UART_SetConfig+0x5a4>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x4ec>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f9d 	.word	0x08008f9d
 8008f60:	08008fbd 	.word	0x08008fbd
 8008f64:	08009011 	.word	0x08009011
 8008f68:	08008fd9 	.word	0x08008fd9
 8008f6c:	08009011 	.word	0x08009011
 8008f70:	08009011 	.word	0x08009011
 8008f74:	08009011 	.word	0x08009011
 8008f78:	08008ff9 	.word	0x08008ff9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f7c:	f7fe fcb4 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8008f80:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	005a      	lsls	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	441a      	add	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008f9a:	e03c      	b.n	8009016 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f9c:	f7fe fcba 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 8008fa0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	005a      	lsls	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	441a      	add	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008fba:	e02c      	b.n	8009016 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	085b      	lsrs	r3, r3, #1
 8008fc2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8008fc6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6852      	ldr	r2, [r2, #4]
 8008fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008fd6:	e01e      	b.n	8009016 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd8:	f7fe fbf0 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8008fdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	005a      	lsls	r2, r3, #1
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	441a      	add	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ff6:	e00e      	b.n	8009016 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	fbb2 f3f3 	udiv	r3, r2, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800900e:	e002      	b.n	8009016 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	76fb      	strb	r3, [r7, #27]
        break;
 8009014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d916      	bls.n	800904a <UART_SetConfig+0x5de>
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009022:	d212      	bcs.n	800904a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	b29b      	uxth	r3, r3
 8009028:	f023 030f 	bic.w	r3, r3, #15
 800902c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	085b      	lsrs	r3, r3, #1
 8009032:	b29b      	uxth	r3, r3
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	b29a      	uxth	r2, r3
 800903a:	89fb      	ldrh	r3, [r7, #14]
 800903c:	4313      	orrs	r3, r2
 800903e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	89fa      	ldrh	r2, [r7, #14]
 8009046:	60da      	str	r2, [r3, #12]
 8009048:	e076      	b.n	8009138 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	76fb      	strb	r3, [r7, #27]
 800904e:	e073      	b.n	8009138 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8009050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009054:	2b08      	cmp	r3, #8
 8009056:	d85c      	bhi.n	8009112 <UART_SetConfig+0x6a6>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <UART_SetConfig+0x5f4>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009085 	.word	0x08009085
 8009064:	080090a3 	.word	0x080090a3
 8009068:	080090c1 	.word	0x080090c1
 800906c:	08009113 	.word	0x08009113
 8009070:	080090dd 	.word	0x080090dd
 8009074:	08009113 	.word	0x08009113
 8009078:	08009113 	.word	0x08009113
 800907c:	08009113 	.word	0x08009113
 8009080:	080090fb 	.word	0x080090fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009084:	f7fe fc30 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009088:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	085a      	lsrs	r2, r3, #1
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	441a      	add	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	fbb2 f3f3 	udiv	r3, r2, r3
 800909c:	b29b      	uxth	r3, r3
 800909e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090a0:	e03a      	b.n	8009118 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090a2:	f7fe fc37 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 80090a6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	085a      	lsrs	r2, r3, #1
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	441a      	add	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090be:	e02b      	b.n	8009118 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80090ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6852      	ldr	r2, [r2, #4]
 80090d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090da:	e01d      	b.n	8009118 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090dc:	f7fe fb6e 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 80090e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	085a      	lsrs	r2, r3, #1
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	441a      	add	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090f8:	e00e      	b.n	8009118 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	085b      	lsrs	r3, r3, #1
 8009100:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	b29b      	uxth	r3, r3
 800910e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009110:	e002      	b.n	8009118 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	76fb      	strb	r3, [r7, #27]
        break;
 8009116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b0f      	cmp	r3, #15
 800911c:	d90a      	bls.n	8009134 <UART_SetConfig+0x6c8>
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009124:	d206      	bcs.n	8009134 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	e003      	b.n	8009138 <UART_SetConfig+0x6cc>
 8009130:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009144:	7efb      	ldrb	r3, [r7, #27]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3728      	adds	r7, #40	; 0x28
 800914a:	46bd      	mov	sp, r7
 800914c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01a      	beq.n	8009266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800924e:	d10a      	bne.n	8009266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	605a      	str	r2, [r3, #4]
  }
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80092a2:	f7fd fa8f 	bl	80067c4 <HAL_GetTick>
 80092a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d10e      	bne.n	80092d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f82a 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e020      	b.n	8009316 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d10e      	bne.n	8009300 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f814 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e00a      	b.n	8009316 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	603b      	str	r3, [r7, #0]
 800932a:	4613      	mov	r3, r2
 800932c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932e:	e05d      	b.n	80093ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d059      	beq.n	80093ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009338:	f7fd fa44 	bl	80067c4 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	429a      	cmp	r2, r3
 8009346:	d302      	bcc.n	800934e <UART_WaitOnFlagUntilTimeout+0x30>
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d11b      	bne.n	8009386 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800935c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2220      	movs	r2, #32
 8009372:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e042      	b.n	800940c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d02b      	beq.n	80093ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800939e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093a2:	d123      	bne.n	80093ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093bc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2220      	movs	r2, #32
 80093de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e00f      	b.n	800940c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	69da      	ldr	r2, [r3, #28]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	4013      	ands	r3, r2
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bf0c      	ite	eq
 80093fc:	2301      	moveq	r3, #1
 80093fe:	2300      	movne	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	461a      	mov	r2, r3
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	429a      	cmp	r2, r3
 8009408:	d092      	beq.n	8009330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009418:	f001 f86c 	bl	800a4f4 <vTaskStartScheduler>
  
  return osOK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	bd80      	pop	{r7, pc}

08009422 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f103 0208 	add.w	r2, r3, #8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f04f 32ff 	mov.w	r2, #4294967295
 800943a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f103 0208 	add.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d103      	bne.n	80094e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e00c      	b.n	80094fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3308      	adds	r3, #8
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	e002      	b.n	80094f2 <vListInsert+0x2e>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d2f6      	bcs.n	80094ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	601a      	str	r2, [r3, #0]
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6892      	ldr	r2, [r2, #8]
 800954c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6852      	ldr	r2, [r2, #4]
 8009556:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	429a      	cmp	r2, r3
 8009560:	d103      	bne.n	800956a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	1e5a      	subs	r2, r3, #1
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	e7fe      	b.n	80095b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80095b4:	f001 ff0a 	bl	800b3cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c0:	68f9      	ldr	r1, [r7, #12]
 80095c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095c4:	fb01 f303 	mul.w	r3, r1, r3
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e4:	3b01      	subs	r3, #1
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	441a      	add	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	22ff      	movs	r2, #255	; 0xff
 80095f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	22ff      	movs	r2, #255	; 0xff
 8009600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d114      	bne.n	8009634 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01a      	beq.n	8009648 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3310      	adds	r3, #16
 8009616:	4618      	mov	r0, r3
 8009618:	f001 f9c8 	bl	800a9ac <xTaskRemoveFromEventList>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d012      	beq.n	8009648 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <xQueueGenericReset+0xcc>)
 8009624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	e009      	b.n	8009648 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3310      	adds	r3, #16
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fef2 	bl	8009422 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff feed 	bl	8009422 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009648:	f001 feee 	bl	800b428 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800964c:	2301      	movs	r3, #1
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	; 0x28
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d109      	bne.n	8009684 <xQueueGenericCreate+0x28>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	e7fe      	b.n	8009682 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	e004      	b.n	800969a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	3350      	adds	r3, #80	; 0x50
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 ffae 	bl	800b600 <pvPortMalloc>
 80096a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d011      	beq.n	80096d0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	3350      	adds	r3, #80	; 0x50
 80096b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096be:	79fa      	ldrb	r2, [r7, #7]
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4613      	mov	r3, r2
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f805 	bl	80096da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096d0:	69bb      	ldr	r3, [r7, #24]
	}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
 80096e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e002      	b.n	80096fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009708:	2101      	movs	r1, #1
 800970a:	69b8      	ldr	r0, [r7, #24]
 800970c:	f7ff ff3e 	bl	800958c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08e      	sub	sp, #56	; 0x38
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800972e:	2300      	movs	r3, #0
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <xQueueGenericSend+0x30>
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	62bb      	str	r3, [r7, #40]	; 0x28
 800974e:	e7fe      	b.n	800974e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <xQueueGenericSend+0x3e>
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueGenericSend+0x42>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueGenericSend+0x44>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d109      	bne.n	800977c <xQueueGenericSend+0x5c>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
 800977a:	e7fe      	b.n	800977a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d103      	bne.n	800978a <xQueueGenericSend+0x6a>
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <xQueueGenericSend+0x6e>
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <xQueueGenericSend+0x70>
 800978e:	2300      	movs	r3, #0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d109      	bne.n	80097a8 <xQueueGenericSend+0x88>
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	623b      	str	r3, [r7, #32]
 80097a6:	e7fe      	b.n	80097a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097a8:	f001 fab6 	bl	800ad18 <xTaskGetSchedulerState>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <xQueueGenericSend+0x98>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <xQueueGenericSend+0x9c>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <xQueueGenericSend+0x9e>
 80097bc:	2300      	movs	r3, #0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <xQueueGenericSend+0xb6>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e7fe      	b.n	80097d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097d6:	f001 fdf9 	bl	800b3cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <xQueueGenericSend+0xcc>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d129      	bne.n	8009840 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097f2:	f000 fb9c 	bl	8009f2e <prvCopyDataToQueue>
 80097f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d010      	beq.n	8009822 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	3324      	adds	r3, #36	; 0x24
 8009804:	4618      	mov	r0, r3
 8009806:	f001 f8d1 	bl	800a9ac <xTaskRemoveFromEventList>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009810:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <xQueueGenericSend+0x1f0>)
 8009812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	e00a      	b.n	8009838 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009828:	4b39      	ldr	r3, [pc, #228]	; (8009910 <xQueueGenericSend+0x1f0>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009838:	f001 fdf6 	bl	800b428 <vPortExitCritical>
				return pdPASS;
 800983c:	2301      	movs	r3, #1
 800983e:	e063      	b.n	8009908 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009846:	f001 fdef 	bl	800b428 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800984a:	2300      	movs	r3, #0
 800984c:	e05c      	b.n	8009908 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f909 	bl	800aa70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800985e:	2301      	movs	r3, #1
 8009860:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009862:	f001 fde1 	bl	800b428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009866:	f000 fea5 	bl	800a5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800986a:	f001 fdaf 	bl	800b3cc <vPortEnterCritical>
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009874:	b25b      	sxtb	r3, r3
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d103      	bne.n	8009884 <xQueueGenericSend+0x164>
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800988a:	b25b      	sxtb	r3, r3
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d103      	bne.n	800989a <xQueueGenericSend+0x17a>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800989a:	f001 fdc5 	bl	800b428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800989e:	1d3a      	adds	r2, r7, #4
 80098a0:	f107 0314 	add.w	r3, r7, #20
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f8f8 	bl	800aa9c <xTaskCheckForTimeOut>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d124      	bne.n	80098fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098b4:	f000 fc33 	bl	800a11e <prvIsQueueFull>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d018      	beq.n	80098f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	3310      	adds	r3, #16
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 f84c 	bl	800a964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ce:	f000 fbbe 	bl	800a04e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098d2:	f000 fe7d 	bl	800a5d0 <xTaskResumeAll>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f47f af7c 	bne.w	80097d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <xQueueGenericSend+0x1f0>)
 80098e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	e772      	b.n	80097d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f2:	f000 fbac 	bl	800a04e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098f6:	f000 fe6b 	bl	800a5d0 <xTaskResumeAll>
 80098fa:	e76c      	b.n	80097d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098fe:	f000 fba6 	bl	800a04e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009902:	f000 fe65 	bl	800a5d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009908:	4618      	mov	r0, r3
 800990a:	3738      	adds	r7, #56	; 0x38
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08e      	sub	sp, #56	; 0x38
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <xQueueGenericSendFromISR+0x2c>
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
 800993e:	e7fe      	b.n	800993e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d103      	bne.n	800994e <xQueueGenericSendFromISR+0x3a>
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <xQueueGenericSendFromISR+0x3e>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <xQueueGenericSendFromISR+0x40>
 8009952:	2300      	movs	r3, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d109      	bne.n	800996c <xQueueGenericSendFromISR+0x58>
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	623b      	str	r3, [r7, #32]
 800996a:	e7fe      	b.n	800996a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d103      	bne.n	800997a <xQueueGenericSendFromISR+0x66>
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <xQueueGenericSendFromISR+0x6a>
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <xQueueGenericSendFromISR+0x6c>
 800997e:	2300      	movs	r3, #0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <xQueueGenericSendFromISR+0x84>
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e7fe      	b.n	8009996 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009998:	f001 fdf4 	bl	800b584 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800999c:	f3ef 8211 	mrs	r2, BASEPRI
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	61ba      	str	r2, [r7, #24]
 80099b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d302      	bcc.n	80099ca <xQueueGenericSendFromISR+0xb6>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d12c      	bne.n	8009a24 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099da:	f000 faa8 	bl	8009f2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d112      	bne.n	8009a0e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d016      	beq.n	8009a1e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	3324      	adds	r3, #36	; 0x24
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 ffd9 	bl	800a9ac <xTaskRemoveFromEventList>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00e      	beq.n	8009a1e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e007      	b.n	8009a1e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	b25a      	sxtb	r2, r3
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009a22:	e001      	b.n	8009a28 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3738      	adds	r7, #56	; 0x38
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08c      	sub	sp, #48	; 0x30
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <xQueueReceive+0x2e>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	623b      	str	r3, [r7, #32]
 8009a68:	e7fe      	b.n	8009a68 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d103      	bne.n	8009a78 <xQueueReceive+0x3c>
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <xQueueReceive+0x40>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <xQueueReceive+0x42>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <xQueueReceive+0x5a>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e7fe      	b.n	8009a94 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a96:	f001 f93f 	bl	800ad18 <xTaskGetSchedulerState>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <xQueueReceive+0x6a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <xQueueReceive+0x6e>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <xQueueReceive+0x70>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <xQueueReceive+0x88>
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	e7fe      	b.n	8009ac2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac4:	f001 fc82 	bl	800b3cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01f      	beq.n	8009b14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad8:	f000 fa93 	bl	800a002 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	1e5a      	subs	r2, r3, #1
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00f      	beq.n	8009b0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	3310      	adds	r3, #16
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 ff5b 	bl	800a9ac <xTaskRemoveFromEventList>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009afc:	4b3c      	ldr	r3, [pc, #240]	; (8009bf0 <xQueueReceive+0x1b4>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b0c:	f001 fc8c 	bl	800b428 <vPortExitCritical>
				return pdPASS;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e069      	b.n	8009be8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b1a:	f001 fc85 	bl	800b428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e062      	b.n	8009be8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d106      	bne.n	8009b36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 ff9f 	bl	800aa70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b32:	2301      	movs	r3, #1
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b36:	f001 fc77 	bl	800b428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b3a:	f000 fd3b 	bl	800a5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b3e:	f001 fc45 	bl	800b3cc <vPortEnterCritical>
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b48:	b25b      	sxtb	r3, r3
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d103      	bne.n	8009b58 <xQueueReceive+0x11c>
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b5e:	b25b      	sxtb	r3, r3
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d103      	bne.n	8009b6e <xQueueReceive+0x132>
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b6e:	f001 fc5b 	bl	800b428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b72:	1d3a      	adds	r2, r7, #4
 8009b74:	f107 0310 	add.w	r3, r7, #16
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 ff8e 	bl	800aa9c <xTaskCheckForTimeOut>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d123      	bne.n	8009bce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b88:	f000 fab3 	bl	800a0f2 <prvIsQueueEmpty>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d017      	beq.n	8009bc2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	3324      	adds	r3, #36	; 0x24
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 fee2 	bl	800a964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba2:	f000 fa54 	bl	800a04e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ba6:	f000 fd13 	bl	800a5d0 <xTaskResumeAll>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d189      	bne.n	8009ac4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <xQueueReceive+0x1b4>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	e780      	b.n	8009ac4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc4:	f000 fa43 	bl	800a04e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bc8:	f000 fd02 	bl	800a5d0 <xTaskResumeAll>
 8009bcc:	e77a      	b.n	8009ac4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd0:	f000 fa3d 	bl	800a04e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bd4:	f000 fcfc 	bl	800a5d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bda:	f000 fa8a 	bl	800a0f2 <prvIsQueueEmpty>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f43f af6f 	beq.w	8009ac4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009be6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3730      	adds	r7, #48	; 0x30
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08e      	sub	sp, #56	; 0x38
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <xQueueSemaphoreTake+0x30>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	623b      	str	r3, [r7, #32]
 8009c22:	e7fe      	b.n	8009c22 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d009      	beq.n	8009c40 <xQueueSemaphoreTake+0x4c>
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	e7fe      	b.n	8009c3e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c40:	f001 f86a 	bl	800ad18 <xTaskGetSchedulerState>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <xQueueSemaphoreTake+0x5c>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <xQueueSemaphoreTake+0x60>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <xQueueSemaphoreTake+0x62>
 8009c54:	2300      	movs	r3, #0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d109      	bne.n	8009c6e <xQueueSemaphoreTake+0x7a>
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	e7fe      	b.n	8009c6c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c6e:	f001 fbad 	bl	800b3cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d024      	beq.n	8009cc8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	1e5a      	subs	r2, r3, #1
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c8e:	f001 f9fd 	bl	800b08c <pvTaskIncrementMutexHeldCount>
 8009c92:	4602      	mov	r2, r0
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00f      	beq.n	8009cc0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fe81 	bl	800a9ac <xTaskRemoveFromEventList>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cb0:	4b53      	ldr	r3, [pc, #332]	; (8009e00 <xQueueSemaphoreTake+0x20c>)
 8009cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cc0:	f001 fbb2 	bl	800b428 <vPortExitCritical>
				return pdPASS;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e096      	b.n	8009df6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d110      	bne.n	8009cf0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <xQueueSemaphoreTake+0xf4>
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	e7fe      	b.n	8009ce6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ce8:	f001 fb9e 	bl	800b428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e082      	b.n	8009df6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 feb8 	bl	800aa70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d04:	f001 fb90 	bl	800b428 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d08:	f000 fc54 	bl	800a5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d0c:	f001 fb5e 	bl	800b3cc <vPortEnterCritical>
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d16:	b25b      	sxtb	r3, r3
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1c:	d103      	bne.n	8009d26 <xQueueSemaphoreTake+0x132>
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d2c:	b25b      	sxtb	r3, r3
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d103      	bne.n	8009d3c <xQueueSemaphoreTake+0x148>
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d3c:	f001 fb74 	bl	800b428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d40:	463a      	mov	r2, r7
 8009d42:	f107 030c 	add.w	r3, r7, #12
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fea7 	bl	800aa9c <xTaskCheckForTimeOut>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d132      	bne.n	8009dba <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d56:	f000 f9cc 	bl	800a0f2 <prvIsQueueEmpty>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d026      	beq.n	8009dae <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d109      	bne.n	8009d7c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009d68:	f001 fb30 	bl	800b3cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 ffef 	bl	800ad54 <xTaskPriorityInherit>
 8009d76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d78:	f001 fb56 	bl	800b428 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4611      	mov	r1, r2
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fded 	bl	800a964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d8c:	f000 f95f 	bl	800a04e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d90:	f000 fc1e 	bl	800a5d0 <xTaskResumeAll>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f47f af69 	bne.w	8009c6e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009d9c:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <xQueueSemaphoreTake+0x20c>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	e75f      	b.n	8009c6e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009db0:	f000 f94d 	bl	800a04e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009db4:	f000 fc0c 	bl	800a5d0 <xTaskResumeAll>
 8009db8:	e759      	b.n	8009c6e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dbc:	f000 f947 	bl	800a04e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dc0:	f000 fc06 	bl	800a5d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dc6:	f000 f994 	bl	800a0f2 <prvIsQueueEmpty>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f43f af4e 	beq.w	8009c6e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00d      	beq.n	8009df4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009dd8:	f001 faf8 	bl	800b3cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dde:	f000 f88e 	bl	8009efe <prvGetDisinheritPriorityAfterTimeout>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f8b6 	bl	800af5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009df0:	f001 fb1a 	bl	800b428 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3738      	adds	r7, #56	; 0x38
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <xQueueReceiveFromISR+0x2a>
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	623b      	str	r3, [r7, #32]
 8009e2c:	e7fe      	b.n	8009e2c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d103      	bne.n	8009e3c <xQueueReceiveFromISR+0x38>
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <xQueueReceiveFromISR+0x3c>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <xQueueReceiveFromISR+0x3e>
 8009e40:	2300      	movs	r3, #0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <xQueueReceiveFromISR+0x56>
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	e7fe      	b.n	8009e58 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e5a:	f001 fb93 	bl	800b584 <vPortValidateInterruptPriority>
	__asm volatile
 8009e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61ba      	str	r2, [r7, #24]
 8009e74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d02f      	beq.n	8009ee6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e94:	f000 f8b5 	bl	800a002 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	1e5a      	subs	r2, r3, #1
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea8:	d112      	bne.n	8009ed0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d016      	beq.n	8009ee0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fd78 	bl	800a9ac <xTaskRemoveFromEventList>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00e      	beq.n	8009ee0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	e007      	b.n	8009ee0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	b25a      	sxtb	r2, r3
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee4:	e001      	b.n	8009eea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3738      	adds	r7, #56	; 0x38
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d006      	beq.n	8009f1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f1c3 0307 	rsb	r3, r3, #7
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	e001      	b.n	8009f20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f20:	68fb      	ldr	r3, [r7, #12]
	}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b086      	sub	sp, #24
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d14d      	bne.n	8009ff0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 ff7b 	bl	800ae54 <xTaskPriorityDisinherit>
 8009f5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	609a      	str	r2, [r3, #8]
 8009f66:	e043      	b.n	8009ff0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d119      	bne.n	8009fa2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6858      	ldr	r0, [r3, #4]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	461a      	mov	r2, r3
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	f001 fd51 	bl	800ba20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	441a      	add	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d32b      	bcc.n	8009ff0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	605a      	str	r2, [r3, #4]
 8009fa0:	e026      	b.n	8009ff0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68d8      	ldr	r0, [r3, #12]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	461a      	mov	r2, r3
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	f001 fd37 	bl	800ba20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	425b      	negs	r3, r3
 8009fbc:	441a      	add	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d207      	bcs.n	8009fde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	425b      	negs	r3, r3
 8009fd8:	441a      	add	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d105      	bne.n	8009ff0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ff8:	697b      	ldr	r3, [r7, #20]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d018      	beq.n	800a046 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	441a      	add	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d303      	bcc.n	800a036 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68d9      	ldr	r1, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	461a      	mov	r2, r3
 800a040:	6838      	ldr	r0, [r7, #0]
 800a042:	f001 fced 	bl	800ba20 <memcpy>
	}
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a056:	f001 f9b9 	bl	800b3cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a060:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a062:	e011      	b.n	800a088 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d012      	beq.n	800a092 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3324      	adds	r3, #36	; 0x24
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fc9b 	bl	800a9ac <xTaskRemoveFromEventList>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a07c:	f000 fd6e 	bl	800ab5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	3b01      	subs	r3, #1
 800a084:	b2db      	uxtb	r3, r3
 800a086:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dce9      	bgt.n	800a064 <prvUnlockQueue+0x16>
 800a090:	e000      	b.n	800a094 <prvUnlockQueue+0x46>
					break;
 800a092:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	22ff      	movs	r2, #255	; 0xff
 800a098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a09c:	f001 f9c4 	bl	800b428 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0a0:	f001 f994 	bl	800b3cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0ac:	e011      	b.n	800a0d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d012      	beq.n	800a0dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fc76 	bl	800a9ac <xTaskRemoveFromEventList>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0c6:	f000 fd49 	bl	800ab5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dce9      	bgt.n	800a0ae <prvUnlockQueue+0x60>
 800a0da:	e000      	b.n	800a0de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	22ff      	movs	r2, #255	; 0xff
 800a0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0e6:	f001 f99f 	bl	800b428 <vPortExitCritical>
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0fa:	f001 f967 	bl	800b3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a106:	2301      	movs	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e001      	b.n	800a110 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a110:	f001 f98a 	bl	800b428 <vPortExitCritical>

	return xReturn;
 800a114:	68fb      	ldr	r3, [r7, #12]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a126:	f001 f951 	bl	800b3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a132:	429a      	cmp	r2, r3
 800a134:	d102      	bne.n	800a13c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e001      	b.n	800a140 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a140:	f001 f972 	bl	800b428 <vPortExitCritical>

	return xReturn;
 800a144:	68fb      	ldr	r3, [r7, #12]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b08e      	sub	sp, #56	; 0x38
 800a152:	af04      	add	r7, sp, #16
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <xTaskCreateStatic+0x28>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	623b      	str	r3, [r7, #32]
 800a174:	e7fe      	b.n	800a174 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d109      	bne.n	800a190 <xTaskCreateStatic+0x42>
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	e7fe      	b.n	800a18e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a190:	2360      	movs	r3, #96	; 0x60
 800a192:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b60      	cmp	r3, #96	; 0x60
 800a198:	d009      	beq.n	800a1ae <xTaskCreateStatic+0x60>
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	61bb      	str	r3, [r7, #24]
 800a1ac:	e7fe      	b.n	800a1ac <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01e      	beq.n	800a1f4 <xTaskCreateStatic+0xa6>
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01b      	beq.n	800a1f4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	9302      	str	r3, [sp, #8]
 800a1d6:	f107 0314 	add.w	r3, r7, #20
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f850 	bl	800a28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ee:	f000 f8df 	bl	800a3b0 <prvAddNewTaskToReadyList>
 800a1f2:	e001      	b.n	800a1f8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1f8:	697b      	ldr	r3, [r7, #20]
	}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3728      	adds	r7, #40	; 0x28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a202:	b580      	push	{r7, lr}
 800a204:	b08c      	sub	sp, #48	; 0x30
 800a206:	af04      	add	r7, sp, #16
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	603b      	str	r3, [r7, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a212:	88fb      	ldrh	r3, [r7, #6]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4618      	mov	r0, r3
 800a218:	f001 f9f2 	bl	800b600 <pvPortMalloc>
 800a21c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00e      	beq.n	800a242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a224:	2060      	movs	r0, #96	; 0x60
 800a226:	f001 f9eb 	bl	800b600 <pvPortMalloc>
 800a22a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	631a      	str	r2, [r3, #48]	; 0x30
 800a238:	e005      	b.n	800a246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a23a:	6978      	ldr	r0, [r7, #20]
 800a23c:	f001 faa2 	bl	800b784 <vPortFree>
 800a240:	e001      	b.n	800a246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d017      	beq.n	800a27c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a254:	88fa      	ldrh	r2, [r7, #6]
 800a256:	2300      	movs	r3, #0
 800a258:	9303      	str	r3, [sp, #12]
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	9302      	str	r3, [sp, #8]
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f80e 	bl	800a28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a270:	69f8      	ldr	r0, [r7, #28]
 800a272:	f000 f89d 	bl	800a3b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a276:	2301      	movs	r3, #1
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e002      	b.n	800a282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
 800a280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a282:	69bb      	ldr	r3, [r7, #24]
	}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	21a5      	movs	r1, #165	; 0xa5
 800a2a6:	f001 fbc6 	bl	800ba36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	f023 0307 	bic.w	r3, r3, #7
 800a2c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d009      	beq.n	800a2e2 <prvInitialiseNewTask+0x56>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e7fe      	b.n	800a2e0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01f      	beq.n	800a328 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	e012      	b.n	800a314 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	7819      	ldrb	r1, [r3, #0]
 800a2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3334      	adds	r3, #52	; 0x34
 800a2fe:	460a      	mov	r2, r1
 800a300:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	4413      	add	r3, r2
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	3301      	adds	r3, #1
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d9e9      	bls.n	800a2ee <prvInitialiseNewTask+0x62>
 800a31a:	e000      	b.n	800a31e <prvInitialiseNewTask+0x92>
			{
				break;
 800a31c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a326:	e003      	b.n	800a330 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	2b06      	cmp	r3, #6
 800a334:	d901      	bls.n	800a33a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a336:	2306      	movs	r3, #6
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a33e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a344:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	2200      	movs	r2, #0
 800a34a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	3304      	adds	r3, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff f886 	bl	8009462 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	3318      	adds	r3, #24
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff f881 	bl	8009462 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a364:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	f1c3 0207 	rsb	r2, r3, #7
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a374:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	2200      	movs	r2, #0
 800a37a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	2200      	movs	r2, #0
 800a380:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	2200      	movs	r2, #0
 800a386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	69b8      	ldr	r0, [r7, #24]
 800a390:	f000 fef6 	bl	800b180 <pxPortInitialiseStack>
 800a394:	4602      	mov	r2, r0
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3a6:	bf00      	nop
 800a3a8:	3720      	adds	r7, #32
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3b8:	f001 f808 	bl	800b3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <prvAddNewTaskToReadyList+0xc0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	4a2b      	ldr	r2, [pc, #172]	; (800a470 <prvAddNewTaskToReadyList+0xc0>)
 800a3c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3c6:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <prvAddNewTaskToReadyList+0xc4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3ce:	4a29      	ldr	r2, [pc, #164]	; (800a474 <prvAddNewTaskToReadyList+0xc4>)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3d4:	4b26      	ldr	r3, [pc, #152]	; (800a470 <prvAddNewTaskToReadyList+0xc0>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d110      	bne.n	800a3fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3dc:	f000 fbe2 	bl	800aba4 <prvInitialiseTaskLists>
 800a3e0:	e00d      	b.n	800a3fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3e2:	4b25      	ldr	r3, [pc, #148]	; (800a478 <prvAddNewTaskToReadyList+0xc8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d109      	bne.n	800a3fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3ea:	4b22      	ldr	r3, [pc, #136]	; (800a474 <prvAddNewTaskToReadyList+0xc4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d802      	bhi.n	800a3fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3f8:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <prvAddNewTaskToReadyList+0xc4>)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3fe:	4b1f      	ldr	r3, [pc, #124]	; (800a47c <prvAddNewTaskToReadyList+0xcc>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a1d      	ldr	r2, [pc, #116]	; (800a47c <prvAddNewTaskToReadyList+0xcc>)
 800a406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a408:	4b1c      	ldr	r3, [pc, #112]	; (800a47c <prvAddNewTaskToReadyList+0xcc>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	2201      	movs	r2, #1
 800a416:	409a      	lsls	r2, r3
 800a418:	4b19      	ldr	r3, [pc, #100]	; (800a480 <prvAddNewTaskToReadyList+0xd0>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	4a18      	ldr	r2, [pc, #96]	; (800a480 <prvAddNewTaskToReadyList+0xd0>)
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a15      	ldr	r2, [pc, #84]	; (800a484 <prvAddNewTaskToReadyList+0xd4>)
 800a430:	441a      	add	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3304      	adds	r3, #4
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f7ff f81f 	bl	800947c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a43e:	f000 fff3 	bl	800b428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a442:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <prvAddNewTaskToReadyList+0xc8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00e      	beq.n	800a468 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a44a:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <prvAddNewTaskToReadyList+0xc4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d207      	bcs.n	800a468 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a458:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <prvAddNewTaskToReadyList+0xd8>)
 800a45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200007ec 	.word	0x200007ec
 800a474:	200006ec 	.word	0x200006ec
 800a478:	200007f8 	.word	0x200007f8
 800a47c:	20000808 	.word	0x20000808
 800a480:	200007f4 	.word	0x200007f4
 800a484:	200006f0 	.word	0x200006f0
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d016      	beq.n	800a4cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <vTaskDelay+0x60>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <vTaskDelay+0x2e>
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	e7fe      	b.n	800a4b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a4ba:	f000 f87b 	bl	800a5b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fdf7 	bl	800b0b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4c6:	f000 f883 	bl	800a5d0 <xTaskResumeAll>
 800a4ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d107      	bne.n	800a4e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <vTaskDelay+0x64>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000814 	.word	0x20000814
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a502:	463a      	mov	r2, r7
 800a504:	1d39      	adds	r1, r7, #4
 800a506:	f107 0308 	add.w	r3, r7, #8
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f6 f858 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	2300      	movs	r3, #0
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	2300      	movs	r3, #0
 800a520:	460a      	mov	r2, r1
 800a522:	491e      	ldr	r1, [pc, #120]	; (800a59c <vTaskStartScheduler+0xa8>)
 800a524:	481e      	ldr	r0, [pc, #120]	; (800a5a0 <vTaskStartScheduler+0xac>)
 800a526:	f7ff fe12 	bl	800a14e <xTaskCreateStatic>
 800a52a:	4602      	mov	r2, r0
 800a52c:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <vTaskStartScheduler+0xb0>)
 800a52e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a530:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <vTaskStartScheduler+0xb0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a538:	2301      	movs	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	e001      	b.n	800a542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d117      	bne.n	800a578 <vTaskStartScheduler+0x84>
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a55a:	4b13      	ldr	r3, [pc, #76]	; (800a5a8 <vTaskStartScheduler+0xb4>)
 800a55c:	f04f 32ff 	mov.w	r2, #4294967295
 800a560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <vTaskStartScheduler+0xb8>)
 800a564:	2201      	movs	r2, #1
 800a566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <vTaskStartScheduler+0xbc>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a56e:	f7f6 f817 	bl	80005a0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a572:	f000 fe8d 	bl	800b290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a576:	e00d      	b.n	800a594 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d109      	bne.n	800a594 <vTaskStartScheduler+0xa0>
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e7fe      	b.n	800a592 <vTaskStartScheduler+0x9e>
}
 800a594:	bf00      	nop
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	0800e6ec 	.word	0x0800e6ec
 800a5a0:	0800ab75 	.word	0x0800ab75
 800a5a4:	20000810 	.word	0x20000810
 800a5a8:	2000080c 	.word	0x2000080c
 800a5ac:	200007f8 	.word	0x200007f8
 800a5b0:	200007f0 	.word	0x200007f0

0800a5b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a5b8:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <vTaskSuspendAll+0x18>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	4a03      	ldr	r2, [pc, #12]	; (800a5cc <vTaskSuspendAll+0x18>)
 800a5c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	20000814 	.word	0x20000814

0800a5d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5de:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <xTaskResumeAll+0x2a>
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	e7fe      	b.n	800a5f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5fa:	f000 fee7 	bl	800b3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5fe:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3b01      	subs	r3, #1
 800a604:	4a37      	ldr	r2, [pc, #220]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a606:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a608:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d161      	bne.n	800a6d4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a610:	4b35      	ldr	r3, [pc, #212]	; (800a6e8 <xTaskResumeAll+0x118>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d05d      	beq.n	800a6d4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a618:	e02e      	b.n	800a678 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61a:	4b34      	ldr	r3, [pc, #208]	; (800a6ec <xTaskResumeAll+0x11c>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3318      	adds	r3, #24
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe ff85 	bl	8009536 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3304      	adds	r3, #4
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe ff80 	bl	8009536 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63a:	2201      	movs	r2, #1
 800a63c:	409a      	lsls	r2, r3
 800a63e:	4b2c      	ldr	r3, [pc, #176]	; (800a6f0 <xTaskResumeAll+0x120>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4313      	orrs	r3, r2
 800a644:	4a2a      	ldr	r2, [pc, #168]	; (800a6f0 <xTaskResumeAll+0x120>)
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4a27      	ldr	r2, [pc, #156]	; (800a6f4 <xTaskResumeAll+0x124>)
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3304      	adds	r3, #4
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f7fe ff0c 	bl	800947c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a668:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <xTaskResumeAll+0x128>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a672:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a674:	2201      	movs	r2, #1
 800a676:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a678:	4b1c      	ldr	r3, [pc, #112]	; (800a6ec <xTaskResumeAll+0x11c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1cc      	bne.n	800a61a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a686:	f000 fb27 	bl	800acd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a68a:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <xTaskResumeAll+0x130>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d010      	beq.n	800a6b8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a696:	f000 f837 	bl	800a708 <xTaskIncrementTick>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a6a0:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1f1      	bne.n	800a696 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a6b2:	4b13      	ldr	r3, [pc, #76]	; (800a700 <xTaskResumeAll+0x130>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6b8:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d009      	beq.n	800a6d4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <xTaskResumeAll+0x134>)
 800a6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6d4:	f000 fea8 	bl	800b428 <vPortExitCritical>

	return xAlreadyYielded;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000814 	.word	0x20000814
 800a6e8:	200007ec 	.word	0x200007ec
 800a6ec:	200007ac 	.word	0x200007ac
 800a6f0:	200007f4 	.word	0x200007f4
 800a6f4:	200006f0 	.word	0x200006f0
 800a6f8:	200006ec 	.word	0x200006ec
 800a6fc:	20000800 	.word	0x20000800
 800a700:	200007fc 	.word	0x200007fc
 800a704:	e000ed04 	.word	0xe000ed04

0800a708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a712:	4b4e      	ldr	r3, [pc, #312]	; (800a84c <xTaskIncrementTick+0x144>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 8087 	bne.w	800a82a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a71c:	4b4c      	ldr	r3, [pc, #304]	; (800a850 <xTaskIncrementTick+0x148>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a724:	4a4a      	ldr	r2, [pc, #296]	; (800a850 <xTaskIncrementTick+0x148>)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d11f      	bne.n	800a770 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a730:	4b48      	ldr	r3, [pc, #288]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <xTaskIncrementTick+0x46>
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	e7fe      	b.n	800a74c <xTaskIncrementTick+0x44>
 800a74e:	4b41      	ldr	r3, [pc, #260]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	4b40      	ldr	r3, [pc, #256]	; (800a858 <xTaskIncrementTick+0x150>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a3e      	ldr	r2, [pc, #248]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	4a3e      	ldr	r2, [pc, #248]	; (800a858 <xTaskIncrementTick+0x150>)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	4b3e      	ldr	r3, [pc, #248]	; (800a85c <xTaskIncrementTick+0x154>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a3c      	ldr	r2, [pc, #240]	; (800a85c <xTaskIncrementTick+0x154>)
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	f000 fab4 	bl	800acd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a770:	4b3b      	ldr	r3, [pc, #236]	; (800a860 <xTaskIncrementTick+0x158>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	429a      	cmp	r2, r3
 800a778:	d348      	bcc.n	800a80c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a77a:	4b36      	ldr	r3, [pc, #216]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d104      	bne.n	800a78e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a784:	4b36      	ldr	r3, [pc, #216]	; (800a860 <xTaskIncrementTick+0x158>)
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	601a      	str	r2, [r3, #0]
					break;
 800a78c:	e03e      	b.n	800a80c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a78e:	4b31      	ldr	r3, [pc, #196]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d203      	bcs.n	800a7ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7a6:	4a2e      	ldr	r2, [pc, #184]	; (800a860 <xTaskIncrementTick+0x158>)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7ac:	e02e      	b.n	800a80c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe febf 	bl	8009536 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe feb6 	bl	8009536 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	409a      	lsls	r2, r3
 800a7d2:	4b24      	ldr	r3, [pc, #144]	; (800a864 <xTaskIncrementTick+0x15c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	4a22      	ldr	r2, [pc, #136]	; (800a864 <xTaskIncrementTick+0x15c>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <xTaskIncrementTick+0x160>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fe42 	bl	800947c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <xTaskIncrementTick+0x164>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	429a      	cmp	r2, r3
 800a804:	d3b9      	bcc.n	800a77a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a806:	2301      	movs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a80a:	e7b6      	b.n	800a77a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a80c:	4b17      	ldr	r3, [pc, #92]	; (800a86c <xTaskIncrementTick+0x164>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	4915      	ldr	r1, [pc, #84]	; (800a868 <xTaskIncrementTick+0x160>)
 800a814:	4613      	mov	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	440b      	add	r3, r1
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d907      	bls.n	800a834 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e004      	b.n	800a834 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a82a:	4b11      	ldr	r3, [pc, #68]	; (800a870 <xTaskIncrementTick+0x168>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	4a0f      	ldr	r2, [pc, #60]	; (800a870 <xTaskIncrementTick+0x168>)
 800a832:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <xTaskIncrementTick+0x16c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a840:	697b      	ldr	r3, [r7, #20]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000814 	.word	0x20000814
 800a850:	200007f0 	.word	0x200007f0
 800a854:	200007a4 	.word	0x200007a4
 800a858:	200007a8 	.word	0x200007a8
 800a85c:	20000804 	.word	0x20000804
 800a860:	2000080c 	.word	0x2000080c
 800a864:	200007f4 	.word	0x200007f4
 800a868:	200006f0 	.word	0x200006f0
 800a86c:	200006ec 	.word	0x200006ec
 800a870:	200007fc 	.word	0x200007fc
 800a874:	20000800 	.word	0x20000800

0800a878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a87e:	4b32      	ldr	r3, [pc, #200]	; (800a948 <vTaskSwitchContext+0xd0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a886:	4b31      	ldr	r3, [pc, #196]	; (800a94c <vTaskSwitchContext+0xd4>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a88c:	e057      	b.n	800a93e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800a88e:	4b2f      	ldr	r3, [pc, #188]	; (800a94c <vTaskSwitchContext+0xd4>)
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a894:	f7f5 fe8b 	bl	80005ae <getRunTimeCounterValue>
 800a898:	4602      	mov	r2, r0
 800a89a:	4b2d      	ldr	r3, [pc, #180]	; (800a950 <vTaskSwitchContext+0xd8>)
 800a89c:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a89e:	4b2c      	ldr	r3, [pc, #176]	; (800a950 <vTaskSwitchContext+0xd8>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b2c      	ldr	r3, [pc, #176]	; (800a954 <vTaskSwitchContext+0xdc>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d909      	bls.n	800a8be <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a8aa:	4b2b      	ldr	r3, [pc, #172]	; (800a958 <vTaskSwitchContext+0xe0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8b0:	4a27      	ldr	r2, [pc, #156]	; (800a950 <vTaskSwitchContext+0xd8>)
 800a8b2:	6810      	ldr	r0, [r2, #0]
 800a8b4:	4a27      	ldr	r2, [pc, #156]	; (800a954 <vTaskSwitchContext+0xdc>)
 800a8b6:	6812      	ldr	r2, [r2, #0]
 800a8b8:	1a82      	subs	r2, r0, r2
 800a8ba:	440a      	add	r2, r1
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <vTaskSwitchContext+0xd8>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a24      	ldr	r2, [pc, #144]	; (800a954 <vTaskSwitchContext+0xdc>)
 800a8c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c6:	4b25      	ldr	r3, [pc, #148]	; (800a95c <vTaskSwitchContext+0xe4>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	fab3 f383 	clz	r3, r3
 800a8d2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	f1c3 031f 	rsb	r3, r3, #31
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	4920      	ldr	r1, [pc, #128]	; (800a960 <vTaskSwitchContext+0xe8>)
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	440b      	add	r3, r1
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d109      	bne.n	800a904 <vTaskSwitchContext+0x8c>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	e7fe      	b.n	800a902 <vTaskSwitchContext+0x8a>
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a14      	ldr	r2, [pc, #80]	; (800a960 <vTaskSwitchContext+0xe8>)
 800a910:	4413      	add	r3, r2
 800a912:	613b      	str	r3, [r7, #16]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	3308      	adds	r3, #8
 800a926:	429a      	cmp	r2, r3
 800a928:	d104      	bne.n	800a934 <vTaskSwitchContext+0xbc>
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	605a      	str	r2, [r3, #4]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	4a07      	ldr	r2, [pc, #28]	; (800a958 <vTaskSwitchContext+0xe0>)
 800a93c:	6013      	str	r3, [r2, #0]
}
 800a93e:	bf00      	nop
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000814 	.word	0x20000814
 800a94c:	20000800 	.word	0x20000800
 800a950:	2000081c 	.word	0x2000081c
 800a954:	20000818 	.word	0x20000818
 800a958:	200006ec 	.word	0x200006ec
 800a95c:	200007f4 	.word	0x200007f4
 800a960:	200006f0 	.word	0x200006f0

0800a964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <vTaskPlaceOnEventList+0x24>
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	e7fe      	b.n	800a986 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <vTaskPlaceOnEventList+0x44>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3318      	adds	r3, #24
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7fe fd97 	bl	80094c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a996:	2101      	movs	r1, #1
 800a998:	6838      	ldr	r0, [r7, #0]
 800a99a:	f000 fb8b 	bl	800b0b4 <prvAddCurrentTaskToDelayedList>
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200006ec 	.word	0x200006ec

0800a9ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <xTaskRemoveFromEventList+0x2a>
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	e7fe      	b.n	800a9d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	3318      	adds	r3, #24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fdab 	bl	8009536 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	; (800aa58 <xTaskRemoveFromEventList+0xac>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11c      	bne.n	800aa22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fda2 	bl	8009536 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	409a      	lsls	r2, r3
 800a9fa:	4b18      	ldr	r3, [pc, #96]	; (800aa5c <xTaskRemoveFromEventList+0xb0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	4a16      	ldr	r2, [pc, #88]	; (800aa5c <xTaskRemoveFromEventList+0xb0>)
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4a13      	ldr	r2, [pc, #76]	; (800aa60 <xTaskRemoveFromEventList+0xb4>)
 800aa12:	441a      	add	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	f7fe fd2e 	bl	800947c <vListInsertEnd>
 800aa20:	e005      	b.n	800aa2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	3318      	adds	r3, #24
 800aa26:	4619      	mov	r1, r3
 800aa28:	480e      	ldr	r0, [pc, #56]	; (800aa64 <xTaskRemoveFromEventList+0xb8>)
 800aa2a:	f7fe fd27 	bl	800947c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <xTaskRemoveFromEventList+0xbc>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d905      	bls.n	800aa48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <xTaskRemoveFromEventList+0xc0>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	e001      	b.n	800aa4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa4c:	697b      	ldr	r3, [r7, #20]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000814 	.word	0x20000814
 800aa5c:	200007f4 	.word	0x200007f4
 800aa60:	200006f0 	.word	0x200006f0
 800aa64:	200007ac 	.word	0x200007ac
 800aa68:	200006ec 	.word	0x200006ec
 800aa6c:	20000800 	.word	0x20000800

0800aa70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa78:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <vTaskInternalSetTimeOutState+0x24>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa80:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <vTaskInternalSetTimeOutState+0x28>)
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	605a      	str	r2, [r3, #4]
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	20000804 	.word	0x20000804
 800aa98:	200007f0 	.word	0x200007f0

0800aa9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <xTaskCheckForTimeOut+0x24>
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	613b      	str	r3, [r7, #16]
 800aabe:	e7fe      	b.n	800aabe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d109      	bne.n	800aada <xTaskCheckForTimeOut+0x3e>
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	e7fe      	b.n	800aad8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800aada:	f000 fc77 	bl	800b3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aade:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <xTaskCheckForTimeOut+0xb8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d102      	bne.n	800aafe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	e023      	b.n	800ab46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <xTaskCheckForTimeOut+0xbc>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d007      	beq.n	800ab1a <xTaskCheckForTimeOut+0x7e>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	69ba      	ldr	r2, [r7, #24]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d302      	bcc.n	800ab1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab14:	2301      	movs	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	e015      	b.n	800ab46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d20b      	bcs.n	800ab3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ff9d 	bl	800aa70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	e004      	b.n	800ab46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab42:	2301      	movs	r3, #1
 800ab44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab46:	f000 fc6f 	bl	800b428 <vPortExitCritical>

	return xReturn;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	200007f0 	.word	0x200007f0
 800ab58:	20000804 	.word	0x20000804

0800ab5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab60:	4b03      	ldr	r3, [pc, #12]	; (800ab70 <vTaskMissedYield+0x14>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
}
 800ab66:	bf00      	nop
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20000800 	.word	0x20000800

0800ab74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab7c:	f000 f852 	bl	800ac24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab80:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <prvIdleTask+0x28>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d9f9      	bls.n	800ab7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <prvIdleTask+0x2c>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab98:	e7f0      	b.n	800ab7c <prvIdleTask+0x8>
 800ab9a:	bf00      	nop
 800ab9c:	200006f0 	.word	0x200006f0
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abaa:	2300      	movs	r3, #0
 800abac:	607b      	str	r3, [r7, #4]
 800abae:	e00c      	b.n	800abca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <prvInitialiseTaskLists+0x60>)
 800abbc:	4413      	add	r3, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fc2f 	bl	8009422 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3301      	adds	r3, #1
 800abc8:	607b      	str	r3, [r7, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b06      	cmp	r3, #6
 800abce:	d9ef      	bls.n	800abb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abd0:	480d      	ldr	r0, [pc, #52]	; (800ac08 <prvInitialiseTaskLists+0x64>)
 800abd2:	f7fe fc26 	bl	8009422 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abd6:	480d      	ldr	r0, [pc, #52]	; (800ac0c <prvInitialiseTaskLists+0x68>)
 800abd8:	f7fe fc23 	bl	8009422 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abdc:	480c      	ldr	r0, [pc, #48]	; (800ac10 <prvInitialiseTaskLists+0x6c>)
 800abde:	f7fe fc20 	bl	8009422 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abe2:	480c      	ldr	r0, [pc, #48]	; (800ac14 <prvInitialiseTaskLists+0x70>)
 800abe4:	f7fe fc1d 	bl	8009422 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abe8:	480b      	ldr	r0, [pc, #44]	; (800ac18 <prvInitialiseTaskLists+0x74>)
 800abea:	f7fe fc1a 	bl	8009422 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <prvInitialiseTaskLists+0x78>)
 800abf0:	4a05      	ldr	r2, [pc, #20]	; (800ac08 <prvInitialiseTaskLists+0x64>)
 800abf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abf4:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <prvInitialiseTaskLists+0x7c>)
 800abf6:	4a05      	ldr	r2, [pc, #20]	; (800ac0c <prvInitialiseTaskLists+0x68>)
 800abf8:	601a      	str	r2, [r3, #0]
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	200006f0 	.word	0x200006f0
 800ac08:	2000077c 	.word	0x2000077c
 800ac0c:	20000790 	.word	0x20000790
 800ac10:	200007ac 	.word	0x200007ac
 800ac14:	200007c0 	.word	0x200007c0
 800ac18:	200007d8 	.word	0x200007d8
 800ac1c:	200007a4 	.word	0x200007a4
 800ac20:	200007a8 	.word	0x200007a8

0800ac24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac2a:	e019      	b.n	800ac60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac2c:	f000 fbce 	bl	800b3cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac30:	4b0f      	ldr	r3, [pc, #60]	; (800ac70 <prvCheckTasksWaitingTermination+0x4c>)
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fc7a 	bl	8009536 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac42:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <prvCheckTasksWaitingTermination+0x50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a0a      	ldr	r2, [pc, #40]	; (800ac74 <prvCheckTasksWaitingTermination+0x50>)
 800ac4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <prvCheckTasksWaitingTermination+0x54>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <prvCheckTasksWaitingTermination+0x54>)
 800ac54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac56:	f000 fbe7 	bl	800b428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f80e 	bl	800ac7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <prvCheckTasksWaitingTermination+0x54>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1e1      	bne.n	800ac2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200007c0 	.word	0x200007c0
 800ac74:	200007ec 	.word	0x200007ec
 800ac78:	200007d4 	.word	0x200007d4

0800ac7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d108      	bne.n	800aca0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fd76 	bl	800b784 <vPortFree>
				vPortFree( pxTCB );
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fd73 	bl	800b784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac9e:	e017      	b.n	800acd0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d103      	bne.n	800acb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fd6a 	bl	800b784 <vPortFree>
	}
 800acb0:	e00e      	b.n	800acd0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d009      	beq.n	800acd0 <prvDeleteTCB+0x54>
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e7fe      	b.n	800acce <prvDeleteTCB+0x52>
	}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d104      	bne.n	800acf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800acea:	f04f 32ff 	mov.w	r2, #4294967295
 800acee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800acf0:	e008      	b.n	800ad04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800ad02:	6013      	str	r3, [r2, #0]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	200007a4 	.word	0x200007a4
 800ad14:	2000080c 	.word	0x2000080c

0800ad18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <xTaskGetSchedulerState+0x34>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad26:	2301      	movs	r3, #1
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	e008      	b.n	800ad3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad2c:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <xTaskGetSchedulerState+0x38>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d102      	bne.n	800ad3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad34:	2302      	movs	r3, #2
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	e001      	b.n	800ad3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad3e:	687b      	ldr	r3, [r7, #4]
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	200007f8 	.word	0x200007f8
 800ad50:	20000814 	.word	0x20000814

0800ad54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d069      	beq.n	800ae3e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	4b36      	ldr	r3, [pc, #216]	; (800ae48 <xTaskPriorityInherit+0xf4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d259      	bcs.n	800ae2c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	db06      	blt.n	800ad8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad80:	4b31      	ldr	r3, [pc, #196]	; (800ae48 <xTaskPriorityInherit+0xf4>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	f1c3 0207 	rsb	r2, r3, #7
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	6959      	ldr	r1, [r3, #20]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4a2b      	ldr	r2, [pc, #172]	; (800ae4c <xTaskPriorityInherit+0xf8>)
 800ada0:	4413      	add	r3, r2
 800ada2:	4299      	cmp	r1, r3
 800ada4:	d13a      	bne.n	800ae1c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	3304      	adds	r3, #4
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fbc3 	bl	8009536 <uxListRemove>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d115      	bne.n	800ade2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adba:	4924      	ldr	r1, [pc, #144]	; (800ae4c <xTaskPriorityInherit+0xf8>)
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	440b      	add	r3, r1
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xTaskPriorityInherit+0x8e>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	2201      	movs	r2, #1
 800add2:	fa02 f303 	lsl.w	r3, r2, r3
 800add6:	43da      	mvns	r2, r3
 800add8:	4b1d      	ldr	r3, [pc, #116]	; (800ae50 <xTaskPriorityInherit+0xfc>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4013      	ands	r3, r2
 800adde:	4a1c      	ldr	r2, [pc, #112]	; (800ae50 <xTaskPriorityInherit+0xfc>)
 800ade0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ade2:	4b19      	ldr	r3, [pc, #100]	; (800ae48 <xTaskPriorityInherit+0xf4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	2201      	movs	r2, #1
 800adf2:	409a      	lsls	r2, r3
 800adf4:	4b16      	ldr	r3, [pc, #88]	; (800ae50 <xTaskPriorityInherit+0xfc>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <xTaskPriorityInherit+0xfc>)
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4a10      	ldr	r2, [pc, #64]	; (800ae4c <xTaskPriorityInherit+0xf8>)
 800ae0c:	441a      	add	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f7fe fb31 	bl	800947c <vListInsertEnd>
 800ae1a:	e004      	b.n	800ae26 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <xTaskPriorityInherit+0xf4>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e008      	b.n	800ae3e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae30:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <xTaskPriorityInherit+0xf4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d201      	bcs.n	800ae3e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	200006ec 	.word	0x200006ec
 800ae4c:	200006f0 	.word	0x200006f0
 800ae50:	200007f4 	.word	0x200007f4

0800ae54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d06c      	beq.n	800af44 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae6a:	4b39      	ldr	r3, [pc, #228]	; (800af50 <xTaskPriorityDisinherit+0xfc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d009      	beq.n	800ae88 <xTaskPriorityDisinherit+0x34>
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e7fe      	b.n	800ae86 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d109      	bne.n	800aea4 <xTaskPriorityDisinherit+0x50>
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	e7fe      	b.n	800aea2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea8:	1e5a      	subs	r2, r3, #1
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d044      	beq.n	800af44 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d140      	bne.n	800af44 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3304      	adds	r3, #4
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fb35 	bl	8009536 <uxListRemove>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d115      	bne.n	800aefe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	491f      	ldr	r1, [pc, #124]	; (800af54 <xTaskPriorityDisinherit+0x100>)
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <xTaskPriorityDisinherit+0xaa>
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	2201      	movs	r2, #1
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	43da      	mvns	r2, r3
 800aef4:	4b18      	ldr	r3, [pc, #96]	; (800af58 <xTaskPriorityDisinherit+0x104>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4013      	ands	r3, r2
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <xTaskPriorityDisinherit+0x104>)
 800aefc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	f1c3 0207 	rsb	r2, r3, #7
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	2201      	movs	r2, #1
 800af18:	409a      	lsls	r2, r3
 800af1a:	4b0f      	ldr	r3, [pc, #60]	; (800af58 <xTaskPriorityDisinherit+0x104>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4313      	orrs	r3, r2
 800af20:	4a0d      	ldr	r2, [pc, #52]	; (800af58 <xTaskPriorityDisinherit+0x104>)
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4a08      	ldr	r2, [pc, #32]	; (800af54 <xTaskPriorityDisinherit+0x100>)
 800af32:	441a      	add	r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fe fa9e 	bl	800947c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af44:	697b      	ldr	r3, [r7, #20]
	}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	200006ec 	.word	0x200006ec
 800af54:	200006f0 	.word	0x200006f0
 800af58:	200007f4 	.word	0x200007f4

0800af5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 8081 	beq.w	800b078 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	e7fe      	b.n	800af90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d902      	bls.n	800afa2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	61fb      	str	r3, [r7, #28]
 800afa0:	e002      	b.n	800afa8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d062      	beq.n	800b078 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d15d      	bne.n	800b078 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800afbc:	4b30      	ldr	r3, [pc, #192]	; (800b080 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d109      	bne.n	800afda <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60bb      	str	r3, [r7, #8]
 800afd8:	e7fe      	b.n	800afd8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	69fa      	ldr	r2, [r7, #28]
 800afe4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	db04      	blt.n	800aff8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	f1c3 0207 	rsb	r2, r3, #7
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	6959      	ldr	r1, [r3, #20]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4a1f      	ldr	r2, [pc, #124]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b008:	4413      	add	r3, r2
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d134      	bne.n	800b078 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	3304      	adds	r3, #4
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe fa8f 	bl	8009536 <uxListRemove>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d115      	bne.n	800b04a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b022:	4918      	ldr	r1, [pc, #96]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	2201      	movs	r2, #1
 800b03a:	fa02 f303 	lsl.w	r3, r2, r3
 800b03e:	43da      	mvns	r2, r3
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4013      	ands	r3, r2
 800b046:	4a10      	ldr	r2, [pc, #64]	; (800b088 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b048:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04e:	2201      	movs	r2, #1
 800b050:	409a      	lsls	r2, r3
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4313      	orrs	r3, r2
 800b058:	4a0b      	ldr	r2, [pc, #44]	; (800b088 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4a06      	ldr	r2, [pc, #24]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b06a:	441a      	add	r2, r3
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	3304      	adds	r3, #4
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7fe fa02 	bl	800947c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b078:	bf00      	nop
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	200006ec 	.word	0x200006ec
 800b084:	200006f0 	.word	0x200006f0
 800b088:	200007f4 	.word	0x200007f4

0800b08c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d004      	beq.n	800b0a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b09e:	3201      	adds	r2, #1
 800b0a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b0a2:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
	}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	200006ec 	.word	0x200006ec

0800b0b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b0be:	4b29      	ldr	r3, [pc, #164]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0c4:	4b28      	ldr	r3, [pc, #160]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fa33 	bl	8009536 <uxListRemove>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10b      	bne.n	800b0ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b0d6:	4b24      	ldr	r3, [pc, #144]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	2201      	movs	r2, #1
 800b0de:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e2:	43da      	mvns	r2, r3
 800b0e4:	4b21      	ldr	r3, [pc, #132]	; (800b16c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	4a20      	ldr	r2, [pc, #128]	; (800b16c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d10a      	bne.n	800b10c <prvAddCurrentTaskToDelayedList+0x58>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d007      	beq.n	800b10c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0fc:	4b1a      	ldr	r3, [pc, #104]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3304      	adds	r3, #4
 800b102:	4619      	mov	r1, r3
 800b104:	481a      	ldr	r0, [pc, #104]	; (800b170 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b106:	f7fe f9b9 	bl	800947c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b10a:	e026      	b.n	800b15a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4413      	add	r3, r2
 800b112:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b114:	4b14      	ldr	r3, [pc, #80]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	429a      	cmp	r2, r3
 800b122:	d209      	bcs.n	800b138 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b124:	4b13      	ldr	r3, [pc, #76]	; (800b174 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe f9c7 	bl	80094c4 <vListInsert>
}
 800b136:	e010      	b.n	800b15a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b138:	4b0f      	ldr	r3, [pc, #60]	; (800b178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe f9bd 	bl	80094c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	429a      	cmp	r2, r3
 800b152:	d202      	bcs.n	800b15a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b154:	4a09      	ldr	r2, [pc, #36]	; (800b17c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	6013      	str	r3, [r2, #0]
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	200007f0 	.word	0x200007f0
 800b168:	200006ec 	.word	0x200006ec
 800b16c:	200007f4 	.word	0x200007f4
 800b170:	200007d8 	.word	0x200007d8
 800b174:	200007a8 	.word	0x200007a8
 800b178:	200007a4 	.word	0x200007a4
 800b17c:	2000080c 	.word	0x2000080c

0800b180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3b04      	subs	r3, #4
 800b190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3b04      	subs	r3, #4
 800b19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f023 0201 	bic.w	r2, r3, #1
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3b04      	subs	r3, #4
 800b1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1b0:	4a0c      	ldr	r2, [pc, #48]	; (800b1e4 <pxPortInitialiseStack+0x64>)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3b14      	subs	r3, #20
 800b1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3b04      	subs	r3, #4
 800b1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f06f 0202 	mvn.w	r2, #2
 800b1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3b20      	subs	r3, #32
 800b1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	0800b1e9 	.word	0x0800b1e9

0800b1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1f2:	4b11      	ldr	r3, [pc, #68]	; (800b238 <prvTaskExitError+0x50>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fa:	d009      	beq.n	800b210 <prvTaskExitError+0x28>
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	e7fe      	b.n	800b20e <prvTaskExitError+0x26>
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b222:	bf00      	nop
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0fc      	beq.n	800b224 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	200000e8 	.word	0x200000e8
 800b23c:	00000000 	.word	0x00000000

0800b240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b240:	4b07      	ldr	r3, [pc, #28]	; (800b260 <pxCurrentTCBConst2>)
 800b242:	6819      	ldr	r1, [r3, #0]
 800b244:	6808      	ldr	r0, [r1, #0]
 800b246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24a:	f380 8809 	msr	PSP, r0
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f04f 0000 	mov.w	r0, #0
 800b256:	f380 8811 	msr	BASEPRI, r0
 800b25a:	4770      	bx	lr
 800b25c:	f3af 8000 	nop.w

0800b260 <pxCurrentTCBConst2>:
 800b260:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop

0800b268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b268:	4808      	ldr	r0, [pc, #32]	; (800b28c <prvPortStartFirstTask+0x24>)
 800b26a:	6800      	ldr	r0, [r0, #0]
 800b26c:	6800      	ldr	r0, [r0, #0]
 800b26e:	f380 8808 	msr	MSP, r0
 800b272:	f04f 0000 	mov.w	r0, #0
 800b276:	f380 8814 	msr	CONTROL, r0
 800b27a:	b662      	cpsie	i
 800b27c:	b661      	cpsie	f
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	df00      	svc	0
 800b288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b28a:	bf00      	nop
 800b28c:	e000ed08 	.word	0xe000ed08

0800b290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b296:	4b44      	ldr	r3, [pc, #272]	; (800b3a8 <xPortStartScheduler+0x118>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a44      	ldr	r2, [pc, #272]	; (800b3ac <xPortStartScheduler+0x11c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d109      	bne.n	800b2b4 <xPortStartScheduler+0x24>
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	e7fe      	b.n	800b2b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2b4:	4b3c      	ldr	r3, [pc, #240]	; (800b3a8 <xPortStartScheduler+0x118>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a3d      	ldr	r2, [pc, #244]	; (800b3b0 <xPortStartScheduler+0x120>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d109      	bne.n	800b2d2 <xPortStartScheduler+0x42>
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e7fe      	b.n	800b2d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2d2:	4b38      	ldr	r3, [pc, #224]	; (800b3b4 <xPortStartScheduler+0x124>)
 800b2d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	22ff      	movs	r2, #255	; 0xff
 800b2e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2ec:	78fb      	ldrb	r3, [r7, #3]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	4b30      	ldr	r3, [pc, #192]	; (800b3b8 <xPortStartScheduler+0x128>)
 800b2f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2fa:	4b30      	ldr	r3, [pc, #192]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b2fc:	2207      	movs	r2, #7
 800b2fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b300:	e009      	b.n	800b316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b302:	4b2e      	ldr	r3, [pc, #184]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3b01      	subs	r3, #1
 800b308:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b30a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b30c:	78fb      	ldrb	r3, [r7, #3]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	b2db      	uxtb	r3, r3
 800b314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b316:	78fb      	ldrb	r3, [r7, #3]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31e:	2b80      	cmp	r3, #128	; 0x80
 800b320:	d0ef      	beq.n	800b302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b322:	4b26      	ldr	r3, [pc, #152]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f1c3 0307 	rsb	r3, r3, #7
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	d009      	beq.n	800b342 <xPortStartScheduler+0xb2>
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	60bb      	str	r3, [r7, #8]
 800b340:	e7fe      	b.n	800b340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b342:	4b1e      	ldr	r3, [pc, #120]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	021b      	lsls	r3, r3, #8
 800b348:	4a1c      	ldr	r2, [pc, #112]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b34a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b34c:	4b1b      	ldr	r3, [pc, #108]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b354:	4a19      	ldr	r2, [pc, #100]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b360:	4b17      	ldr	r3, [pc, #92]	; (800b3c0 <xPortStartScheduler+0x130>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a16      	ldr	r2, [pc, #88]	; (800b3c0 <xPortStartScheduler+0x130>)
 800b366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b36c:	4b14      	ldr	r3, [pc, #80]	; (800b3c0 <xPortStartScheduler+0x130>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <xPortStartScheduler+0x130>)
 800b372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b378:	f000 f8d6 	bl	800b528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b37c:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b37e:	2200      	movs	r2, #0
 800b380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b382:	f000 f8f5 	bl	800b570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b38c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b392:	f7ff ff69 	bl	800b268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b396:	f7ff fa6f 	bl	800a878 <vTaskSwitchContext>
	prvTaskExitError();
 800b39a:	f7ff ff25 	bl	800b1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	e000ed00 	.word	0xe000ed00
 800b3ac:	410fc271 	.word	0x410fc271
 800b3b0:	410fc270 	.word	0x410fc270
 800b3b4:	e000e400 	.word	0xe000e400
 800b3b8:	20000820 	.word	0x20000820
 800b3bc:	20000824 	.word	0x20000824
 800b3c0:	e000ed20 	.word	0xe000ed20
 800b3c4:	200000e8 	.word	0x200000e8
 800b3c8:	e000ef34 	.word	0xe000ef34

0800b3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <vPortEnterCritical+0x54>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	; (800b420 <vPortEnterCritical+0x54>)
 800b3ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <vPortEnterCritical+0x54>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d10e      	bne.n	800b414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <vPortEnterCritical+0x58>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d009      	beq.n	800b414 <vPortEnterCritical+0x48>
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	e7fe      	b.n	800b412 <vPortEnterCritical+0x46>
	}
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	200000e8 	.word	0x200000e8
 800b424:	e000ed04 	.word	0xe000ed04

0800b428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <vPortExitCritical+0x4c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <vPortExitCritical+0x22>
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	e7fe      	b.n	800b448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <vPortExitCritical+0x4c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3b01      	subs	r3, #1
 800b450:	4a08      	ldr	r2, [pc, #32]	; (800b474 <vPortExitCritical+0x4c>)
 800b452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <vPortExitCritical+0x4c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d104      	bne.n	800b466 <vPortExitCritical+0x3e>
 800b45c:	2300      	movs	r3, #0
 800b45e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b466:	bf00      	nop
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	200000e8 	.word	0x200000e8
	...

0800b480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b480:	f3ef 8009 	mrs	r0, PSP
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <pxCurrentTCBConst>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	f01e 0f10 	tst.w	lr, #16
 800b490:	bf08      	it	eq
 800b492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	6010      	str	r0, [r2, #0]
 800b49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4a4:	f380 8811 	msr	BASEPRI, r0
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f7ff f9e2 	bl	800a878 <vTaskSwitchContext>
 800b4b4:	f04f 0000 	mov.w	r0, #0
 800b4b8:	f380 8811 	msr	BASEPRI, r0
 800b4bc:	bc09      	pop	{r0, r3}
 800b4be:	6819      	ldr	r1, [r3, #0]
 800b4c0:	6808      	ldr	r0, [r1, #0]
 800b4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c6:	f01e 0f10 	tst.w	lr, #16
 800b4ca:	bf08      	it	eq
 800b4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4d0:	f380 8809 	msr	PSP, r0
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	f3af 8000 	nop.w

0800b4e0 <pxCurrentTCBConst>:
 800b4e0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop

0800b4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b500:	f7ff f902 	bl	800a708 <xTaskIncrementTick>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b50a:	4b06      	ldr	r3, [pc, #24]	; (800b524 <SysTick_Handler+0x3c>)
 800b50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	2300      	movs	r3, #0
 800b514:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	e000ed04 	.word	0xe000ed04

0800b528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b528:	b480      	push	{r7}
 800b52a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b52c:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <vPortSetupTimerInterrupt+0x34>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b532:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <vPortSetupTimerInterrupt+0x38>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <vPortSetupTimerInterrupt+0x3c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a0a      	ldr	r2, [pc, #40]	; (800b568 <vPortSetupTimerInterrupt+0x40>)
 800b53e:	fba2 2303 	umull	r2, r3, r2, r3
 800b542:	099b      	lsrs	r3, r3, #6
 800b544:	4a09      	ldr	r2, [pc, #36]	; (800b56c <vPortSetupTimerInterrupt+0x44>)
 800b546:	3b01      	subs	r3, #1
 800b548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b54a:	4b04      	ldr	r3, [pc, #16]	; (800b55c <vPortSetupTimerInterrupt+0x34>)
 800b54c:	2207      	movs	r2, #7
 800b54e:	601a      	str	r2, [r3, #0]
}
 800b550:	bf00      	nop
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	e000e010 	.word	0xe000e010
 800b560:	e000e018 	.word	0xe000e018
 800b564:	200000dc 	.word	0x200000dc
 800b568:	10624dd3 	.word	0x10624dd3
 800b56c:	e000e014 	.word	0xe000e014

0800b570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b580 <vPortEnableVFP+0x10>
 800b574:	6801      	ldr	r1, [r0, #0]
 800b576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b57a:	6001      	str	r1, [r0, #0]
 800b57c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b57e:	bf00      	nop
 800b580:	e000ed88 	.word	0xe000ed88

0800b584 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b58a:	f3ef 8305 	mrs	r3, IPSR
 800b58e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b0f      	cmp	r3, #15
 800b594:	d913      	bls.n	800b5be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b596:	4a16      	ldr	r2, [pc, #88]	; (800b5f0 <vPortValidateInterruptPriority+0x6c>)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4413      	add	r3, r2
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5a0:	4b14      	ldr	r3, [pc, #80]	; (800b5f4 <vPortValidateInterruptPriority+0x70>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	7afa      	ldrb	r2, [r7, #11]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d209      	bcs.n	800b5be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	e7fe      	b.n	800b5bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5be:	4b0e      	ldr	r3, [pc, #56]	; (800b5f8 <vPortValidateInterruptPriority+0x74>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5c6:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <vPortValidateInterruptPriority+0x78>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d909      	bls.n	800b5e2 <vPortValidateInterruptPriority+0x5e>
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	e7fe      	b.n	800b5e0 <vPortValidateInterruptPriority+0x5c>
	}
 800b5e2:	bf00      	nop
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	e000e3f0 	.word	0xe000e3f0
 800b5f4:	20000820 	.word	0x20000820
 800b5f8:	e000ed0c 	.word	0xe000ed0c
 800b5fc:	20000824 	.word	0x20000824

0800b600 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b60c:	f7fe ffd2 	bl	800a5b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b610:	4b57      	ldr	r3, [pc, #348]	; (800b770 <pvPortMalloc+0x170>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b618:	f000 f90c 	bl	800b834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b61c:	4b55      	ldr	r3, [pc, #340]	; (800b774 <pvPortMalloc+0x174>)
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4013      	ands	r3, r2
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 808c 	bne.w	800b742 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01c      	beq.n	800b66a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b630:	2208      	movs	r2, #8
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4413      	add	r3, r2
 800b636:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d013      	beq.n	800b66a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f023 0307 	bic.w	r3, r3, #7
 800b648:	3308      	adds	r3, #8
 800b64a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <pvPortMalloc+0x6a>
 800b656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e7fe      	b.n	800b668 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d068      	beq.n	800b742 <pvPortMalloc+0x142>
 800b670:	4b41      	ldr	r3, [pc, #260]	; (800b778 <pvPortMalloc+0x178>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d863      	bhi.n	800b742 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b67a:	4b40      	ldr	r3, [pc, #256]	; (800b77c <pvPortMalloc+0x17c>)
 800b67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b67e:	4b3f      	ldr	r3, [pc, #252]	; (800b77c <pvPortMalloc+0x17c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b684:	e004      	b.n	800b690 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	429a      	cmp	r2, r3
 800b698:	d903      	bls.n	800b6a2 <pvPortMalloc+0xa2>
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f1      	bne.n	800b686 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6a2:	4b33      	ldr	r3, [pc, #204]	; (800b770 <pvPortMalloc+0x170>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d04a      	beq.n	800b742 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	4413      	add	r3, r2
 800b6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	2308      	movs	r3, #8
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d91e      	bls.n	800b70c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f003 0307 	and.w	r3, r3, #7
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <pvPortMalloc+0xf4>
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	e7fe      	b.n	800b6f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	1ad2      	subs	r2, r2, r3
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b706:	69b8      	ldr	r0, [r7, #24]
 800b708:	f000 f8f6 	bl	800b8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <pvPortMalloc+0x178>)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	4a18      	ldr	r2, [pc, #96]	; (800b778 <pvPortMalloc+0x178>)
 800b718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b71a:	4b17      	ldr	r3, [pc, #92]	; (800b778 <pvPortMalloc+0x178>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b18      	ldr	r3, [pc, #96]	; (800b780 <pvPortMalloc+0x180>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d203      	bcs.n	800b72e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b726:	4b14      	ldr	r3, [pc, #80]	; (800b778 <pvPortMalloc+0x178>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a15      	ldr	r2, [pc, #84]	; (800b780 <pvPortMalloc+0x180>)
 800b72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	4b10      	ldr	r3, [pc, #64]	; (800b774 <pvPortMalloc+0x174>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	431a      	orrs	r2, r3
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b742:	f7fe ff45 	bl	800a5d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <pvPortMalloc+0x164>
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e7fe      	b.n	800b762 <pvPortMalloc+0x162>
	return pvReturn;
 800b764:	69fb      	ldr	r3, [r7, #28]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3728      	adds	r7, #40	; 0x28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20002f40 	.word	0x20002f40
 800b774:	20002f4c 	.word	0x20002f4c
 800b778:	20002f44 	.word	0x20002f44
 800b77c:	20002f38 	.word	0x20002f38
 800b780:	20002f48 	.word	0x20002f48

0800b784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d046      	beq.n	800b824 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b796:	2308      	movs	r3, #8
 800b798:	425b      	negs	r3, r3
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4413      	add	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	4b20      	ldr	r3, [pc, #128]	; (800b82c <vPortFree+0xa8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d109      	bne.n	800b7c6 <vPortFree+0x42>
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e7fe      	b.n	800b7c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <vPortFree+0x5e>
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	60bb      	str	r3, [r7, #8]
 800b7e0:	e7fe      	b.n	800b7e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	4b11      	ldr	r3, [pc, #68]	; (800b82c <vPortFree+0xa8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d019      	beq.n	800b824 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d115      	bne.n	800b824 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <vPortFree+0xa8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	43db      	mvns	r3, r3
 800b802:	401a      	ands	r2, r3
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b808:	f7fe fed4 	bl	800a5b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <vPortFree+0xac>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4413      	add	r3, r2
 800b816:	4a06      	ldr	r2, [pc, #24]	; (800b830 <vPortFree+0xac>)
 800b818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b81a:	6938      	ldr	r0, [r7, #16]
 800b81c:	f000 f86c 	bl	800b8f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b820:	f7fe fed6 	bl	800a5d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b824:	bf00      	nop
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20002f4c 	.word	0x20002f4c
 800b830:	20002f44 	.word	0x20002f44

0800b834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b83a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b840:	4b27      	ldr	r3, [pc, #156]	; (800b8e0 <prvHeapInit+0xac>)
 800b842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	4a1f      	ldr	r2, [pc, #124]	; (800b8e0 <prvHeapInit+0xac>)
 800b864:	4413      	add	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b86c:	4a1d      	ldr	r2, [pc, #116]	; (800b8e4 <prvHeapInit+0xb0>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b872:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <prvHeapInit+0xb0>)
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	4413      	add	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b880:	2208      	movs	r2, #8
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0307 	bic.w	r3, r3, #7
 800b88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <prvHeapInit+0xb4>)
 800b894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b896:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <prvHeapInit+0xb4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <prvHeapInit+0xb8>)
 800b8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <prvHeapInit+0xbc>)
 800b8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <prvHeapInit+0xc0>)
 800b8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	20000828 	.word	0x20000828
 800b8e4:	20002f38 	.word	0x20002f38
 800b8e8:	20002f40 	.word	0x20002f40
 800b8ec:	20002f48 	.word	0x20002f48
 800b8f0:	20002f44 	.word	0x20002f44
 800b8f4:	20002f4c 	.word	0x20002f4c

0800b8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b900:	4b28      	ldr	r3, [pc, #160]	; (800b9a4 <prvInsertBlockIntoFreeList+0xac>)
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	e002      	b.n	800b90c <prvInsertBlockIntoFreeList+0x14>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d8f7      	bhi.n	800b906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d108      	bne.n	800b93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	441a      	add	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d118      	bne.n	800b980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d00d      	beq.n	800b976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	441a      	add	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e008      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b976:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	e003      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d002      	beq.n	800b996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b996:	bf00      	nop
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20002f38 	.word	0x20002f38
 800b9a8:	20002f40 	.word	0x20002f40

0800b9ac <__errno>:
 800b9ac:	4b01      	ldr	r3, [pc, #4]	; (800b9b4 <__errno+0x8>)
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	200000ec 	.word	0x200000ec

0800b9b8 <__libc_init_array>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4e0d      	ldr	r6, [pc, #52]	; (800b9f0 <__libc_init_array+0x38>)
 800b9bc:	4c0d      	ldr	r4, [pc, #52]	; (800b9f4 <__libc_init_array+0x3c>)
 800b9be:	1ba4      	subs	r4, r4, r6
 800b9c0:	10a4      	asrs	r4, r4, #2
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	42a5      	cmp	r5, r4
 800b9c6:	d109      	bne.n	800b9dc <__libc_init_array+0x24>
 800b9c8:	4e0b      	ldr	r6, [pc, #44]	; (800b9f8 <__libc_init_array+0x40>)
 800b9ca:	4c0c      	ldr	r4, [pc, #48]	; (800b9fc <__libc_init_array+0x44>)
 800b9cc:	f001 fb4a 	bl	800d064 <_init>
 800b9d0:	1ba4      	subs	r4, r4, r6
 800b9d2:	10a4      	asrs	r4, r4, #2
 800b9d4:	2500      	movs	r5, #0
 800b9d6:	42a5      	cmp	r5, r4
 800b9d8:	d105      	bne.n	800b9e6 <__libc_init_array+0x2e>
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9e0:	4798      	blx	r3
 800b9e2:	3501      	adds	r5, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__libc_init_array+0xc>
 800b9e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9ea:	4798      	blx	r3
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	e7f2      	b.n	800b9d6 <__libc_init_array+0x1e>
 800b9f0:	0800ee9c 	.word	0x0800ee9c
 800b9f4:	0800ee9c 	.word	0x0800ee9c
 800b9f8:	0800ee9c 	.word	0x0800ee9c
 800b9fc:	0800eea0 	.word	0x0800eea0

0800ba00 <malloc>:
 800ba00:	4b02      	ldr	r3, [pc, #8]	; (800ba0c <malloc+0xc>)
 800ba02:	4601      	mov	r1, r0
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f000 b86d 	b.w	800bae4 <_malloc_r>
 800ba0a:	bf00      	nop
 800ba0c:	200000ec 	.word	0x200000ec

0800ba10 <free>:
 800ba10:	4b02      	ldr	r3, [pc, #8]	; (800ba1c <free+0xc>)
 800ba12:	4601      	mov	r1, r0
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	f000 b817 	b.w	800ba48 <_free_r>
 800ba1a:	bf00      	nop
 800ba1c:	200000ec 	.word	0x200000ec

0800ba20 <memcpy>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	1e43      	subs	r3, r0, #1
 800ba24:	440a      	add	r2, r1
 800ba26:	4291      	cmp	r1, r2
 800ba28:	d100      	bne.n	800ba2c <memcpy+0xc>
 800ba2a:	bd10      	pop	{r4, pc}
 800ba2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba34:	e7f7      	b.n	800ba26 <memcpy+0x6>

0800ba36 <memset>:
 800ba36:	4402      	add	r2, r0
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d100      	bne.n	800ba40 <memset+0xa>
 800ba3e:	4770      	bx	lr
 800ba40:	f803 1b01 	strb.w	r1, [r3], #1
 800ba44:	e7f9      	b.n	800ba3a <memset+0x4>
	...

0800ba48 <_free_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d045      	beq.n	800badc <_free_r+0x94>
 800ba50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba54:	1f0c      	subs	r4, r1, #4
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfb8      	it	lt
 800ba5a:	18e4      	addlt	r4, r4, r3
 800ba5c:	f000 fdf2 	bl	800c644 <__malloc_lock>
 800ba60:	4a1f      	ldr	r2, [pc, #124]	; (800bae0 <_free_r+0x98>)
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	4610      	mov	r0, r2
 800ba66:	b933      	cbnz	r3, 800ba76 <_free_r+0x2e>
 800ba68:	6063      	str	r3, [r4, #4]
 800ba6a:	6014      	str	r4, [r2, #0]
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba72:	f000 bde8 	b.w	800c646 <__malloc_unlock>
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	d90c      	bls.n	800ba94 <_free_r+0x4c>
 800ba7a:	6821      	ldr	r1, [r4, #0]
 800ba7c:	1862      	adds	r2, r4, r1
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bf04      	itt	eq
 800ba82:	681a      	ldreq	r2, [r3, #0]
 800ba84:	685b      	ldreq	r3, [r3, #4]
 800ba86:	6063      	str	r3, [r4, #4]
 800ba88:	bf04      	itt	eq
 800ba8a:	1852      	addeq	r2, r2, r1
 800ba8c:	6022      	streq	r2, [r4, #0]
 800ba8e:	6004      	str	r4, [r0, #0]
 800ba90:	e7ec      	b.n	800ba6c <_free_r+0x24>
 800ba92:	4613      	mov	r3, r2
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	b10a      	cbz	r2, 800ba9c <_free_r+0x54>
 800ba98:	42a2      	cmp	r2, r4
 800ba9a:	d9fa      	bls.n	800ba92 <_free_r+0x4a>
 800ba9c:	6819      	ldr	r1, [r3, #0]
 800ba9e:	1858      	adds	r0, r3, r1
 800baa0:	42a0      	cmp	r0, r4
 800baa2:	d10b      	bne.n	800babc <_free_r+0x74>
 800baa4:	6820      	ldr	r0, [r4, #0]
 800baa6:	4401      	add	r1, r0
 800baa8:	1858      	adds	r0, r3, r1
 800baaa:	4282      	cmp	r2, r0
 800baac:	6019      	str	r1, [r3, #0]
 800baae:	d1dd      	bne.n	800ba6c <_free_r+0x24>
 800bab0:	6810      	ldr	r0, [r2, #0]
 800bab2:	6852      	ldr	r2, [r2, #4]
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	4401      	add	r1, r0
 800bab8:	6019      	str	r1, [r3, #0]
 800baba:	e7d7      	b.n	800ba6c <_free_r+0x24>
 800babc:	d902      	bls.n	800bac4 <_free_r+0x7c>
 800babe:	230c      	movs	r3, #12
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	e7d3      	b.n	800ba6c <_free_r+0x24>
 800bac4:	6820      	ldr	r0, [r4, #0]
 800bac6:	1821      	adds	r1, r4, r0
 800bac8:	428a      	cmp	r2, r1
 800baca:	bf04      	itt	eq
 800bacc:	6811      	ldreq	r1, [r2, #0]
 800bace:	6852      	ldreq	r2, [r2, #4]
 800bad0:	6062      	str	r2, [r4, #4]
 800bad2:	bf04      	itt	eq
 800bad4:	1809      	addeq	r1, r1, r0
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	605c      	str	r4, [r3, #4]
 800bada:	e7c7      	b.n	800ba6c <_free_r+0x24>
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	20002f50 	.word	0x20002f50

0800bae4 <_malloc_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	1ccd      	adds	r5, r1, #3
 800bae8:	f025 0503 	bic.w	r5, r5, #3
 800baec:	3508      	adds	r5, #8
 800baee:	2d0c      	cmp	r5, #12
 800baf0:	bf38      	it	cc
 800baf2:	250c      	movcc	r5, #12
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	4606      	mov	r6, r0
 800baf8:	db01      	blt.n	800bafe <_malloc_r+0x1a>
 800bafa:	42a9      	cmp	r1, r5
 800bafc:	d903      	bls.n	800bb06 <_malloc_r+0x22>
 800bafe:	230c      	movs	r3, #12
 800bb00:	6033      	str	r3, [r6, #0]
 800bb02:	2000      	movs	r0, #0
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	f000 fd9d 	bl	800c644 <__malloc_lock>
 800bb0a:	4a21      	ldr	r2, [pc, #132]	; (800bb90 <_malloc_r+0xac>)
 800bb0c:	6814      	ldr	r4, [r2, #0]
 800bb0e:	4621      	mov	r1, r4
 800bb10:	b991      	cbnz	r1, 800bb38 <_malloc_r+0x54>
 800bb12:	4c20      	ldr	r4, [pc, #128]	; (800bb94 <_malloc_r+0xb0>)
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	b91b      	cbnz	r3, 800bb20 <_malloc_r+0x3c>
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f000 f8b9 	bl	800bc90 <_sbrk_r>
 800bb1e:	6020      	str	r0, [r4, #0]
 800bb20:	4629      	mov	r1, r5
 800bb22:	4630      	mov	r0, r6
 800bb24:	f000 f8b4 	bl	800bc90 <_sbrk_r>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d124      	bne.n	800bb76 <_malloc_r+0x92>
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	6033      	str	r3, [r6, #0]
 800bb30:	4630      	mov	r0, r6
 800bb32:	f000 fd88 	bl	800c646 <__malloc_unlock>
 800bb36:	e7e4      	b.n	800bb02 <_malloc_r+0x1e>
 800bb38:	680b      	ldr	r3, [r1, #0]
 800bb3a:	1b5b      	subs	r3, r3, r5
 800bb3c:	d418      	bmi.n	800bb70 <_malloc_r+0x8c>
 800bb3e:	2b0b      	cmp	r3, #11
 800bb40:	d90f      	bls.n	800bb62 <_malloc_r+0x7e>
 800bb42:	600b      	str	r3, [r1, #0]
 800bb44:	50cd      	str	r5, [r1, r3]
 800bb46:	18cc      	adds	r4, r1, r3
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f000 fd7c 	bl	800c646 <__malloc_unlock>
 800bb4e:	f104 000b 	add.w	r0, r4, #11
 800bb52:	1d23      	adds	r3, r4, #4
 800bb54:	f020 0007 	bic.w	r0, r0, #7
 800bb58:	1ac3      	subs	r3, r0, r3
 800bb5a:	d0d3      	beq.n	800bb04 <_malloc_r+0x20>
 800bb5c:	425a      	negs	r2, r3
 800bb5e:	50e2      	str	r2, [r4, r3]
 800bb60:	e7d0      	b.n	800bb04 <_malloc_r+0x20>
 800bb62:	428c      	cmp	r4, r1
 800bb64:	684b      	ldr	r3, [r1, #4]
 800bb66:	bf16      	itet	ne
 800bb68:	6063      	strne	r3, [r4, #4]
 800bb6a:	6013      	streq	r3, [r2, #0]
 800bb6c:	460c      	movne	r4, r1
 800bb6e:	e7eb      	b.n	800bb48 <_malloc_r+0x64>
 800bb70:	460c      	mov	r4, r1
 800bb72:	6849      	ldr	r1, [r1, #4]
 800bb74:	e7cc      	b.n	800bb10 <_malloc_r+0x2c>
 800bb76:	1cc4      	adds	r4, r0, #3
 800bb78:	f024 0403 	bic.w	r4, r4, #3
 800bb7c:	42a0      	cmp	r0, r4
 800bb7e:	d005      	beq.n	800bb8c <_malloc_r+0xa8>
 800bb80:	1a21      	subs	r1, r4, r0
 800bb82:	4630      	mov	r0, r6
 800bb84:	f000 f884 	bl	800bc90 <_sbrk_r>
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d0cf      	beq.n	800bb2c <_malloc_r+0x48>
 800bb8c:	6025      	str	r5, [r4, #0]
 800bb8e:	e7db      	b.n	800bb48 <_malloc_r+0x64>
 800bb90:	20002f50 	.word	0x20002f50
 800bb94:	20002f54 	.word	0x20002f54

0800bb98 <iprintf>:
 800bb98:	b40f      	push	{r0, r1, r2, r3}
 800bb9a:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <iprintf+0x2c>)
 800bb9c:	b513      	push	{r0, r1, r4, lr}
 800bb9e:	681c      	ldr	r4, [r3, #0]
 800bba0:	b124      	cbz	r4, 800bbac <iprintf+0x14>
 800bba2:	69a3      	ldr	r3, [r4, #24]
 800bba4:	b913      	cbnz	r3, 800bbac <iprintf+0x14>
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 fc5e 	bl	800c468 <__sinit>
 800bbac:	ab05      	add	r3, sp, #20
 800bbae:	9a04      	ldr	r2, [sp, #16]
 800bbb0:	68a1      	ldr	r1, [r4, #8]
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fec3 	bl	800c940 <_vfiprintf_r>
 800bbba:	b002      	add	sp, #8
 800bbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc0:	b004      	add	sp, #16
 800bbc2:	4770      	bx	lr
 800bbc4:	200000ec 	.word	0x200000ec

0800bbc8 <_puts_r>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	460e      	mov	r6, r1
 800bbcc:	4605      	mov	r5, r0
 800bbce:	b118      	cbz	r0, 800bbd8 <_puts_r+0x10>
 800bbd0:	6983      	ldr	r3, [r0, #24]
 800bbd2:	b90b      	cbnz	r3, 800bbd8 <_puts_r+0x10>
 800bbd4:	f000 fc48 	bl	800c468 <__sinit>
 800bbd8:	69ab      	ldr	r3, [r5, #24]
 800bbda:	68ac      	ldr	r4, [r5, #8]
 800bbdc:	b913      	cbnz	r3, 800bbe4 <_puts_r+0x1c>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 fc42 	bl	800c468 <__sinit>
 800bbe4:	4b23      	ldr	r3, [pc, #140]	; (800bc74 <_puts_r+0xac>)
 800bbe6:	429c      	cmp	r4, r3
 800bbe8:	d117      	bne.n	800bc1a <_puts_r+0x52>
 800bbea:	686c      	ldr	r4, [r5, #4]
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	071b      	lsls	r3, r3, #28
 800bbf0:	d51d      	bpl.n	800bc2e <_puts_r+0x66>
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	b1db      	cbz	r3, 800bc2e <_puts_r+0x66>
 800bbf6:	3e01      	subs	r6, #1
 800bbf8:	68a3      	ldr	r3, [r4, #8]
 800bbfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	60a3      	str	r3, [r4, #8]
 800bc02:	b9e9      	cbnz	r1, 800bc40 <_puts_r+0x78>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	da2e      	bge.n	800bc66 <_puts_r+0x9e>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	210a      	movs	r1, #10
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f000 fa7b 	bl	800c108 <__swbuf_r>
 800bc12:	3001      	adds	r0, #1
 800bc14:	d011      	beq.n	800bc3a <_puts_r+0x72>
 800bc16:	200a      	movs	r0, #10
 800bc18:	e011      	b.n	800bc3e <_puts_r+0x76>
 800bc1a:	4b17      	ldr	r3, [pc, #92]	; (800bc78 <_puts_r+0xb0>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	d101      	bne.n	800bc24 <_puts_r+0x5c>
 800bc20:	68ac      	ldr	r4, [r5, #8]
 800bc22:	e7e3      	b.n	800bbec <_puts_r+0x24>
 800bc24:	4b15      	ldr	r3, [pc, #84]	; (800bc7c <_puts_r+0xb4>)
 800bc26:	429c      	cmp	r4, r3
 800bc28:	bf08      	it	eq
 800bc2a:	68ec      	ldreq	r4, [r5, #12]
 800bc2c:	e7de      	b.n	800bbec <_puts_r+0x24>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 fabb 	bl	800c1ac <__swsetup_r>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d0dd      	beq.n	800bbf6 <_puts_r+0x2e>
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	da04      	bge.n	800bc4e <_puts_r+0x86>
 800bc44:	69a2      	ldr	r2, [r4, #24]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	dc06      	bgt.n	800bc58 <_puts_r+0x90>
 800bc4a:	290a      	cmp	r1, #10
 800bc4c:	d004      	beq.n	800bc58 <_puts_r+0x90>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	6022      	str	r2, [r4, #0]
 800bc54:	7019      	strb	r1, [r3, #0]
 800bc56:	e7cf      	b.n	800bbf8 <_puts_r+0x30>
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 fa54 	bl	800c108 <__swbuf_r>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d1c9      	bne.n	800bbf8 <_puts_r+0x30>
 800bc64:	e7e9      	b.n	800bc3a <_puts_r+0x72>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	200a      	movs	r0, #10
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	6022      	str	r2, [r4, #0]
 800bc6e:	7018      	strb	r0, [r3, #0]
 800bc70:	e7e5      	b.n	800bc3e <_puts_r+0x76>
 800bc72:	bf00      	nop
 800bc74:	0800ee20 	.word	0x0800ee20
 800bc78:	0800ee40 	.word	0x0800ee40
 800bc7c:	0800ee00 	.word	0x0800ee00

0800bc80 <puts>:
 800bc80:	4b02      	ldr	r3, [pc, #8]	; (800bc8c <puts+0xc>)
 800bc82:	4601      	mov	r1, r0
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	f7ff bf9f 	b.w	800bbc8 <_puts_r>
 800bc8a:	bf00      	nop
 800bc8c:	200000ec 	.word	0x200000ec

0800bc90 <_sbrk_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4c06      	ldr	r4, [pc, #24]	; (800bcac <_sbrk_r+0x1c>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4605      	mov	r5, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	f7f5 fa46 	bl	800112c <_sbrk>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_sbrk_r+0x1a>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_sbrk_r+0x1a>
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	200031a0 	.word	0x200031a0

0800bcb0 <_strerror_r>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	288e      	cmp	r0, #142	; 0x8e
 800bcba:	f200 812f 	bhi.w	800bf1c <_strerror_r+0x26c>
 800bcbe:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bcc2:	0138      	.short	0x0138
 800bcc4:	0091008f 	.word	0x0091008f
 800bcc8:	00950093 	.word	0x00950093
 800bccc:	00990097 	.word	0x00990097
 800bcd0:	009d009b 	.word	0x009d009b
 800bcd4:	00a300a1 	.word	0x00a300a1
 800bcd8:	00a900a7 	.word	0x00a900a7
 800bcdc:	00ad00ab 	.word	0x00ad00ab
 800bce0:	00af012d 	.word	0x00af012d
 800bce4:	00b300b1 	.word	0x00b300b1
 800bce8:	00b700b5 	.word	0x00b700b5
 800bcec:	00bf00bd 	.word	0x00bf00bd
 800bcf0:	00c700c5 	.word	0x00c700c5
 800bcf4:	00cb00c9 	.word	0x00cb00c9
 800bcf8:	00d100cd 	.word	0x00d100cd
 800bcfc:	00d700d5 	.word	0x00d700d5
 800bd00:	00db00d9 	.word	0x00db00d9
 800bd04:	00df00dd 	.word	0x00df00dd
 800bd08:	00e300e1 	.word	0x00e300e1
 800bd0c:	012d012d 	.word	0x012d012d
 800bd10:	012d012d 	.word	0x012d012d
 800bd14:	012d012d 	.word	0x012d012d
 800bd18:	012d012d 	.word	0x012d012d
 800bd1c:	00eb00e7 	.word	0x00eb00e7
 800bd20:	012d012d 	.word	0x012d012d
 800bd24:	012d012d 	.word	0x012d012d
 800bd28:	012d012d 	.word	0x012d012d
 800bd2c:	012d012d 	.word	0x012d012d
 800bd30:	012d012d 	.word	0x012d012d
 800bd34:	012d012d 	.word	0x012d012d
 800bd38:	00ed012d 	.word	0x00ed012d
 800bd3c:	00ef0107 	.word	0x00ef0107
 800bd40:	012d00f1 	.word	0x012d00f1
 800bd44:	012d012d 	.word	0x012d012d
 800bd48:	012d00f3 	.word	0x012d00f3
 800bd4c:	012d012d 	.word	0x012d012d
 800bd50:	012d00f5 	.word	0x012d00f5
 800bd54:	00f9012d 	.word	0x00f9012d
 800bd58:	012d012d 	.word	0x012d012d
 800bd5c:	012d00fb 	.word	0x012d00fb
 800bd60:	012d012d 	.word	0x012d012d
 800bd64:	012d012d 	.word	0x012d012d
 800bd68:	012d012d 	.word	0x012d012d
 800bd6c:	012d012d 	.word	0x012d012d
 800bd70:	00fd012d 	.word	0x00fd012d
 800bd74:	00ff012d 	.word	0x00ff012d
 800bd78:	01030101 	.word	0x01030101
 800bd7c:	012d012d 	.word	0x012d012d
 800bd80:	012d0125 	.word	0x012d0125
 800bd84:	012d012d 	.word	0x012d012d
 800bd88:	012d012d 	.word	0x012d012d
 800bd8c:	012d012d 	.word	0x012d012d
 800bd90:	0113012d 	.word	0x0113012d
 800bd94:	01090105 	.word	0x01090105
 800bd98:	010d010b 	.word	0x010d010b
 800bd9c:	012d010f 	.word	0x012d010f
 800bda0:	01150111 	.word	0x01150111
 800bda4:	00e90119 	.word	0x00e90119
 800bda8:	012b00c1 	.word	0x012b00c1
 800bdac:	00cf00b9 	.word	0x00cf00b9
 800bdb0:	009f00bb 	.word	0x009f00bb
 800bdb4:	012900a5 	.word	0x012900a5
 800bdb8:	012d00f7 	.word	0x012d00f7
 800bdbc:	00c30117 	.word	0x00c30117
 800bdc0:	011b011d 	.word	0x011b011d
 800bdc4:	012d012d 	.word	0x012d012d
 800bdc8:	012d012d 	.word	0x012d012d
 800bdcc:	00d3012d 	.word	0x00d3012d
 800bdd0:	012d012d 	.word	0x012d012d
 800bdd4:	00e5012d 	.word	0x00e5012d
 800bdd8:	011f0127 	.word	0x011f0127
 800bddc:	01230121 	.word	0x01230121
 800bde0:	4855      	ldr	r0, [pc, #340]	; (800bf38 <_strerror_r+0x288>)
 800bde2:	bd10      	pop	{r4, pc}
 800bde4:	4855      	ldr	r0, [pc, #340]	; (800bf3c <_strerror_r+0x28c>)
 800bde6:	e7fc      	b.n	800bde2 <_strerror_r+0x132>
 800bde8:	4855      	ldr	r0, [pc, #340]	; (800bf40 <_strerror_r+0x290>)
 800bdea:	e7fa      	b.n	800bde2 <_strerror_r+0x132>
 800bdec:	4855      	ldr	r0, [pc, #340]	; (800bf44 <_strerror_r+0x294>)
 800bdee:	e7f8      	b.n	800bde2 <_strerror_r+0x132>
 800bdf0:	4855      	ldr	r0, [pc, #340]	; (800bf48 <_strerror_r+0x298>)
 800bdf2:	e7f6      	b.n	800bde2 <_strerror_r+0x132>
 800bdf4:	4855      	ldr	r0, [pc, #340]	; (800bf4c <_strerror_r+0x29c>)
 800bdf6:	e7f4      	b.n	800bde2 <_strerror_r+0x132>
 800bdf8:	4855      	ldr	r0, [pc, #340]	; (800bf50 <_strerror_r+0x2a0>)
 800bdfa:	e7f2      	b.n	800bde2 <_strerror_r+0x132>
 800bdfc:	4855      	ldr	r0, [pc, #340]	; (800bf54 <_strerror_r+0x2a4>)
 800bdfe:	e7f0      	b.n	800bde2 <_strerror_r+0x132>
 800be00:	4855      	ldr	r0, [pc, #340]	; (800bf58 <_strerror_r+0x2a8>)
 800be02:	e7ee      	b.n	800bde2 <_strerror_r+0x132>
 800be04:	4855      	ldr	r0, [pc, #340]	; (800bf5c <_strerror_r+0x2ac>)
 800be06:	e7ec      	b.n	800bde2 <_strerror_r+0x132>
 800be08:	4855      	ldr	r0, [pc, #340]	; (800bf60 <_strerror_r+0x2b0>)
 800be0a:	e7ea      	b.n	800bde2 <_strerror_r+0x132>
 800be0c:	4855      	ldr	r0, [pc, #340]	; (800bf64 <_strerror_r+0x2b4>)
 800be0e:	e7e8      	b.n	800bde2 <_strerror_r+0x132>
 800be10:	4855      	ldr	r0, [pc, #340]	; (800bf68 <_strerror_r+0x2b8>)
 800be12:	e7e6      	b.n	800bde2 <_strerror_r+0x132>
 800be14:	4855      	ldr	r0, [pc, #340]	; (800bf6c <_strerror_r+0x2bc>)
 800be16:	e7e4      	b.n	800bde2 <_strerror_r+0x132>
 800be18:	4855      	ldr	r0, [pc, #340]	; (800bf70 <_strerror_r+0x2c0>)
 800be1a:	e7e2      	b.n	800bde2 <_strerror_r+0x132>
 800be1c:	4855      	ldr	r0, [pc, #340]	; (800bf74 <_strerror_r+0x2c4>)
 800be1e:	e7e0      	b.n	800bde2 <_strerror_r+0x132>
 800be20:	4855      	ldr	r0, [pc, #340]	; (800bf78 <_strerror_r+0x2c8>)
 800be22:	e7de      	b.n	800bde2 <_strerror_r+0x132>
 800be24:	4855      	ldr	r0, [pc, #340]	; (800bf7c <_strerror_r+0x2cc>)
 800be26:	e7dc      	b.n	800bde2 <_strerror_r+0x132>
 800be28:	4855      	ldr	r0, [pc, #340]	; (800bf80 <_strerror_r+0x2d0>)
 800be2a:	e7da      	b.n	800bde2 <_strerror_r+0x132>
 800be2c:	4855      	ldr	r0, [pc, #340]	; (800bf84 <_strerror_r+0x2d4>)
 800be2e:	e7d8      	b.n	800bde2 <_strerror_r+0x132>
 800be30:	4855      	ldr	r0, [pc, #340]	; (800bf88 <_strerror_r+0x2d8>)
 800be32:	e7d6      	b.n	800bde2 <_strerror_r+0x132>
 800be34:	4855      	ldr	r0, [pc, #340]	; (800bf8c <_strerror_r+0x2dc>)
 800be36:	e7d4      	b.n	800bde2 <_strerror_r+0x132>
 800be38:	4855      	ldr	r0, [pc, #340]	; (800bf90 <_strerror_r+0x2e0>)
 800be3a:	e7d2      	b.n	800bde2 <_strerror_r+0x132>
 800be3c:	4855      	ldr	r0, [pc, #340]	; (800bf94 <_strerror_r+0x2e4>)
 800be3e:	e7d0      	b.n	800bde2 <_strerror_r+0x132>
 800be40:	4855      	ldr	r0, [pc, #340]	; (800bf98 <_strerror_r+0x2e8>)
 800be42:	e7ce      	b.n	800bde2 <_strerror_r+0x132>
 800be44:	4855      	ldr	r0, [pc, #340]	; (800bf9c <_strerror_r+0x2ec>)
 800be46:	e7cc      	b.n	800bde2 <_strerror_r+0x132>
 800be48:	4855      	ldr	r0, [pc, #340]	; (800bfa0 <_strerror_r+0x2f0>)
 800be4a:	e7ca      	b.n	800bde2 <_strerror_r+0x132>
 800be4c:	4855      	ldr	r0, [pc, #340]	; (800bfa4 <_strerror_r+0x2f4>)
 800be4e:	e7c8      	b.n	800bde2 <_strerror_r+0x132>
 800be50:	4855      	ldr	r0, [pc, #340]	; (800bfa8 <_strerror_r+0x2f8>)
 800be52:	e7c6      	b.n	800bde2 <_strerror_r+0x132>
 800be54:	4855      	ldr	r0, [pc, #340]	; (800bfac <_strerror_r+0x2fc>)
 800be56:	e7c4      	b.n	800bde2 <_strerror_r+0x132>
 800be58:	4855      	ldr	r0, [pc, #340]	; (800bfb0 <_strerror_r+0x300>)
 800be5a:	e7c2      	b.n	800bde2 <_strerror_r+0x132>
 800be5c:	4855      	ldr	r0, [pc, #340]	; (800bfb4 <_strerror_r+0x304>)
 800be5e:	e7c0      	b.n	800bde2 <_strerror_r+0x132>
 800be60:	4855      	ldr	r0, [pc, #340]	; (800bfb8 <_strerror_r+0x308>)
 800be62:	e7be      	b.n	800bde2 <_strerror_r+0x132>
 800be64:	4855      	ldr	r0, [pc, #340]	; (800bfbc <_strerror_r+0x30c>)
 800be66:	e7bc      	b.n	800bde2 <_strerror_r+0x132>
 800be68:	4855      	ldr	r0, [pc, #340]	; (800bfc0 <_strerror_r+0x310>)
 800be6a:	e7ba      	b.n	800bde2 <_strerror_r+0x132>
 800be6c:	4855      	ldr	r0, [pc, #340]	; (800bfc4 <_strerror_r+0x314>)
 800be6e:	e7b8      	b.n	800bde2 <_strerror_r+0x132>
 800be70:	4855      	ldr	r0, [pc, #340]	; (800bfc8 <_strerror_r+0x318>)
 800be72:	e7b6      	b.n	800bde2 <_strerror_r+0x132>
 800be74:	4855      	ldr	r0, [pc, #340]	; (800bfcc <_strerror_r+0x31c>)
 800be76:	e7b4      	b.n	800bde2 <_strerror_r+0x132>
 800be78:	4855      	ldr	r0, [pc, #340]	; (800bfd0 <_strerror_r+0x320>)
 800be7a:	e7b2      	b.n	800bde2 <_strerror_r+0x132>
 800be7c:	4855      	ldr	r0, [pc, #340]	; (800bfd4 <_strerror_r+0x324>)
 800be7e:	e7b0      	b.n	800bde2 <_strerror_r+0x132>
 800be80:	4855      	ldr	r0, [pc, #340]	; (800bfd8 <_strerror_r+0x328>)
 800be82:	e7ae      	b.n	800bde2 <_strerror_r+0x132>
 800be84:	4855      	ldr	r0, [pc, #340]	; (800bfdc <_strerror_r+0x32c>)
 800be86:	e7ac      	b.n	800bde2 <_strerror_r+0x132>
 800be88:	4855      	ldr	r0, [pc, #340]	; (800bfe0 <_strerror_r+0x330>)
 800be8a:	e7aa      	b.n	800bde2 <_strerror_r+0x132>
 800be8c:	4855      	ldr	r0, [pc, #340]	; (800bfe4 <_strerror_r+0x334>)
 800be8e:	e7a8      	b.n	800bde2 <_strerror_r+0x132>
 800be90:	4855      	ldr	r0, [pc, #340]	; (800bfe8 <_strerror_r+0x338>)
 800be92:	e7a6      	b.n	800bde2 <_strerror_r+0x132>
 800be94:	4855      	ldr	r0, [pc, #340]	; (800bfec <_strerror_r+0x33c>)
 800be96:	e7a4      	b.n	800bde2 <_strerror_r+0x132>
 800be98:	4855      	ldr	r0, [pc, #340]	; (800bff0 <_strerror_r+0x340>)
 800be9a:	e7a2      	b.n	800bde2 <_strerror_r+0x132>
 800be9c:	4855      	ldr	r0, [pc, #340]	; (800bff4 <_strerror_r+0x344>)
 800be9e:	e7a0      	b.n	800bde2 <_strerror_r+0x132>
 800bea0:	4855      	ldr	r0, [pc, #340]	; (800bff8 <_strerror_r+0x348>)
 800bea2:	e79e      	b.n	800bde2 <_strerror_r+0x132>
 800bea4:	4855      	ldr	r0, [pc, #340]	; (800bffc <_strerror_r+0x34c>)
 800bea6:	e79c      	b.n	800bde2 <_strerror_r+0x132>
 800bea8:	4855      	ldr	r0, [pc, #340]	; (800c000 <_strerror_r+0x350>)
 800beaa:	e79a      	b.n	800bde2 <_strerror_r+0x132>
 800beac:	4855      	ldr	r0, [pc, #340]	; (800c004 <_strerror_r+0x354>)
 800beae:	e798      	b.n	800bde2 <_strerror_r+0x132>
 800beb0:	4855      	ldr	r0, [pc, #340]	; (800c008 <_strerror_r+0x358>)
 800beb2:	e796      	b.n	800bde2 <_strerror_r+0x132>
 800beb4:	4855      	ldr	r0, [pc, #340]	; (800c00c <_strerror_r+0x35c>)
 800beb6:	e794      	b.n	800bde2 <_strerror_r+0x132>
 800beb8:	4855      	ldr	r0, [pc, #340]	; (800c010 <_strerror_r+0x360>)
 800beba:	e792      	b.n	800bde2 <_strerror_r+0x132>
 800bebc:	4855      	ldr	r0, [pc, #340]	; (800c014 <_strerror_r+0x364>)
 800bebe:	e790      	b.n	800bde2 <_strerror_r+0x132>
 800bec0:	4855      	ldr	r0, [pc, #340]	; (800c018 <_strerror_r+0x368>)
 800bec2:	e78e      	b.n	800bde2 <_strerror_r+0x132>
 800bec4:	4855      	ldr	r0, [pc, #340]	; (800c01c <_strerror_r+0x36c>)
 800bec6:	e78c      	b.n	800bde2 <_strerror_r+0x132>
 800bec8:	4855      	ldr	r0, [pc, #340]	; (800c020 <_strerror_r+0x370>)
 800beca:	e78a      	b.n	800bde2 <_strerror_r+0x132>
 800becc:	4855      	ldr	r0, [pc, #340]	; (800c024 <_strerror_r+0x374>)
 800bece:	e788      	b.n	800bde2 <_strerror_r+0x132>
 800bed0:	4855      	ldr	r0, [pc, #340]	; (800c028 <_strerror_r+0x378>)
 800bed2:	e786      	b.n	800bde2 <_strerror_r+0x132>
 800bed4:	4855      	ldr	r0, [pc, #340]	; (800c02c <_strerror_r+0x37c>)
 800bed6:	e784      	b.n	800bde2 <_strerror_r+0x132>
 800bed8:	4855      	ldr	r0, [pc, #340]	; (800c030 <_strerror_r+0x380>)
 800beda:	e782      	b.n	800bde2 <_strerror_r+0x132>
 800bedc:	4855      	ldr	r0, [pc, #340]	; (800c034 <_strerror_r+0x384>)
 800bede:	e780      	b.n	800bde2 <_strerror_r+0x132>
 800bee0:	4855      	ldr	r0, [pc, #340]	; (800c038 <_strerror_r+0x388>)
 800bee2:	e77e      	b.n	800bde2 <_strerror_r+0x132>
 800bee4:	4855      	ldr	r0, [pc, #340]	; (800c03c <_strerror_r+0x38c>)
 800bee6:	e77c      	b.n	800bde2 <_strerror_r+0x132>
 800bee8:	4855      	ldr	r0, [pc, #340]	; (800c040 <_strerror_r+0x390>)
 800beea:	e77a      	b.n	800bde2 <_strerror_r+0x132>
 800beec:	4855      	ldr	r0, [pc, #340]	; (800c044 <_strerror_r+0x394>)
 800beee:	e778      	b.n	800bde2 <_strerror_r+0x132>
 800bef0:	4855      	ldr	r0, [pc, #340]	; (800c048 <_strerror_r+0x398>)
 800bef2:	e776      	b.n	800bde2 <_strerror_r+0x132>
 800bef4:	4855      	ldr	r0, [pc, #340]	; (800c04c <_strerror_r+0x39c>)
 800bef6:	e774      	b.n	800bde2 <_strerror_r+0x132>
 800bef8:	4855      	ldr	r0, [pc, #340]	; (800c050 <_strerror_r+0x3a0>)
 800befa:	e772      	b.n	800bde2 <_strerror_r+0x132>
 800befc:	4855      	ldr	r0, [pc, #340]	; (800c054 <_strerror_r+0x3a4>)
 800befe:	e770      	b.n	800bde2 <_strerror_r+0x132>
 800bf00:	4855      	ldr	r0, [pc, #340]	; (800c058 <_strerror_r+0x3a8>)
 800bf02:	e76e      	b.n	800bde2 <_strerror_r+0x132>
 800bf04:	4855      	ldr	r0, [pc, #340]	; (800c05c <_strerror_r+0x3ac>)
 800bf06:	e76c      	b.n	800bde2 <_strerror_r+0x132>
 800bf08:	4855      	ldr	r0, [pc, #340]	; (800c060 <_strerror_r+0x3b0>)
 800bf0a:	e76a      	b.n	800bde2 <_strerror_r+0x132>
 800bf0c:	4855      	ldr	r0, [pc, #340]	; (800c064 <_strerror_r+0x3b4>)
 800bf0e:	e768      	b.n	800bde2 <_strerror_r+0x132>
 800bf10:	4855      	ldr	r0, [pc, #340]	; (800c068 <_strerror_r+0x3b8>)
 800bf12:	e766      	b.n	800bde2 <_strerror_r+0x132>
 800bf14:	4855      	ldr	r0, [pc, #340]	; (800c06c <_strerror_r+0x3bc>)
 800bf16:	e764      	b.n	800bde2 <_strerror_r+0x132>
 800bf18:	4855      	ldr	r0, [pc, #340]	; (800c070 <_strerror_r+0x3c0>)
 800bf1a:	e762      	b.n	800bde2 <_strerror_r+0x132>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bf14      	ite	ne
 800bf20:	461a      	movne	r2, r3
 800bf22:	4622      	moveq	r2, r4
 800bf24:	f000 f8b4 	bl	800c090 <_user_strerror>
 800bf28:	4b52      	ldr	r3, [pc, #328]	; (800c074 <_strerror_r+0x3c4>)
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	bf08      	it	eq
 800bf2e:	4618      	moveq	r0, r3
 800bf30:	e757      	b.n	800bde2 <_strerror_r+0x132>
 800bf32:	4851      	ldr	r0, [pc, #324]	; (800c078 <_strerror_r+0x3c8>)
 800bf34:	e755      	b.n	800bde2 <_strerror_r+0x132>
 800bf36:	bf00      	nop
 800bf38:	0800e770 	.word	0x0800e770
 800bf3c:	0800e77a 	.word	0x0800e77a
 800bf40:	0800e794 	.word	0x0800e794
 800bf44:	0800e7a4 	.word	0x0800e7a4
 800bf48:	0800e7bc 	.word	0x0800e7bc
 800bf4c:	0800e7c6 	.word	0x0800e7c6
 800bf50:	0800e7e0 	.word	0x0800e7e0
 800bf54:	0800e7f2 	.word	0x0800e7f2
 800bf58:	0800e804 	.word	0x0800e804
 800bf5c:	0800e81d 	.word	0x0800e81d
 800bf60:	0800e82d 	.word	0x0800e82d
 800bf64:	0800e839 	.word	0x0800e839
 800bf68:	0800e856 	.word	0x0800e856
 800bf6c:	0800e868 	.word	0x0800e868
 800bf70:	0800e879 	.word	0x0800e879
 800bf74:	0800e88b 	.word	0x0800e88b
 800bf78:	0800e897 	.word	0x0800e897
 800bf7c:	0800e8af 	.word	0x0800e8af
 800bf80:	0800e8bb 	.word	0x0800e8bb
 800bf84:	0800e8cd 	.word	0x0800e8cd
 800bf88:	0800e8dc 	.word	0x0800e8dc
 800bf8c:	0800e8ec 	.word	0x0800e8ec
 800bf90:	0800e8f9 	.word	0x0800e8f9
 800bf94:	0800e918 	.word	0x0800e918
 800bf98:	0800e927 	.word	0x0800e927
 800bf9c:	0800e938 	.word	0x0800e938
 800bfa0:	0800e95c 	.word	0x0800e95c
 800bfa4:	0800e97a 	.word	0x0800e97a
 800bfa8:	0800e998 	.word	0x0800e998
 800bfac:	0800e9b8 	.word	0x0800e9b8
 800bfb0:	0800e9cf 	.word	0x0800e9cf
 800bfb4:	0800e9de 	.word	0x0800e9de
 800bfb8:	0800e9ed 	.word	0x0800e9ed
 800bfbc:	0800ea01 	.word	0x0800ea01
 800bfc0:	0800ea19 	.word	0x0800ea19
 800bfc4:	0800ea27 	.word	0x0800ea27
 800bfc8:	0800ea34 	.word	0x0800ea34
 800bfcc:	0800ea4a 	.word	0x0800ea4a
 800bfd0:	0800ea59 	.word	0x0800ea59
 800bfd4:	0800ea65 	.word	0x0800ea65
 800bfd8:	0800ea94 	.word	0x0800ea94
 800bfdc:	0800eaa5 	.word	0x0800eaa5
 800bfe0:	0800eac0 	.word	0x0800eac0
 800bfe4:	0800ead3 	.word	0x0800ead3
 800bfe8:	0800eae9 	.word	0x0800eae9
 800bfec:	0800eaf2 	.word	0x0800eaf2
 800bff0:	0800eb09 	.word	0x0800eb09
 800bff4:	0800eb11 	.word	0x0800eb11
 800bff8:	0800eb1e 	.word	0x0800eb1e
 800bffc:	0800eb33 	.word	0x0800eb33
 800c000:	0800eb47 	.word	0x0800eb47
 800c004:	0800eb5f 	.word	0x0800eb5f
 800c008:	0800eb6e 	.word	0x0800eb6e
 800c00c:	0800eb7f 	.word	0x0800eb7f
 800c010:	0800eb92 	.word	0x0800eb92
 800c014:	0800eb9e 	.word	0x0800eb9e
 800c018:	0800ebb7 	.word	0x0800ebb7
 800c01c:	0800ebcb 	.word	0x0800ebcb
 800c020:	0800ebe6 	.word	0x0800ebe6
 800c024:	0800ebfe 	.word	0x0800ebfe
 800c028:	0800ec18 	.word	0x0800ec18
 800c02c:	0800ec20 	.word	0x0800ec20
 800c030:	0800ec50 	.word	0x0800ec50
 800c034:	0800ec6f 	.word	0x0800ec6f
 800c038:	0800ec8e 	.word	0x0800ec8e
 800c03c:	0800eca5 	.word	0x0800eca5
 800c040:	0800ecb8 	.word	0x0800ecb8
 800c044:	0800ecd1 	.word	0x0800ecd1
 800c048:	0800ece8 	.word	0x0800ece8
 800c04c:	0800ecfe 	.word	0x0800ecfe
 800c050:	0800ed1f 	.word	0x0800ed1f
 800c054:	0800ed37 	.word	0x0800ed37
 800c058:	0800ed53 	.word	0x0800ed53
 800c05c:	0800ed66 	.word	0x0800ed66
 800c060:	0800ed7c 	.word	0x0800ed7c
 800c064:	0800ed90 	.word	0x0800ed90
 800c068:	0800edb2 	.word	0x0800edb2
 800c06c:	0800edd8 	.word	0x0800edd8
 800c070:	0800ede9 	.word	0x0800ede9
 800c074:	0800ee65 	.word	0x0800ee65
 800c078:	0800e768 	.word	0x0800e768

0800c07c <strerror>:
 800c07c:	4601      	mov	r1, r0
 800c07e:	4803      	ldr	r0, [pc, #12]	; (800c08c <strerror+0x10>)
 800c080:	2300      	movs	r3, #0
 800c082:	461a      	mov	r2, r3
 800c084:	6800      	ldr	r0, [r0, #0]
 800c086:	f7ff be13 	b.w	800bcb0 <_strerror_r>
 800c08a:	bf00      	nop
 800c08c:	200000ec 	.word	0x200000ec

0800c090 <_user_strerror>:
 800c090:	2000      	movs	r0, #0
 800c092:	4770      	bx	lr

0800c094 <_vsniprintf_r>:
 800c094:	b530      	push	{r4, r5, lr}
 800c096:	1e14      	subs	r4, r2, #0
 800c098:	4605      	mov	r5, r0
 800c09a:	b09b      	sub	sp, #108	; 0x6c
 800c09c:	4618      	mov	r0, r3
 800c09e:	da05      	bge.n	800c0ac <_vsniprintf_r+0x18>
 800c0a0:	238b      	movs	r3, #139	; 0x8b
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	b01b      	add	sp, #108	; 0x6c
 800c0aa:	bd30      	pop	{r4, r5, pc}
 800c0ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c0b4:	bf14      	ite	ne
 800c0b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c0ba:	4623      	moveq	r3, r4
 800c0bc:	9302      	str	r3, [sp, #8]
 800c0be:	9305      	str	r3, [sp, #20]
 800c0c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0c4:	9100      	str	r1, [sp, #0]
 800c0c6:	9104      	str	r1, [sp, #16]
 800c0c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0d0:	4669      	mov	r1, sp
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 fb12 	bl	800c6fc <_svfiprintf_r>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	bfbc      	itt	lt
 800c0dc:	238b      	movlt	r3, #139	; 0x8b
 800c0de:	602b      	strlt	r3, [r5, #0]
 800c0e0:	2c00      	cmp	r4, #0
 800c0e2:	d0e1      	beq.n	800c0a8 <_vsniprintf_r+0x14>
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	e7dd      	b.n	800c0a8 <_vsniprintf_r+0x14>

0800c0ec <vsniprintf>:
 800c0ec:	b507      	push	{r0, r1, r2, lr}
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	460a      	mov	r2, r1
 800c0f4:	4601      	mov	r1, r0
 800c0f6:	4803      	ldr	r0, [pc, #12]	; (800c104 <vsniprintf+0x18>)
 800c0f8:	6800      	ldr	r0, [r0, #0]
 800c0fa:	f7ff ffcb 	bl	800c094 <_vsniprintf_r>
 800c0fe:	b003      	add	sp, #12
 800c100:	f85d fb04 	ldr.w	pc, [sp], #4
 800c104:	200000ec 	.word	0x200000ec

0800c108 <__swbuf_r>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	460e      	mov	r6, r1
 800c10c:	4614      	mov	r4, r2
 800c10e:	4605      	mov	r5, r0
 800c110:	b118      	cbz	r0, 800c11a <__swbuf_r+0x12>
 800c112:	6983      	ldr	r3, [r0, #24]
 800c114:	b90b      	cbnz	r3, 800c11a <__swbuf_r+0x12>
 800c116:	f000 f9a7 	bl	800c468 <__sinit>
 800c11a:	4b21      	ldr	r3, [pc, #132]	; (800c1a0 <__swbuf_r+0x98>)
 800c11c:	429c      	cmp	r4, r3
 800c11e:	d12a      	bne.n	800c176 <__swbuf_r+0x6e>
 800c120:	686c      	ldr	r4, [r5, #4]
 800c122:	69a3      	ldr	r3, [r4, #24]
 800c124:	60a3      	str	r3, [r4, #8]
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	071a      	lsls	r2, r3, #28
 800c12a:	d52e      	bpl.n	800c18a <__swbuf_r+0x82>
 800c12c:	6923      	ldr	r3, [r4, #16]
 800c12e:	b363      	cbz	r3, 800c18a <__swbuf_r+0x82>
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	6820      	ldr	r0, [r4, #0]
 800c134:	1ac0      	subs	r0, r0, r3
 800c136:	6963      	ldr	r3, [r4, #20]
 800c138:	b2f6      	uxtb	r6, r6
 800c13a:	4283      	cmp	r3, r0
 800c13c:	4637      	mov	r7, r6
 800c13e:	dc04      	bgt.n	800c14a <__swbuf_r+0x42>
 800c140:	4621      	mov	r1, r4
 800c142:	4628      	mov	r0, r5
 800c144:	f000 f926 	bl	800c394 <_fflush_r>
 800c148:	bb28      	cbnz	r0, 800c196 <__swbuf_r+0x8e>
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	60a3      	str	r3, [r4, #8]
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	6022      	str	r2, [r4, #0]
 800c156:	701e      	strb	r6, [r3, #0]
 800c158:	6963      	ldr	r3, [r4, #20]
 800c15a:	3001      	adds	r0, #1
 800c15c:	4283      	cmp	r3, r0
 800c15e:	d004      	beq.n	800c16a <__swbuf_r+0x62>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	07db      	lsls	r3, r3, #31
 800c164:	d519      	bpl.n	800c19a <__swbuf_r+0x92>
 800c166:	2e0a      	cmp	r6, #10
 800c168:	d117      	bne.n	800c19a <__swbuf_r+0x92>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 f911 	bl	800c394 <_fflush_r>
 800c172:	b190      	cbz	r0, 800c19a <__swbuf_r+0x92>
 800c174:	e00f      	b.n	800c196 <__swbuf_r+0x8e>
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <__swbuf_r+0x9c>)
 800c178:	429c      	cmp	r4, r3
 800c17a:	d101      	bne.n	800c180 <__swbuf_r+0x78>
 800c17c:	68ac      	ldr	r4, [r5, #8]
 800c17e:	e7d0      	b.n	800c122 <__swbuf_r+0x1a>
 800c180:	4b09      	ldr	r3, [pc, #36]	; (800c1a8 <__swbuf_r+0xa0>)
 800c182:	429c      	cmp	r4, r3
 800c184:	bf08      	it	eq
 800c186:	68ec      	ldreq	r4, [r5, #12]
 800c188:	e7cb      	b.n	800c122 <__swbuf_r+0x1a>
 800c18a:	4621      	mov	r1, r4
 800c18c:	4628      	mov	r0, r5
 800c18e:	f000 f80d 	bl	800c1ac <__swsetup_r>
 800c192:	2800      	cmp	r0, #0
 800c194:	d0cc      	beq.n	800c130 <__swbuf_r+0x28>
 800c196:	f04f 37ff 	mov.w	r7, #4294967295
 800c19a:	4638      	mov	r0, r7
 800c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	0800ee20 	.word	0x0800ee20
 800c1a4:	0800ee40 	.word	0x0800ee40
 800c1a8:	0800ee00 	.word	0x0800ee00

0800c1ac <__swsetup_r>:
 800c1ac:	4b32      	ldr	r3, [pc, #200]	; (800c278 <__swsetup_r+0xcc>)
 800c1ae:	b570      	push	{r4, r5, r6, lr}
 800c1b0:	681d      	ldr	r5, [r3, #0]
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	b125      	cbz	r5, 800c1c2 <__swsetup_r+0x16>
 800c1b8:	69ab      	ldr	r3, [r5, #24]
 800c1ba:	b913      	cbnz	r3, 800c1c2 <__swsetup_r+0x16>
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f953 	bl	800c468 <__sinit>
 800c1c2:	4b2e      	ldr	r3, [pc, #184]	; (800c27c <__swsetup_r+0xd0>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d10f      	bne.n	800c1e8 <__swsetup_r+0x3c>
 800c1c8:	686c      	ldr	r4, [r5, #4]
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	0715      	lsls	r5, r2, #28
 800c1d2:	d42c      	bmi.n	800c22e <__swsetup_r+0x82>
 800c1d4:	06d0      	lsls	r0, r2, #27
 800c1d6:	d411      	bmi.n	800c1fc <__swsetup_r+0x50>
 800c1d8:	2209      	movs	r2, #9
 800c1da:	6032      	str	r2, [r6, #0]
 800c1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e6:	e03e      	b.n	800c266 <__swsetup_r+0xba>
 800c1e8:	4b25      	ldr	r3, [pc, #148]	; (800c280 <__swsetup_r+0xd4>)
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	d101      	bne.n	800c1f2 <__swsetup_r+0x46>
 800c1ee:	68ac      	ldr	r4, [r5, #8]
 800c1f0:	e7eb      	b.n	800c1ca <__swsetup_r+0x1e>
 800c1f2:	4b24      	ldr	r3, [pc, #144]	; (800c284 <__swsetup_r+0xd8>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	bf08      	it	eq
 800c1f8:	68ec      	ldreq	r4, [r5, #12]
 800c1fa:	e7e6      	b.n	800c1ca <__swsetup_r+0x1e>
 800c1fc:	0751      	lsls	r1, r2, #29
 800c1fe:	d512      	bpl.n	800c226 <__swsetup_r+0x7a>
 800c200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c202:	b141      	cbz	r1, 800c216 <__swsetup_r+0x6a>
 800c204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c208:	4299      	cmp	r1, r3
 800c20a:	d002      	beq.n	800c212 <__swsetup_r+0x66>
 800c20c:	4630      	mov	r0, r6
 800c20e:	f7ff fc1b 	bl	800ba48 <_free_r>
 800c212:	2300      	movs	r3, #0
 800c214:	6363      	str	r3, [r4, #52]	; 0x34
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	2300      	movs	r3, #0
 800c220:	6063      	str	r3, [r4, #4]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f043 0308 	orr.w	r3, r3, #8
 800c22c:	81a3      	strh	r3, [r4, #12]
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	b94b      	cbnz	r3, 800c246 <__swsetup_r+0x9a>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23c:	d003      	beq.n	800c246 <__swsetup_r+0x9a>
 800c23e:	4621      	mov	r1, r4
 800c240:	4630      	mov	r0, r6
 800c242:	f000 f9bf 	bl	800c5c4 <__smakebuf_r>
 800c246:	89a2      	ldrh	r2, [r4, #12]
 800c248:	f012 0301 	ands.w	r3, r2, #1
 800c24c:	d00c      	beq.n	800c268 <__swsetup_r+0xbc>
 800c24e:	2300      	movs	r3, #0
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	6963      	ldr	r3, [r4, #20]
 800c254:	425b      	negs	r3, r3
 800c256:	61a3      	str	r3, [r4, #24]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	b953      	cbnz	r3, 800c272 <__swsetup_r+0xc6>
 800c25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c260:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c264:	d1ba      	bne.n	800c1dc <__swsetup_r+0x30>
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	0792      	lsls	r2, r2, #30
 800c26a:	bf58      	it	pl
 800c26c:	6963      	ldrpl	r3, [r4, #20]
 800c26e:	60a3      	str	r3, [r4, #8]
 800c270:	e7f2      	b.n	800c258 <__swsetup_r+0xac>
 800c272:	2000      	movs	r0, #0
 800c274:	e7f7      	b.n	800c266 <__swsetup_r+0xba>
 800c276:	bf00      	nop
 800c278:	200000ec 	.word	0x200000ec
 800c27c:	0800ee20 	.word	0x0800ee20
 800c280:	0800ee40 	.word	0x0800ee40
 800c284:	0800ee00 	.word	0x0800ee00

0800c288 <__sflush_r>:
 800c288:	898a      	ldrh	r2, [r1, #12]
 800c28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	4605      	mov	r5, r0
 800c290:	0710      	lsls	r0, r2, #28
 800c292:	460c      	mov	r4, r1
 800c294:	d458      	bmi.n	800c348 <__sflush_r+0xc0>
 800c296:	684b      	ldr	r3, [r1, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dc05      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dc02      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	d0f9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2b4:	682f      	ldr	r7, [r5, #0]
 800c2b6:	6a21      	ldr	r1, [r4, #32]
 800c2b8:	602b      	str	r3, [r5, #0]
 800c2ba:	d032      	beq.n	800c322 <__sflush_r+0x9a>
 800c2bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	075a      	lsls	r2, r3, #29
 800c2c2:	d505      	bpl.n	800c2d0 <__sflush_r+0x48>
 800c2c4:	6863      	ldr	r3, [r4, #4]
 800c2c6:	1ac0      	subs	r0, r0, r3
 800c2c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ca:	b10b      	cbz	r3, 800c2d0 <__sflush_r+0x48>
 800c2cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2ce:	1ac0      	subs	r0, r0, r3
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d6:	6a21      	ldr	r1, [r4, #32]
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b0      	blx	r6
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	d106      	bne.n	800c2f0 <__sflush_r+0x68>
 800c2e2:	6829      	ldr	r1, [r5, #0]
 800c2e4:	291d      	cmp	r1, #29
 800c2e6:	d848      	bhi.n	800c37a <__sflush_r+0xf2>
 800c2e8:	4a29      	ldr	r2, [pc, #164]	; (800c390 <__sflush_r+0x108>)
 800c2ea:	40ca      	lsrs	r2, r1
 800c2ec:	07d6      	lsls	r6, r2, #31
 800c2ee:	d544      	bpl.n	800c37a <__sflush_r+0xf2>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	6062      	str	r2, [r4, #4]
 800c2f4:	04d9      	lsls	r1, r3, #19
 800c2f6:	6922      	ldr	r2, [r4, #16]
 800c2f8:	6022      	str	r2, [r4, #0]
 800c2fa:	d504      	bpl.n	800c306 <__sflush_r+0x7e>
 800c2fc:	1c42      	adds	r2, r0, #1
 800c2fe:	d101      	bne.n	800c304 <__sflush_r+0x7c>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b903      	cbnz	r3, 800c306 <__sflush_r+0x7e>
 800c304:	6560      	str	r0, [r4, #84]	; 0x54
 800c306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c308:	602f      	str	r7, [r5, #0]
 800c30a:	2900      	cmp	r1, #0
 800c30c:	d0c9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c30e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c312:	4299      	cmp	r1, r3
 800c314:	d002      	beq.n	800c31c <__sflush_r+0x94>
 800c316:	4628      	mov	r0, r5
 800c318:	f7ff fb96 	bl	800ba48 <_free_r>
 800c31c:	2000      	movs	r0, #0
 800c31e:	6360      	str	r0, [r4, #52]	; 0x34
 800c320:	e7c0      	b.n	800c2a4 <__sflush_r+0x1c>
 800c322:	2301      	movs	r3, #1
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	1c41      	adds	r1, r0, #1
 800c32a:	d1c8      	bne.n	800c2be <__sflush_r+0x36>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0c5      	beq.n	800c2be <__sflush_r+0x36>
 800c332:	2b1d      	cmp	r3, #29
 800c334:	d001      	beq.n	800c33a <__sflush_r+0xb2>
 800c336:	2b16      	cmp	r3, #22
 800c338:	d101      	bne.n	800c33e <__sflush_r+0xb6>
 800c33a:	602f      	str	r7, [r5, #0]
 800c33c:	e7b1      	b.n	800c2a2 <__sflush_r+0x1a>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	e7ad      	b.n	800c2a4 <__sflush_r+0x1c>
 800c348:	690f      	ldr	r7, [r1, #16]
 800c34a:	2f00      	cmp	r7, #0
 800c34c:	d0a9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c34e:	0793      	lsls	r3, r2, #30
 800c350:	680e      	ldr	r6, [r1, #0]
 800c352:	bf08      	it	eq
 800c354:	694b      	ldreq	r3, [r1, #20]
 800c356:	600f      	str	r7, [r1, #0]
 800c358:	bf18      	it	ne
 800c35a:	2300      	movne	r3, #0
 800c35c:	eba6 0807 	sub.w	r8, r6, r7
 800c360:	608b      	str	r3, [r1, #8]
 800c362:	f1b8 0f00 	cmp.w	r8, #0
 800c366:	dd9c      	ble.n	800c2a2 <__sflush_r+0x1a>
 800c368:	4643      	mov	r3, r8
 800c36a:	463a      	mov	r2, r7
 800c36c:	6a21      	ldr	r1, [r4, #32]
 800c36e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	2800      	cmp	r0, #0
 800c376:	dc06      	bgt.n	800c386 <__sflush_r+0xfe>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e78e      	b.n	800c2a4 <__sflush_r+0x1c>
 800c386:	4407      	add	r7, r0
 800c388:	eba8 0800 	sub.w	r8, r8, r0
 800c38c:	e7e9      	b.n	800c362 <__sflush_r+0xda>
 800c38e:	bf00      	nop
 800c390:	20400001 	.word	0x20400001

0800c394 <_fflush_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	690b      	ldr	r3, [r1, #16]
 800c398:	4605      	mov	r5, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	b1db      	cbz	r3, 800c3d6 <_fflush_r+0x42>
 800c39e:	b118      	cbz	r0, 800c3a8 <_fflush_r+0x14>
 800c3a0:	6983      	ldr	r3, [r0, #24]
 800c3a2:	b90b      	cbnz	r3, 800c3a8 <_fflush_r+0x14>
 800c3a4:	f000 f860 	bl	800c468 <__sinit>
 800c3a8:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <_fflush_r+0x48>)
 800c3aa:	429c      	cmp	r4, r3
 800c3ac:	d109      	bne.n	800c3c2 <_fflush_r+0x2e>
 800c3ae:	686c      	ldr	r4, [r5, #4]
 800c3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b4:	b17b      	cbz	r3, 800c3d6 <_fflush_r+0x42>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3be:	f7ff bf63 	b.w	800c288 <__sflush_r>
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <_fflush_r+0x4c>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d101      	bne.n	800c3cc <_fflush_r+0x38>
 800c3c8:	68ac      	ldr	r4, [r5, #8]
 800c3ca:	e7f1      	b.n	800c3b0 <_fflush_r+0x1c>
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_fflush_r+0x50>)
 800c3ce:	429c      	cmp	r4, r3
 800c3d0:	bf08      	it	eq
 800c3d2:	68ec      	ldreq	r4, [r5, #12]
 800c3d4:	e7ec      	b.n	800c3b0 <_fflush_r+0x1c>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	bd38      	pop	{r3, r4, r5, pc}
 800c3da:	bf00      	nop
 800c3dc:	0800ee20 	.word	0x0800ee20
 800c3e0:	0800ee40 	.word	0x0800ee40
 800c3e4:	0800ee00 	.word	0x0800ee00

0800c3e8 <std>:
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c3f2:	6083      	str	r3, [r0, #8]
 800c3f4:	8181      	strh	r1, [r0, #12]
 800c3f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c3f8:	81c2      	strh	r2, [r0, #14]
 800c3fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3fe:	6183      	str	r3, [r0, #24]
 800c400:	4619      	mov	r1, r3
 800c402:	2208      	movs	r2, #8
 800c404:	305c      	adds	r0, #92	; 0x5c
 800c406:	f7ff fb16 	bl	800ba36 <memset>
 800c40a:	4b05      	ldr	r3, [pc, #20]	; (800c420 <std+0x38>)
 800c40c:	6263      	str	r3, [r4, #36]	; 0x24
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <std+0x3c>)
 800c410:	62a3      	str	r3, [r4, #40]	; 0x28
 800c412:	4b05      	ldr	r3, [pc, #20]	; (800c428 <std+0x40>)
 800c414:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c416:	4b05      	ldr	r3, [pc, #20]	; (800c42c <std+0x44>)
 800c418:	6224      	str	r4, [r4, #32]
 800c41a:	6323      	str	r3, [r4, #48]	; 0x30
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	bf00      	nop
 800c420:	0800ce7d 	.word	0x0800ce7d
 800c424:	0800ce9f 	.word	0x0800ce9f
 800c428:	0800ced7 	.word	0x0800ced7
 800c42c:	0800cefb 	.word	0x0800cefb

0800c430 <_cleanup_r>:
 800c430:	4901      	ldr	r1, [pc, #4]	; (800c438 <_cleanup_r+0x8>)
 800c432:	f000 b885 	b.w	800c540 <_fwalk_reent>
 800c436:	bf00      	nop
 800c438:	0800c395 	.word	0x0800c395

0800c43c <__sfmoreglue>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	1e4a      	subs	r2, r1, #1
 800c440:	2568      	movs	r5, #104	; 0x68
 800c442:	4355      	muls	r5, r2
 800c444:	460e      	mov	r6, r1
 800c446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c44a:	f7ff fb4b 	bl	800bae4 <_malloc_r>
 800c44e:	4604      	mov	r4, r0
 800c450:	b140      	cbz	r0, 800c464 <__sfmoreglue+0x28>
 800c452:	2100      	movs	r1, #0
 800c454:	e9c0 1600 	strd	r1, r6, [r0]
 800c458:	300c      	adds	r0, #12
 800c45a:	60a0      	str	r0, [r4, #8]
 800c45c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c460:	f7ff fae9 	bl	800ba36 <memset>
 800c464:	4620      	mov	r0, r4
 800c466:	bd70      	pop	{r4, r5, r6, pc}

0800c468 <__sinit>:
 800c468:	6983      	ldr	r3, [r0, #24]
 800c46a:	b510      	push	{r4, lr}
 800c46c:	4604      	mov	r4, r0
 800c46e:	bb33      	cbnz	r3, 800c4be <__sinit+0x56>
 800c470:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c474:	6503      	str	r3, [r0, #80]	; 0x50
 800c476:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <__sinit+0x58>)
 800c478:	4a12      	ldr	r2, [pc, #72]	; (800c4c4 <__sinit+0x5c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6282      	str	r2, [r0, #40]	; 0x28
 800c47e:	4298      	cmp	r0, r3
 800c480:	bf04      	itt	eq
 800c482:	2301      	moveq	r3, #1
 800c484:	6183      	streq	r3, [r0, #24]
 800c486:	f000 f81f 	bl	800c4c8 <__sfp>
 800c48a:	6060      	str	r0, [r4, #4]
 800c48c:	4620      	mov	r0, r4
 800c48e:	f000 f81b 	bl	800c4c8 <__sfp>
 800c492:	60a0      	str	r0, [r4, #8]
 800c494:	4620      	mov	r0, r4
 800c496:	f000 f817 	bl	800c4c8 <__sfp>
 800c49a:	2200      	movs	r2, #0
 800c49c:	60e0      	str	r0, [r4, #12]
 800c49e:	2104      	movs	r1, #4
 800c4a0:	6860      	ldr	r0, [r4, #4]
 800c4a2:	f7ff ffa1 	bl	800c3e8 <std>
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	2109      	movs	r1, #9
 800c4aa:	68a0      	ldr	r0, [r4, #8]
 800c4ac:	f7ff ff9c 	bl	800c3e8 <std>
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	2112      	movs	r1, #18
 800c4b4:	68e0      	ldr	r0, [r4, #12]
 800c4b6:	f7ff ff97 	bl	800c3e8 <std>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	61a3      	str	r3, [r4, #24]
 800c4be:	bd10      	pop	{r4, pc}
 800c4c0:	0800e764 	.word	0x0800e764
 800c4c4:	0800c431 	.word	0x0800c431

0800c4c8 <__sfp>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	4b1b      	ldr	r3, [pc, #108]	; (800c538 <__sfp+0x70>)
 800c4cc:	681e      	ldr	r6, [r3, #0]
 800c4ce:	69b3      	ldr	r3, [r6, #24]
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	b913      	cbnz	r3, 800c4da <__sfp+0x12>
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff ffc7 	bl	800c468 <__sinit>
 800c4da:	3648      	adds	r6, #72	; 0x48
 800c4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	d503      	bpl.n	800c4ec <__sfp+0x24>
 800c4e4:	6833      	ldr	r3, [r6, #0]
 800c4e6:	b133      	cbz	r3, 800c4f6 <__sfp+0x2e>
 800c4e8:	6836      	ldr	r6, [r6, #0]
 800c4ea:	e7f7      	b.n	800c4dc <__sfp+0x14>
 800c4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4f0:	b16d      	cbz	r5, 800c50e <__sfp+0x46>
 800c4f2:	3468      	adds	r4, #104	; 0x68
 800c4f4:	e7f4      	b.n	800c4e0 <__sfp+0x18>
 800c4f6:	2104      	movs	r1, #4
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ff9f 	bl	800c43c <__sfmoreglue>
 800c4fe:	6030      	str	r0, [r6, #0]
 800c500:	2800      	cmp	r0, #0
 800c502:	d1f1      	bne.n	800c4e8 <__sfp+0x20>
 800c504:	230c      	movs	r3, #12
 800c506:	603b      	str	r3, [r7, #0]
 800c508:	4604      	mov	r4, r0
 800c50a:	4620      	mov	r0, r4
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c50e:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <__sfp+0x74>)
 800c510:	6665      	str	r5, [r4, #100]	; 0x64
 800c512:	e9c4 5500 	strd	r5, r5, [r4]
 800c516:	60a5      	str	r5, [r4, #8]
 800c518:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c51c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c520:	2208      	movs	r2, #8
 800c522:	4629      	mov	r1, r5
 800c524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c528:	f7ff fa85 	bl	800ba36 <memset>
 800c52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c534:	e7e9      	b.n	800c50a <__sfp+0x42>
 800c536:	bf00      	nop
 800c538:	0800e764 	.word	0x0800e764
 800c53c:	ffff0001 	.word	0xffff0001

0800c540 <_fwalk_reent>:
 800c540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c54c:	2600      	movs	r6, #0
 800c54e:	b914      	cbnz	r4, 800c556 <_fwalk_reent+0x16>
 800c550:	4630      	mov	r0, r6
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c55a:	3f01      	subs	r7, #1
 800c55c:	d501      	bpl.n	800c562 <_fwalk_reent+0x22>
 800c55e:	6824      	ldr	r4, [r4, #0]
 800c560:	e7f5      	b.n	800c54e <_fwalk_reent+0xe>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d907      	bls.n	800c578 <_fwalk_reent+0x38>
 800c568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c56c:	3301      	adds	r3, #1
 800c56e:	d003      	beq.n	800c578 <_fwalk_reent+0x38>
 800c570:	4629      	mov	r1, r5
 800c572:	4640      	mov	r0, r8
 800c574:	47c8      	blx	r9
 800c576:	4306      	orrs	r6, r0
 800c578:	3568      	adds	r5, #104	; 0x68
 800c57a:	e7ee      	b.n	800c55a <_fwalk_reent+0x1a>

0800c57c <__swhatbuf_r>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	460e      	mov	r6, r1
 800c580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c584:	2900      	cmp	r1, #0
 800c586:	b096      	sub	sp, #88	; 0x58
 800c588:	4614      	mov	r4, r2
 800c58a:	461d      	mov	r5, r3
 800c58c:	da07      	bge.n	800c59e <__swhatbuf_r+0x22>
 800c58e:	2300      	movs	r3, #0
 800c590:	602b      	str	r3, [r5, #0]
 800c592:	89b3      	ldrh	r3, [r6, #12]
 800c594:	061a      	lsls	r2, r3, #24
 800c596:	d410      	bmi.n	800c5ba <__swhatbuf_r+0x3e>
 800c598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59c:	e00e      	b.n	800c5bc <__swhatbuf_r+0x40>
 800c59e:	466a      	mov	r2, sp
 800c5a0:	f000 fcd2 	bl	800cf48 <_fstat_r>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	dbf2      	blt.n	800c58e <__swhatbuf_r+0x12>
 800c5a8:	9a01      	ldr	r2, [sp, #4]
 800c5aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5b2:	425a      	negs	r2, r3
 800c5b4:	415a      	adcs	r2, r3
 800c5b6:	602a      	str	r2, [r5, #0]
 800c5b8:	e7ee      	b.n	800c598 <__swhatbuf_r+0x1c>
 800c5ba:	2340      	movs	r3, #64	; 0x40
 800c5bc:	2000      	movs	r0, #0
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	b016      	add	sp, #88	; 0x58
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}

0800c5c4 <__smakebuf_r>:
 800c5c4:	898b      	ldrh	r3, [r1, #12]
 800c5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5c8:	079d      	lsls	r5, r3, #30
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	d507      	bpl.n	800c5e0 <__smakebuf_r+0x1c>
 800c5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	2301      	movs	r3, #1
 800c5da:	6163      	str	r3, [r4, #20]
 800c5dc:	b002      	add	sp, #8
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	ab01      	add	r3, sp, #4
 800c5e2:	466a      	mov	r2, sp
 800c5e4:	f7ff ffca 	bl	800c57c <__swhatbuf_r>
 800c5e8:	9900      	ldr	r1, [sp, #0]
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f7ff fa79 	bl	800bae4 <_malloc_r>
 800c5f2:	b948      	cbnz	r0, 800c608 <__smakebuf_r+0x44>
 800c5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f8:	059a      	lsls	r2, r3, #22
 800c5fa:	d4ef      	bmi.n	800c5dc <__smakebuf_r+0x18>
 800c5fc:	f023 0303 	bic.w	r3, r3, #3
 800c600:	f043 0302 	orr.w	r3, r3, #2
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	e7e3      	b.n	800c5d0 <__smakebuf_r+0xc>
 800c608:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <__smakebuf_r+0x7c>)
 800c60a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	6020      	str	r0, [r4, #0]
 800c610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c614:	81a3      	strh	r3, [r4, #12]
 800c616:	9b00      	ldr	r3, [sp, #0]
 800c618:	6163      	str	r3, [r4, #20]
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	6120      	str	r0, [r4, #16]
 800c61e:	b15b      	cbz	r3, 800c638 <__smakebuf_r+0x74>
 800c620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c624:	4630      	mov	r0, r6
 800c626:	f000 fca1 	bl	800cf6c <_isatty_r>
 800c62a:	b128      	cbz	r0, 800c638 <__smakebuf_r+0x74>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	431d      	orrs	r5, r3
 800c63c:	81a5      	strh	r5, [r4, #12]
 800c63e:	e7cd      	b.n	800c5dc <__smakebuf_r+0x18>
 800c640:	0800c431 	.word	0x0800c431

0800c644 <__malloc_lock>:
 800c644:	4770      	bx	lr

0800c646 <__malloc_unlock>:
 800c646:	4770      	bx	lr

0800c648 <__ssputs_r>:
 800c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	688e      	ldr	r6, [r1, #8]
 800c64e:	429e      	cmp	r6, r3
 800c650:	4682      	mov	sl, r0
 800c652:	460c      	mov	r4, r1
 800c654:	4690      	mov	r8, r2
 800c656:	4699      	mov	r9, r3
 800c658:	d837      	bhi.n	800c6ca <__ssputs_r+0x82>
 800c65a:	898a      	ldrh	r2, [r1, #12]
 800c65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c660:	d031      	beq.n	800c6c6 <__ssputs_r+0x7e>
 800c662:	6825      	ldr	r5, [r4, #0]
 800c664:	6909      	ldr	r1, [r1, #16]
 800c666:	1a6f      	subs	r7, r5, r1
 800c668:	6965      	ldr	r5, [r4, #20]
 800c66a:	2302      	movs	r3, #2
 800c66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c670:	fb95 f5f3 	sdiv	r5, r5, r3
 800c674:	f109 0301 	add.w	r3, r9, #1
 800c678:	443b      	add	r3, r7
 800c67a:	429d      	cmp	r5, r3
 800c67c:	bf38      	it	cc
 800c67e:	461d      	movcc	r5, r3
 800c680:	0553      	lsls	r3, r2, #21
 800c682:	d530      	bpl.n	800c6e6 <__ssputs_r+0x9e>
 800c684:	4629      	mov	r1, r5
 800c686:	f7ff fa2d 	bl	800bae4 <_malloc_r>
 800c68a:	4606      	mov	r6, r0
 800c68c:	b950      	cbnz	r0, 800c6a4 <__ssputs_r+0x5c>
 800c68e:	230c      	movs	r3, #12
 800c690:	f8ca 3000 	str.w	r3, [sl]
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a4:	463a      	mov	r2, r7
 800c6a6:	6921      	ldr	r1, [r4, #16]
 800c6a8:	f7ff f9ba 	bl	800ba20 <memcpy>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	6165      	str	r5, [r4, #20]
 800c6bc:	443e      	add	r6, r7
 800c6be:	1bed      	subs	r5, r5, r7
 800c6c0:	6026      	str	r6, [r4, #0]
 800c6c2:	60a5      	str	r5, [r4, #8]
 800c6c4:	464e      	mov	r6, r9
 800c6c6:	454e      	cmp	r6, r9
 800c6c8:	d900      	bls.n	800c6cc <__ssputs_r+0x84>
 800c6ca:	464e      	mov	r6, r9
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	4641      	mov	r1, r8
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	f000 fc6d 	bl	800cfb0 <memmove>
 800c6d6:	68a3      	ldr	r3, [r4, #8]
 800c6d8:	1b9b      	subs	r3, r3, r6
 800c6da:	60a3      	str	r3, [r4, #8]
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	441e      	add	r6, r3
 800c6e0:	6026      	str	r6, [r4, #0]
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e7dc      	b.n	800c6a0 <__ssputs_r+0x58>
 800c6e6:	462a      	mov	r2, r5
 800c6e8:	f000 fc7b 	bl	800cfe2 <_realloc_r>
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d1e2      	bne.n	800c6b8 <__ssputs_r+0x70>
 800c6f2:	6921      	ldr	r1, [r4, #16]
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	f7ff f9a7 	bl	800ba48 <_free_r>
 800c6fa:	e7c8      	b.n	800c68e <__ssputs_r+0x46>

0800c6fc <_svfiprintf_r>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	461d      	mov	r5, r3
 800c702:	898b      	ldrh	r3, [r1, #12]
 800c704:	061f      	lsls	r7, r3, #24
 800c706:	b09d      	sub	sp, #116	; 0x74
 800c708:	4680      	mov	r8, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	4616      	mov	r6, r2
 800c70e:	d50f      	bpl.n	800c730 <_svfiprintf_r+0x34>
 800c710:	690b      	ldr	r3, [r1, #16]
 800c712:	b96b      	cbnz	r3, 800c730 <_svfiprintf_r+0x34>
 800c714:	2140      	movs	r1, #64	; 0x40
 800c716:	f7ff f9e5 	bl	800bae4 <_malloc_r>
 800c71a:	6020      	str	r0, [r4, #0]
 800c71c:	6120      	str	r0, [r4, #16]
 800c71e:	b928      	cbnz	r0, 800c72c <_svfiprintf_r+0x30>
 800c720:	230c      	movs	r3, #12
 800c722:	f8c8 3000 	str.w	r3, [r8]
 800c726:	f04f 30ff 	mov.w	r0, #4294967295
 800c72a:	e0c8      	b.n	800c8be <_svfiprintf_r+0x1c2>
 800c72c:	2340      	movs	r3, #64	; 0x40
 800c72e:	6163      	str	r3, [r4, #20]
 800c730:	2300      	movs	r3, #0
 800c732:	9309      	str	r3, [sp, #36]	; 0x24
 800c734:	2320      	movs	r3, #32
 800c736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c73a:	2330      	movs	r3, #48	; 0x30
 800c73c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c740:	9503      	str	r5, [sp, #12]
 800c742:	f04f 0b01 	mov.w	fp, #1
 800c746:	4637      	mov	r7, r6
 800c748:	463d      	mov	r5, r7
 800c74a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c74e:	b10b      	cbz	r3, 800c754 <_svfiprintf_r+0x58>
 800c750:	2b25      	cmp	r3, #37	; 0x25
 800c752:	d13e      	bne.n	800c7d2 <_svfiprintf_r+0xd6>
 800c754:	ebb7 0a06 	subs.w	sl, r7, r6
 800c758:	d00b      	beq.n	800c772 <_svfiprintf_r+0x76>
 800c75a:	4653      	mov	r3, sl
 800c75c:	4632      	mov	r2, r6
 800c75e:	4621      	mov	r1, r4
 800c760:	4640      	mov	r0, r8
 800c762:	f7ff ff71 	bl	800c648 <__ssputs_r>
 800c766:	3001      	adds	r0, #1
 800c768:	f000 80a4 	beq.w	800c8b4 <_svfiprintf_r+0x1b8>
 800c76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76e:	4453      	add	r3, sl
 800c770:	9309      	str	r3, [sp, #36]	; 0x24
 800c772:	783b      	ldrb	r3, [r7, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 809d 	beq.w	800c8b4 <_svfiprintf_r+0x1b8>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f04f 32ff 	mov.w	r2, #4294967295
 800c780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c78c:	931a      	str	r3, [sp, #104]	; 0x68
 800c78e:	462f      	mov	r7, r5
 800c790:	2205      	movs	r2, #5
 800c792:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c796:	4850      	ldr	r0, [pc, #320]	; (800c8d8 <_svfiprintf_r+0x1dc>)
 800c798:	f7f3 fd32 	bl	8000200 <memchr>
 800c79c:	9b04      	ldr	r3, [sp, #16]
 800c79e:	b9d0      	cbnz	r0, 800c7d6 <_svfiprintf_r+0xda>
 800c7a0:	06d9      	lsls	r1, r3, #27
 800c7a2:	bf44      	itt	mi
 800c7a4:	2220      	movmi	r2, #32
 800c7a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7aa:	071a      	lsls	r2, r3, #28
 800c7ac:	bf44      	itt	mi
 800c7ae:	222b      	movmi	r2, #43	; 0x2b
 800c7b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7b4:	782a      	ldrb	r2, [r5, #0]
 800c7b6:	2a2a      	cmp	r2, #42	; 0x2a
 800c7b8:	d015      	beq.n	800c7e6 <_svfiprintf_r+0xea>
 800c7ba:	9a07      	ldr	r2, [sp, #28]
 800c7bc:	462f      	mov	r7, r5
 800c7be:	2000      	movs	r0, #0
 800c7c0:	250a      	movs	r5, #10
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7c8:	3b30      	subs	r3, #48	; 0x30
 800c7ca:	2b09      	cmp	r3, #9
 800c7cc:	d94d      	bls.n	800c86a <_svfiprintf_r+0x16e>
 800c7ce:	b1b8      	cbz	r0, 800c800 <_svfiprintf_r+0x104>
 800c7d0:	e00f      	b.n	800c7f2 <_svfiprintf_r+0xf6>
 800c7d2:	462f      	mov	r7, r5
 800c7d4:	e7b8      	b.n	800c748 <_svfiprintf_r+0x4c>
 800c7d6:	4a40      	ldr	r2, [pc, #256]	; (800c8d8 <_svfiprintf_r+0x1dc>)
 800c7d8:	1a80      	subs	r0, r0, r2
 800c7da:	fa0b f000 	lsl.w	r0, fp, r0
 800c7de:	4318      	orrs	r0, r3
 800c7e0:	9004      	str	r0, [sp, #16]
 800c7e2:	463d      	mov	r5, r7
 800c7e4:	e7d3      	b.n	800c78e <_svfiprintf_r+0x92>
 800c7e6:	9a03      	ldr	r2, [sp, #12]
 800c7e8:	1d11      	adds	r1, r2, #4
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	9103      	str	r1, [sp, #12]
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	db01      	blt.n	800c7f6 <_svfiprintf_r+0xfa>
 800c7f2:	9207      	str	r2, [sp, #28]
 800c7f4:	e004      	b.n	800c800 <_svfiprintf_r+0x104>
 800c7f6:	4252      	negs	r2, r2
 800c7f8:	f043 0302 	orr.w	r3, r3, #2
 800c7fc:	9207      	str	r2, [sp, #28]
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	783b      	ldrb	r3, [r7, #0]
 800c802:	2b2e      	cmp	r3, #46	; 0x2e
 800c804:	d10c      	bne.n	800c820 <_svfiprintf_r+0x124>
 800c806:	787b      	ldrb	r3, [r7, #1]
 800c808:	2b2a      	cmp	r3, #42	; 0x2a
 800c80a:	d133      	bne.n	800c874 <_svfiprintf_r+0x178>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	1d1a      	adds	r2, r3, #4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	9203      	str	r2, [sp, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	bfb8      	it	lt
 800c818:	f04f 33ff 	movlt.w	r3, #4294967295
 800c81c:	3702      	adds	r7, #2
 800c81e:	9305      	str	r3, [sp, #20]
 800c820:	4d2e      	ldr	r5, [pc, #184]	; (800c8dc <_svfiprintf_r+0x1e0>)
 800c822:	7839      	ldrb	r1, [r7, #0]
 800c824:	2203      	movs	r2, #3
 800c826:	4628      	mov	r0, r5
 800c828:	f7f3 fcea 	bl	8000200 <memchr>
 800c82c:	b138      	cbz	r0, 800c83e <_svfiprintf_r+0x142>
 800c82e:	2340      	movs	r3, #64	; 0x40
 800c830:	1b40      	subs	r0, r0, r5
 800c832:	fa03 f000 	lsl.w	r0, r3, r0
 800c836:	9b04      	ldr	r3, [sp, #16]
 800c838:	4303      	orrs	r3, r0
 800c83a:	3701      	adds	r7, #1
 800c83c:	9304      	str	r3, [sp, #16]
 800c83e:	7839      	ldrb	r1, [r7, #0]
 800c840:	4827      	ldr	r0, [pc, #156]	; (800c8e0 <_svfiprintf_r+0x1e4>)
 800c842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c846:	2206      	movs	r2, #6
 800c848:	1c7e      	adds	r6, r7, #1
 800c84a:	f7f3 fcd9 	bl	8000200 <memchr>
 800c84e:	2800      	cmp	r0, #0
 800c850:	d038      	beq.n	800c8c4 <_svfiprintf_r+0x1c8>
 800c852:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <_svfiprintf_r+0x1e8>)
 800c854:	bb13      	cbnz	r3, 800c89c <_svfiprintf_r+0x1a0>
 800c856:	9b03      	ldr	r3, [sp, #12]
 800c858:	3307      	adds	r3, #7
 800c85a:	f023 0307 	bic.w	r3, r3, #7
 800c85e:	3308      	adds	r3, #8
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c864:	444b      	add	r3, r9
 800c866:	9309      	str	r3, [sp, #36]	; 0x24
 800c868:	e76d      	b.n	800c746 <_svfiprintf_r+0x4a>
 800c86a:	fb05 3202 	mla	r2, r5, r2, r3
 800c86e:	2001      	movs	r0, #1
 800c870:	460f      	mov	r7, r1
 800c872:	e7a6      	b.n	800c7c2 <_svfiprintf_r+0xc6>
 800c874:	2300      	movs	r3, #0
 800c876:	3701      	adds	r7, #1
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	4619      	mov	r1, r3
 800c87c:	250a      	movs	r5, #10
 800c87e:	4638      	mov	r0, r7
 800c880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c884:	3a30      	subs	r2, #48	; 0x30
 800c886:	2a09      	cmp	r2, #9
 800c888:	d903      	bls.n	800c892 <_svfiprintf_r+0x196>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0c8      	beq.n	800c820 <_svfiprintf_r+0x124>
 800c88e:	9105      	str	r1, [sp, #20]
 800c890:	e7c6      	b.n	800c820 <_svfiprintf_r+0x124>
 800c892:	fb05 2101 	mla	r1, r5, r1, r2
 800c896:	2301      	movs	r3, #1
 800c898:	4607      	mov	r7, r0
 800c89a:	e7f0      	b.n	800c87e <_svfiprintf_r+0x182>
 800c89c:	ab03      	add	r3, sp, #12
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <_svfiprintf_r+0x1ec>)
 800c8a4:	a904      	add	r1, sp, #16
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f3af 8000 	nop.w
 800c8ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c8b0:	4681      	mov	r9, r0
 800c8b2:	d1d6      	bne.n	800c862 <_svfiprintf_r+0x166>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	065b      	lsls	r3, r3, #25
 800c8b8:	f53f af35 	bmi.w	800c726 <_svfiprintf_r+0x2a>
 800c8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8be:	b01d      	add	sp, #116	; 0x74
 800c8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	4622      	mov	r2, r4
 800c8ca:	4b07      	ldr	r3, [pc, #28]	; (800c8e8 <_svfiprintf_r+0x1ec>)
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	f000 f9c2 	bl	800cc58 <_printf_i>
 800c8d4:	e7ea      	b.n	800c8ac <_svfiprintf_r+0x1b0>
 800c8d6:	bf00      	nop
 800c8d8:	0800ee60 	.word	0x0800ee60
 800c8dc:	0800ee66 	.word	0x0800ee66
 800c8e0:	0800ee6a 	.word	0x0800ee6a
 800c8e4:	00000000 	.word	0x00000000
 800c8e8:	0800c649 	.word	0x0800c649

0800c8ec <__sfputc_r>:
 800c8ec:	6893      	ldr	r3, [r2, #8]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	b410      	push	{r4}
 800c8f4:	6093      	str	r3, [r2, #8]
 800c8f6:	da08      	bge.n	800c90a <__sfputc_r+0x1e>
 800c8f8:	6994      	ldr	r4, [r2, #24]
 800c8fa:	42a3      	cmp	r3, r4
 800c8fc:	db01      	blt.n	800c902 <__sfputc_r+0x16>
 800c8fe:	290a      	cmp	r1, #10
 800c900:	d103      	bne.n	800c90a <__sfputc_r+0x1e>
 800c902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c906:	f7ff bbff 	b.w	800c108 <__swbuf_r>
 800c90a:	6813      	ldr	r3, [r2, #0]
 800c90c:	1c58      	adds	r0, r3, #1
 800c90e:	6010      	str	r0, [r2, #0]
 800c910:	7019      	strb	r1, [r3, #0]
 800c912:	4608      	mov	r0, r1
 800c914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <__sfputs_r>:
 800c91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91c:	4606      	mov	r6, r0
 800c91e:	460f      	mov	r7, r1
 800c920:	4614      	mov	r4, r2
 800c922:	18d5      	adds	r5, r2, r3
 800c924:	42ac      	cmp	r4, r5
 800c926:	d101      	bne.n	800c92c <__sfputs_r+0x12>
 800c928:	2000      	movs	r0, #0
 800c92a:	e007      	b.n	800c93c <__sfputs_r+0x22>
 800c92c:	463a      	mov	r2, r7
 800c92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c932:	4630      	mov	r0, r6
 800c934:	f7ff ffda 	bl	800c8ec <__sfputc_r>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d1f3      	bne.n	800c924 <__sfputs_r+0xa>
 800c93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c940 <_vfiprintf_r>:
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	460c      	mov	r4, r1
 800c946:	b09d      	sub	sp, #116	; 0x74
 800c948:	4617      	mov	r7, r2
 800c94a:	461d      	mov	r5, r3
 800c94c:	4606      	mov	r6, r0
 800c94e:	b118      	cbz	r0, 800c958 <_vfiprintf_r+0x18>
 800c950:	6983      	ldr	r3, [r0, #24]
 800c952:	b90b      	cbnz	r3, 800c958 <_vfiprintf_r+0x18>
 800c954:	f7ff fd88 	bl	800c468 <__sinit>
 800c958:	4b7c      	ldr	r3, [pc, #496]	; (800cb4c <_vfiprintf_r+0x20c>)
 800c95a:	429c      	cmp	r4, r3
 800c95c:	d158      	bne.n	800ca10 <_vfiprintf_r+0xd0>
 800c95e:	6874      	ldr	r4, [r6, #4]
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	0718      	lsls	r0, r3, #28
 800c964:	d55e      	bpl.n	800ca24 <_vfiprintf_r+0xe4>
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d05b      	beq.n	800ca24 <_vfiprintf_r+0xe4>
 800c96c:	2300      	movs	r3, #0
 800c96e:	9309      	str	r3, [sp, #36]	; 0x24
 800c970:	2320      	movs	r3, #32
 800c972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c976:	2330      	movs	r3, #48	; 0x30
 800c978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c97c:	9503      	str	r5, [sp, #12]
 800c97e:	f04f 0b01 	mov.w	fp, #1
 800c982:	46b8      	mov	r8, r7
 800c984:	4645      	mov	r5, r8
 800c986:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c98a:	b10b      	cbz	r3, 800c990 <_vfiprintf_r+0x50>
 800c98c:	2b25      	cmp	r3, #37	; 0x25
 800c98e:	d154      	bne.n	800ca3a <_vfiprintf_r+0xfa>
 800c990:	ebb8 0a07 	subs.w	sl, r8, r7
 800c994:	d00b      	beq.n	800c9ae <_vfiprintf_r+0x6e>
 800c996:	4653      	mov	r3, sl
 800c998:	463a      	mov	r2, r7
 800c99a:	4621      	mov	r1, r4
 800c99c:	4630      	mov	r0, r6
 800c99e:	f7ff ffbc 	bl	800c91a <__sfputs_r>
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f000 80c2 	beq.w	800cb2c <_vfiprintf_r+0x1ec>
 800c9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9aa:	4453      	add	r3, sl
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	f898 3000 	ldrb.w	r3, [r8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 80ba 	beq.w	800cb2c <_vfiprintf_r+0x1ec>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	9307      	str	r3, [sp, #28]
 800c9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c9cc:	46a8      	mov	r8, r5
 800c9ce:	2205      	movs	r2, #5
 800c9d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c9d4:	485e      	ldr	r0, [pc, #376]	; (800cb50 <_vfiprintf_r+0x210>)
 800c9d6:	f7f3 fc13 	bl	8000200 <memchr>
 800c9da:	9b04      	ldr	r3, [sp, #16]
 800c9dc:	bb78      	cbnz	r0, 800ca3e <_vfiprintf_r+0xfe>
 800c9de:	06d9      	lsls	r1, r3, #27
 800c9e0:	bf44      	itt	mi
 800c9e2:	2220      	movmi	r2, #32
 800c9e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c9e8:	071a      	lsls	r2, r3, #28
 800c9ea:	bf44      	itt	mi
 800c9ec:	222b      	movmi	r2, #43	; 0x2b
 800c9ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c9f2:	782a      	ldrb	r2, [r5, #0]
 800c9f4:	2a2a      	cmp	r2, #42	; 0x2a
 800c9f6:	d02a      	beq.n	800ca4e <_vfiprintf_r+0x10e>
 800c9f8:	9a07      	ldr	r2, [sp, #28]
 800c9fa:	46a8      	mov	r8, r5
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	250a      	movs	r5, #10
 800ca00:	4641      	mov	r1, r8
 800ca02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca06:	3b30      	subs	r3, #48	; 0x30
 800ca08:	2b09      	cmp	r3, #9
 800ca0a:	d969      	bls.n	800cae0 <_vfiprintf_r+0x1a0>
 800ca0c:	b360      	cbz	r0, 800ca68 <_vfiprintf_r+0x128>
 800ca0e:	e024      	b.n	800ca5a <_vfiprintf_r+0x11a>
 800ca10:	4b50      	ldr	r3, [pc, #320]	; (800cb54 <_vfiprintf_r+0x214>)
 800ca12:	429c      	cmp	r4, r3
 800ca14:	d101      	bne.n	800ca1a <_vfiprintf_r+0xda>
 800ca16:	68b4      	ldr	r4, [r6, #8]
 800ca18:	e7a2      	b.n	800c960 <_vfiprintf_r+0x20>
 800ca1a:	4b4f      	ldr	r3, [pc, #316]	; (800cb58 <_vfiprintf_r+0x218>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	bf08      	it	eq
 800ca20:	68f4      	ldreq	r4, [r6, #12]
 800ca22:	e79d      	b.n	800c960 <_vfiprintf_r+0x20>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7ff fbc0 	bl	800c1ac <__swsetup_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d09d      	beq.n	800c96c <_vfiprintf_r+0x2c>
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	b01d      	add	sp, #116	; 0x74
 800ca36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3a:	46a8      	mov	r8, r5
 800ca3c:	e7a2      	b.n	800c984 <_vfiprintf_r+0x44>
 800ca3e:	4a44      	ldr	r2, [pc, #272]	; (800cb50 <_vfiprintf_r+0x210>)
 800ca40:	1a80      	subs	r0, r0, r2
 800ca42:	fa0b f000 	lsl.w	r0, fp, r0
 800ca46:	4318      	orrs	r0, r3
 800ca48:	9004      	str	r0, [sp, #16]
 800ca4a:	4645      	mov	r5, r8
 800ca4c:	e7be      	b.n	800c9cc <_vfiprintf_r+0x8c>
 800ca4e:	9a03      	ldr	r2, [sp, #12]
 800ca50:	1d11      	adds	r1, r2, #4
 800ca52:	6812      	ldr	r2, [r2, #0]
 800ca54:	9103      	str	r1, [sp, #12]
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	db01      	blt.n	800ca5e <_vfiprintf_r+0x11e>
 800ca5a:	9207      	str	r2, [sp, #28]
 800ca5c:	e004      	b.n	800ca68 <_vfiprintf_r+0x128>
 800ca5e:	4252      	negs	r2, r2
 800ca60:	f043 0302 	orr.w	r3, r3, #2
 800ca64:	9207      	str	r2, [sp, #28]
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	f898 3000 	ldrb.w	r3, [r8]
 800ca6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6e:	d10e      	bne.n	800ca8e <_vfiprintf_r+0x14e>
 800ca70:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ca74:	2b2a      	cmp	r3, #42	; 0x2a
 800ca76:	d138      	bne.n	800caea <_vfiprintf_r+0x1aa>
 800ca78:	9b03      	ldr	r3, [sp, #12]
 800ca7a:	1d1a      	adds	r2, r3, #4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	9203      	str	r2, [sp, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bfb8      	it	lt
 800ca84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca88:	f108 0802 	add.w	r8, r8, #2
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	4d33      	ldr	r5, [pc, #204]	; (800cb5c <_vfiprintf_r+0x21c>)
 800ca90:	f898 1000 	ldrb.w	r1, [r8]
 800ca94:	2203      	movs	r2, #3
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7f3 fbb2 	bl	8000200 <memchr>
 800ca9c:	b140      	cbz	r0, 800cab0 <_vfiprintf_r+0x170>
 800ca9e:	2340      	movs	r3, #64	; 0x40
 800caa0:	1b40      	subs	r0, r0, r5
 800caa2:	fa03 f000 	lsl.w	r0, r3, r0
 800caa6:	9b04      	ldr	r3, [sp, #16]
 800caa8:	4303      	orrs	r3, r0
 800caaa:	f108 0801 	add.w	r8, r8, #1
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	f898 1000 	ldrb.w	r1, [r8]
 800cab4:	482a      	ldr	r0, [pc, #168]	; (800cb60 <_vfiprintf_r+0x220>)
 800cab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caba:	2206      	movs	r2, #6
 800cabc:	f108 0701 	add.w	r7, r8, #1
 800cac0:	f7f3 fb9e 	bl	8000200 <memchr>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d037      	beq.n	800cb38 <_vfiprintf_r+0x1f8>
 800cac8:	4b26      	ldr	r3, [pc, #152]	; (800cb64 <_vfiprintf_r+0x224>)
 800caca:	bb1b      	cbnz	r3, 800cb14 <_vfiprintf_r+0x1d4>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	3307      	adds	r3, #7
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	3308      	adds	r3, #8
 800cad6:	9303      	str	r3, [sp, #12]
 800cad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cada:	444b      	add	r3, r9
 800cadc:	9309      	str	r3, [sp, #36]	; 0x24
 800cade:	e750      	b.n	800c982 <_vfiprintf_r+0x42>
 800cae0:	fb05 3202 	mla	r2, r5, r2, r3
 800cae4:	2001      	movs	r0, #1
 800cae6:	4688      	mov	r8, r1
 800cae8:	e78a      	b.n	800ca00 <_vfiprintf_r+0xc0>
 800caea:	2300      	movs	r3, #0
 800caec:	f108 0801 	add.w	r8, r8, #1
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	4619      	mov	r1, r3
 800caf4:	250a      	movs	r5, #10
 800caf6:	4640      	mov	r0, r8
 800caf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cafc:	3a30      	subs	r2, #48	; 0x30
 800cafe:	2a09      	cmp	r2, #9
 800cb00:	d903      	bls.n	800cb0a <_vfiprintf_r+0x1ca>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0c3      	beq.n	800ca8e <_vfiprintf_r+0x14e>
 800cb06:	9105      	str	r1, [sp, #20]
 800cb08:	e7c1      	b.n	800ca8e <_vfiprintf_r+0x14e>
 800cb0a:	fb05 2101 	mla	r1, r5, r1, r2
 800cb0e:	2301      	movs	r3, #1
 800cb10:	4680      	mov	r8, r0
 800cb12:	e7f0      	b.n	800caf6 <_vfiprintf_r+0x1b6>
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4622      	mov	r2, r4
 800cb1a:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <_vfiprintf_r+0x228>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f3af 8000 	nop.w
 800cb24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb28:	4681      	mov	r9, r0
 800cb2a:	d1d5      	bne.n	800cad8 <_vfiprintf_r+0x198>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	065b      	lsls	r3, r3, #25
 800cb30:	f53f af7e 	bmi.w	800ca30 <_vfiprintf_r+0xf0>
 800cb34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb36:	e77d      	b.n	800ca34 <_vfiprintf_r+0xf4>
 800cb38:	ab03      	add	r3, sp, #12
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	4622      	mov	r2, r4
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <_vfiprintf_r+0x228>)
 800cb40:	a904      	add	r1, sp, #16
 800cb42:	4630      	mov	r0, r6
 800cb44:	f000 f888 	bl	800cc58 <_printf_i>
 800cb48:	e7ec      	b.n	800cb24 <_vfiprintf_r+0x1e4>
 800cb4a:	bf00      	nop
 800cb4c:	0800ee20 	.word	0x0800ee20
 800cb50:	0800ee60 	.word	0x0800ee60
 800cb54:	0800ee40 	.word	0x0800ee40
 800cb58:	0800ee00 	.word	0x0800ee00
 800cb5c:	0800ee66 	.word	0x0800ee66
 800cb60:	0800ee6a 	.word	0x0800ee6a
 800cb64:	00000000 	.word	0x00000000
 800cb68:	0800c91b 	.word	0x0800c91b

0800cb6c <_printf_common>:
 800cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb70:	4691      	mov	r9, r2
 800cb72:	461f      	mov	r7, r3
 800cb74:	688a      	ldr	r2, [r1, #8]
 800cb76:	690b      	ldr	r3, [r1, #16]
 800cb78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	bfb8      	it	lt
 800cb80:	4613      	movlt	r3, r2
 800cb82:	f8c9 3000 	str.w	r3, [r9]
 800cb86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	b112      	cbz	r2, 800cb96 <_printf_common+0x2a>
 800cb90:	3301      	adds	r3, #1
 800cb92:	f8c9 3000 	str.w	r3, [r9]
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	0699      	lsls	r1, r3, #26
 800cb9a:	bf42      	ittt	mi
 800cb9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cba0:	3302      	addmi	r3, #2
 800cba2:	f8c9 3000 	strmi.w	r3, [r9]
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	f015 0506 	ands.w	r5, r5, #6
 800cbac:	d107      	bne.n	800cbbe <_printf_common+0x52>
 800cbae:	f104 0a19 	add.w	sl, r4, #25
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	f8d9 2000 	ldr.w	r2, [r9]
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	42ab      	cmp	r3, r5
 800cbbc:	dc28      	bgt.n	800cc10 <_printf_common+0xa4>
 800cbbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	3300      	adds	r3, #0
 800cbc6:	bf18      	it	ne
 800cbc8:	2301      	movne	r3, #1
 800cbca:	0692      	lsls	r2, r2, #26
 800cbcc:	d42d      	bmi.n	800cc2a <_printf_common+0xbe>
 800cbce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	47c0      	blx	r8
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d020      	beq.n	800cc1e <_printf_common+0xb2>
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	68e5      	ldr	r5, [r4, #12]
 800cbe0:	f8d9 2000 	ldr.w	r2, [r9]
 800cbe4:	f003 0306 	and.w	r3, r3, #6
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	bf08      	it	eq
 800cbec:	1aad      	subeq	r5, r5, r2
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	6922      	ldr	r2, [r4, #16]
 800cbf2:	bf0c      	ite	eq
 800cbf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbf8:	2500      	movne	r5, #0
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	bfc4      	itt	gt
 800cbfe:	1a9b      	subgt	r3, r3, r2
 800cc00:	18ed      	addgt	r5, r5, r3
 800cc02:	f04f 0900 	mov.w	r9, #0
 800cc06:	341a      	adds	r4, #26
 800cc08:	454d      	cmp	r5, r9
 800cc0a:	d11a      	bne.n	800cc42 <_printf_common+0xd6>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e008      	b.n	800cc22 <_printf_common+0xb6>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4652      	mov	r2, sl
 800cc14:	4639      	mov	r1, r7
 800cc16:	4630      	mov	r0, r6
 800cc18:	47c0      	blx	r8
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d103      	bne.n	800cc26 <_printf_common+0xba>
 800cc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc26:	3501      	adds	r5, #1
 800cc28:	e7c3      	b.n	800cbb2 <_printf_common+0x46>
 800cc2a:	18e1      	adds	r1, r4, r3
 800cc2c:	1c5a      	adds	r2, r3, #1
 800cc2e:	2030      	movs	r0, #48	; 0x30
 800cc30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc34:	4422      	add	r2, r4
 800cc36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc3e:	3302      	adds	r3, #2
 800cc40:	e7c5      	b.n	800cbce <_printf_common+0x62>
 800cc42:	2301      	movs	r3, #1
 800cc44:	4622      	mov	r2, r4
 800cc46:	4639      	mov	r1, r7
 800cc48:	4630      	mov	r0, r6
 800cc4a:	47c0      	blx	r8
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d0e6      	beq.n	800cc1e <_printf_common+0xb2>
 800cc50:	f109 0901 	add.w	r9, r9, #1
 800cc54:	e7d8      	b.n	800cc08 <_printf_common+0x9c>
	...

0800cc58 <_printf_i>:
 800cc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc60:	460c      	mov	r4, r1
 800cc62:	7e09      	ldrb	r1, [r1, #24]
 800cc64:	b085      	sub	sp, #20
 800cc66:	296e      	cmp	r1, #110	; 0x6e
 800cc68:	4617      	mov	r7, r2
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	4698      	mov	r8, r3
 800cc6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc70:	f000 80b3 	beq.w	800cdda <_printf_i+0x182>
 800cc74:	d822      	bhi.n	800ccbc <_printf_i+0x64>
 800cc76:	2963      	cmp	r1, #99	; 0x63
 800cc78:	d036      	beq.n	800cce8 <_printf_i+0x90>
 800cc7a:	d80a      	bhi.n	800cc92 <_printf_i+0x3a>
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	f000 80b9 	beq.w	800cdf4 <_printf_i+0x19c>
 800cc82:	2958      	cmp	r1, #88	; 0x58
 800cc84:	f000 8083 	beq.w	800cd8e <_printf_i+0x136>
 800cc88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc90:	e032      	b.n	800ccf8 <_printf_i+0xa0>
 800cc92:	2964      	cmp	r1, #100	; 0x64
 800cc94:	d001      	beq.n	800cc9a <_printf_i+0x42>
 800cc96:	2969      	cmp	r1, #105	; 0x69
 800cc98:	d1f6      	bne.n	800cc88 <_printf_i+0x30>
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	0605      	lsls	r5, r0, #24
 800cca0:	f103 0104 	add.w	r1, r3, #4
 800cca4:	d52a      	bpl.n	800ccfc <_printf_i+0xa4>
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6011      	str	r1, [r2, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	da03      	bge.n	800ccb6 <_printf_i+0x5e>
 800ccae:	222d      	movs	r2, #45	; 0x2d
 800ccb0:	425b      	negs	r3, r3
 800ccb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ccb6:	486f      	ldr	r0, [pc, #444]	; (800ce74 <_printf_i+0x21c>)
 800ccb8:	220a      	movs	r2, #10
 800ccba:	e039      	b.n	800cd30 <_printf_i+0xd8>
 800ccbc:	2973      	cmp	r1, #115	; 0x73
 800ccbe:	f000 809d 	beq.w	800cdfc <_printf_i+0x1a4>
 800ccc2:	d808      	bhi.n	800ccd6 <_printf_i+0x7e>
 800ccc4:	296f      	cmp	r1, #111	; 0x6f
 800ccc6:	d020      	beq.n	800cd0a <_printf_i+0xb2>
 800ccc8:	2970      	cmp	r1, #112	; 0x70
 800ccca:	d1dd      	bne.n	800cc88 <_printf_i+0x30>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	f043 0320 	orr.w	r3, r3, #32
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	e003      	b.n	800ccde <_printf_i+0x86>
 800ccd6:	2975      	cmp	r1, #117	; 0x75
 800ccd8:	d017      	beq.n	800cd0a <_printf_i+0xb2>
 800ccda:	2978      	cmp	r1, #120	; 0x78
 800ccdc:	d1d4      	bne.n	800cc88 <_printf_i+0x30>
 800ccde:	2378      	movs	r3, #120	; 0x78
 800cce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cce4:	4864      	ldr	r0, [pc, #400]	; (800ce78 <_printf_i+0x220>)
 800cce6:	e055      	b.n	800cd94 <_printf_i+0x13c>
 800cce8:	6813      	ldr	r3, [r2, #0]
 800ccea:	1d19      	adds	r1, r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6011      	str	r1, [r2, #0]
 800ccf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e08c      	b.n	800ce16 <_printf_i+0x1be>
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6011      	str	r1, [r2, #0]
 800cd00:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd04:	bf18      	it	ne
 800cd06:	b21b      	sxthne	r3, r3
 800cd08:	e7cf      	b.n	800ccaa <_printf_i+0x52>
 800cd0a:	6813      	ldr	r3, [r2, #0]
 800cd0c:	6825      	ldr	r5, [r4, #0]
 800cd0e:	1d18      	adds	r0, r3, #4
 800cd10:	6010      	str	r0, [r2, #0]
 800cd12:	0628      	lsls	r0, r5, #24
 800cd14:	d501      	bpl.n	800cd1a <_printf_i+0xc2>
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	e002      	b.n	800cd20 <_printf_i+0xc8>
 800cd1a:	0668      	lsls	r0, r5, #25
 800cd1c:	d5fb      	bpl.n	800cd16 <_printf_i+0xbe>
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	4854      	ldr	r0, [pc, #336]	; (800ce74 <_printf_i+0x21c>)
 800cd22:	296f      	cmp	r1, #111	; 0x6f
 800cd24:	bf14      	ite	ne
 800cd26:	220a      	movne	r2, #10
 800cd28:	2208      	moveq	r2, #8
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd30:	6865      	ldr	r5, [r4, #4]
 800cd32:	60a5      	str	r5, [r4, #8]
 800cd34:	2d00      	cmp	r5, #0
 800cd36:	f2c0 8095 	blt.w	800ce64 <_printf_i+0x20c>
 800cd3a:	6821      	ldr	r1, [r4, #0]
 800cd3c:	f021 0104 	bic.w	r1, r1, #4
 800cd40:	6021      	str	r1, [r4, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d13d      	bne.n	800cdc2 <_printf_i+0x16a>
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	f040 808e 	bne.w	800ce68 <_printf_i+0x210>
 800cd4c:	4665      	mov	r5, ip
 800cd4e:	2a08      	cmp	r2, #8
 800cd50:	d10b      	bne.n	800cd6a <_printf_i+0x112>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	07db      	lsls	r3, r3, #31
 800cd56:	d508      	bpl.n	800cd6a <_printf_i+0x112>
 800cd58:	6923      	ldr	r3, [r4, #16]
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	bfde      	ittt	le
 800cd60:	2330      	movle	r3, #48	; 0x30
 800cd62:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd66:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd6a:	ebac 0305 	sub.w	r3, ip, r5
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	f8cd 8000 	str.w	r8, [sp]
 800cd74:	463b      	mov	r3, r7
 800cd76:	aa03      	add	r2, sp, #12
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff fef6 	bl	800cb6c <_printf_common>
 800cd80:	3001      	adds	r0, #1
 800cd82:	d14d      	bne.n	800ce20 <_printf_i+0x1c8>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	b005      	add	sp, #20
 800cd8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd8e:	4839      	ldr	r0, [pc, #228]	; (800ce74 <_printf_i+0x21c>)
 800cd90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd94:	6813      	ldr	r3, [r2, #0]
 800cd96:	6821      	ldr	r1, [r4, #0]
 800cd98:	1d1d      	adds	r5, r3, #4
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6015      	str	r5, [r2, #0]
 800cd9e:	060a      	lsls	r2, r1, #24
 800cda0:	d50b      	bpl.n	800cdba <_printf_i+0x162>
 800cda2:	07ca      	lsls	r2, r1, #31
 800cda4:	bf44      	itt	mi
 800cda6:	f041 0120 	orrmi.w	r1, r1, #32
 800cdaa:	6021      	strmi	r1, [r4, #0]
 800cdac:	b91b      	cbnz	r3, 800cdb6 <_printf_i+0x15e>
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	f022 0220 	bic.w	r2, r2, #32
 800cdb4:	6022      	str	r2, [r4, #0]
 800cdb6:	2210      	movs	r2, #16
 800cdb8:	e7b7      	b.n	800cd2a <_printf_i+0xd2>
 800cdba:	064d      	lsls	r5, r1, #25
 800cdbc:	bf48      	it	mi
 800cdbe:	b29b      	uxthmi	r3, r3
 800cdc0:	e7ef      	b.n	800cda2 <_printf_i+0x14a>
 800cdc2:	4665      	mov	r5, ip
 800cdc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdc8:	fb02 3311 	mls	r3, r2, r1, r3
 800cdcc:	5cc3      	ldrb	r3, [r0, r3]
 800cdce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	d1f5      	bne.n	800cdc4 <_printf_i+0x16c>
 800cdd8:	e7b9      	b.n	800cd4e <_printf_i+0xf6>
 800cdda:	6813      	ldr	r3, [r2, #0]
 800cddc:	6825      	ldr	r5, [r4, #0]
 800cdde:	6961      	ldr	r1, [r4, #20]
 800cde0:	1d18      	adds	r0, r3, #4
 800cde2:	6010      	str	r0, [r2, #0]
 800cde4:	0628      	lsls	r0, r5, #24
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	d501      	bpl.n	800cdee <_printf_i+0x196>
 800cdea:	6019      	str	r1, [r3, #0]
 800cdec:	e002      	b.n	800cdf4 <_printf_i+0x19c>
 800cdee:	066a      	lsls	r2, r5, #25
 800cdf0:	d5fb      	bpl.n	800cdea <_printf_i+0x192>
 800cdf2:	8019      	strh	r1, [r3, #0]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	4665      	mov	r5, ip
 800cdfa:	e7b9      	b.n	800cd70 <_printf_i+0x118>
 800cdfc:	6813      	ldr	r3, [r2, #0]
 800cdfe:	1d19      	adds	r1, r3, #4
 800ce00:	6011      	str	r1, [r2, #0]
 800ce02:	681d      	ldr	r5, [r3, #0]
 800ce04:	6862      	ldr	r2, [r4, #4]
 800ce06:	2100      	movs	r1, #0
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f7f3 f9f9 	bl	8000200 <memchr>
 800ce0e:	b108      	cbz	r0, 800ce14 <_printf_i+0x1bc>
 800ce10:	1b40      	subs	r0, r0, r5
 800ce12:	6060      	str	r0, [r4, #4]
 800ce14:	6863      	ldr	r3, [r4, #4]
 800ce16:	6123      	str	r3, [r4, #16]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce1e:	e7a7      	b.n	800cd70 <_printf_i+0x118>
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	462a      	mov	r2, r5
 800ce24:	4639      	mov	r1, r7
 800ce26:	4630      	mov	r0, r6
 800ce28:	47c0      	blx	r8
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d0aa      	beq.n	800cd84 <_printf_i+0x12c>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	079b      	lsls	r3, r3, #30
 800ce32:	d413      	bmi.n	800ce5c <_printf_i+0x204>
 800ce34:	68e0      	ldr	r0, [r4, #12]
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	4298      	cmp	r0, r3
 800ce3a:	bfb8      	it	lt
 800ce3c:	4618      	movlt	r0, r3
 800ce3e:	e7a3      	b.n	800cd88 <_printf_i+0x130>
 800ce40:	2301      	movs	r3, #1
 800ce42:	464a      	mov	r2, r9
 800ce44:	4639      	mov	r1, r7
 800ce46:	4630      	mov	r0, r6
 800ce48:	47c0      	blx	r8
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d09a      	beq.n	800cd84 <_printf_i+0x12c>
 800ce4e:	3501      	adds	r5, #1
 800ce50:	68e3      	ldr	r3, [r4, #12]
 800ce52:	9a03      	ldr	r2, [sp, #12]
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	42ab      	cmp	r3, r5
 800ce58:	dcf2      	bgt.n	800ce40 <_printf_i+0x1e8>
 800ce5a:	e7eb      	b.n	800ce34 <_printf_i+0x1dc>
 800ce5c:	2500      	movs	r5, #0
 800ce5e:	f104 0919 	add.w	r9, r4, #25
 800ce62:	e7f5      	b.n	800ce50 <_printf_i+0x1f8>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1ac      	bne.n	800cdc2 <_printf_i+0x16a>
 800ce68:	7803      	ldrb	r3, [r0, #0]
 800ce6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce72:	e76c      	b.n	800cd4e <_printf_i+0xf6>
 800ce74:	0800ee71 	.word	0x0800ee71
 800ce78:	0800ee82 	.word	0x0800ee82

0800ce7c <__sread>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	460c      	mov	r4, r1
 800ce80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce84:	f000 f8d4 	bl	800d030 <_read_r>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	bfab      	itete	ge
 800ce8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce90:	181b      	addge	r3, r3, r0
 800ce92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce96:	bfac      	ite	ge
 800ce98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce9a:	81a3      	strhlt	r3, [r4, #12]
 800ce9c:	bd10      	pop	{r4, pc}

0800ce9e <__swrite>:
 800ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	461f      	mov	r7, r3
 800cea4:	898b      	ldrh	r3, [r1, #12]
 800cea6:	05db      	lsls	r3, r3, #23
 800cea8:	4605      	mov	r5, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4616      	mov	r6, r2
 800ceae:	d505      	bpl.n	800cebc <__swrite+0x1e>
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb8:	f000 f868 	bl	800cf8c <_lseek_r>
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	4632      	mov	r2, r6
 800ceca:	463b      	mov	r3, r7
 800cecc:	4628      	mov	r0, r5
 800cece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ced2:	f000 b817 	b.w	800cf04 <_write_r>

0800ced6 <__sseek>:
 800ced6:	b510      	push	{r4, lr}
 800ced8:	460c      	mov	r4, r1
 800ceda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cede:	f000 f855 	bl	800cf8c <_lseek_r>
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	bf15      	itete	ne
 800cee8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cef2:	81a3      	strheq	r3, [r4, #12]
 800cef4:	bf18      	it	ne
 800cef6:	81a3      	strhne	r3, [r4, #12]
 800cef8:	bd10      	pop	{r4, pc}

0800cefa <__sclose>:
 800cefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefe:	f000 b813 	b.w	800cf28 <_close_r>
	...

0800cf04 <_write_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4c07      	ldr	r4, [pc, #28]	; (800cf24 <_write_r+0x20>)
 800cf08:	4605      	mov	r5, r0
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	6022      	str	r2, [r4, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	f7f4 f8b9 	bl	800108a <_write>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_write_r+0x1e>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_write_r+0x1e>
 800cf20:	602b      	str	r3, [r5, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	200031a0 	.word	0x200031a0

0800cf28 <_close_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4c06      	ldr	r4, [pc, #24]	; (800cf44 <_close_r+0x1c>)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4605      	mov	r5, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	f7f4 f8c5 	bl	80010c2 <_close>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_close_r+0x1a>
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_close_r+0x1a>
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	200031a0 	.word	0x200031a0

0800cf48 <_fstat_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4c07      	ldr	r4, [pc, #28]	; (800cf68 <_fstat_r+0x20>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4605      	mov	r5, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	f7f4 f8c0 	bl	80010da <_fstat>
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	d102      	bne.n	800cf64 <_fstat_r+0x1c>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	b103      	cbz	r3, 800cf64 <_fstat_r+0x1c>
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	bd38      	pop	{r3, r4, r5, pc}
 800cf66:	bf00      	nop
 800cf68:	200031a0 	.word	0x200031a0

0800cf6c <_isatty_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4c06      	ldr	r4, [pc, #24]	; (800cf88 <_isatty_r+0x1c>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4605      	mov	r5, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	f7f4 f8bf 	bl	80010fa <_isatty>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_isatty_r+0x1a>
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_isatty_r+0x1a>
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	200031a0 	.word	0x200031a0

0800cf8c <_lseek_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4c07      	ldr	r4, [pc, #28]	; (800cfac <_lseek_r+0x20>)
 800cf90:	4605      	mov	r5, r0
 800cf92:	4608      	mov	r0, r1
 800cf94:	4611      	mov	r1, r2
 800cf96:	2200      	movs	r2, #0
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f7f4 f8b8 	bl	8001110 <_lseek>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_lseek_r+0x1e>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_lseek_r+0x1e>
 800cfa8:	602b      	str	r3, [r5, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	200031a0 	.word	0x200031a0

0800cfb0 <memmove>:
 800cfb0:	4288      	cmp	r0, r1
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	eb01 0302 	add.w	r3, r1, r2
 800cfb8:	d807      	bhi.n	800cfca <memmove+0x1a>
 800cfba:	1e42      	subs	r2, r0, #1
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	d00a      	beq.n	800cfd6 <memmove+0x26>
 800cfc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cfc8:	e7f8      	b.n	800cfbc <memmove+0xc>
 800cfca:	4283      	cmp	r3, r0
 800cfcc:	d9f5      	bls.n	800cfba <memmove+0xa>
 800cfce:	1881      	adds	r1, r0, r2
 800cfd0:	1ad2      	subs	r2, r2, r3
 800cfd2:	42d3      	cmn	r3, r2
 800cfd4:	d100      	bne.n	800cfd8 <memmove+0x28>
 800cfd6:	bd10      	pop	{r4, pc}
 800cfd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfdc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cfe0:	e7f7      	b.n	800cfd2 <memmove+0x22>

0800cfe2 <_realloc_r>:
 800cfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	460e      	mov	r6, r1
 800cfea:	b921      	cbnz	r1, 800cff6 <_realloc_r+0x14>
 800cfec:	4611      	mov	r1, r2
 800cfee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cff2:	f7fe bd77 	b.w	800bae4 <_malloc_r>
 800cff6:	b922      	cbnz	r2, 800d002 <_realloc_r+0x20>
 800cff8:	f7fe fd26 	bl	800ba48 <_free_r>
 800cffc:	4625      	mov	r5, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d002:	f000 f827 	bl	800d054 <_malloc_usable_size_r>
 800d006:	42a0      	cmp	r0, r4
 800d008:	d20f      	bcs.n	800d02a <_realloc_r+0x48>
 800d00a:	4621      	mov	r1, r4
 800d00c:	4638      	mov	r0, r7
 800d00e:	f7fe fd69 	bl	800bae4 <_malloc_r>
 800d012:	4605      	mov	r5, r0
 800d014:	2800      	cmp	r0, #0
 800d016:	d0f2      	beq.n	800cffe <_realloc_r+0x1c>
 800d018:	4631      	mov	r1, r6
 800d01a:	4622      	mov	r2, r4
 800d01c:	f7fe fd00 	bl	800ba20 <memcpy>
 800d020:	4631      	mov	r1, r6
 800d022:	4638      	mov	r0, r7
 800d024:	f7fe fd10 	bl	800ba48 <_free_r>
 800d028:	e7e9      	b.n	800cffe <_realloc_r+0x1c>
 800d02a:	4635      	mov	r5, r6
 800d02c:	e7e7      	b.n	800cffe <_realloc_r+0x1c>
	...

0800d030 <_read_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4c07      	ldr	r4, [pc, #28]	; (800d050 <_read_r+0x20>)
 800d034:	4605      	mov	r5, r0
 800d036:	4608      	mov	r0, r1
 800d038:	4611      	mov	r1, r2
 800d03a:	2200      	movs	r2, #0
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	f7f4 f806 	bl	8001050 <_read>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_read_r+0x1e>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_read_r+0x1e>
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	200031a0 	.word	0x200031a0

0800d054 <_malloc_usable_size_r>:
 800d054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d058:	1f18      	subs	r0, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfbc      	itt	lt
 800d05e:	580b      	ldrlt	r3, [r1, r0]
 800d060:	18c0      	addlt	r0, r0, r3
 800d062:	4770      	bx	lr

0800d064 <_init>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	bf00      	nop
 800d068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06a:	bc08      	pop	{r3}
 800d06c:	469e      	mov	lr, r3
 800d06e:	4770      	bx	lr

0800d070 <_fini>:
 800d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d072:	bf00      	nop
 800d074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d076:	bc08      	pop	{r3}
 800d078:	469e      	mov	lr, r3
 800d07a:	4770      	bx	lr
